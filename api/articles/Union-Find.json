{"title":"并查集","uid":"c18469ab20e7b093d36b4a61728d07eb","slug":"Union-Find","date":"2023-05-21T10:02:45.000Z","updated":"2024-03-18T09:10:01.732Z","comments":true,"path":"api/articles/Union-Find.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/DS.png","content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本文来自Coursera的<a href=\"https://www.coursera.org/learn/algorithms-part1/home/welcome\">Algorithms, Part I</a>课程</p></blockquote>\n<h2 id=\"动态连通性\"><a class=\"markdownIt-Anchor\" href=\"#动态连通性\"></a> 动态连通性</h2>\n<h3 id=\"我们假设相连是一种等价关系这也就意味-着它具有\"><a class=\"markdownIt-Anchor\" href=\"#我们假设相连是一种等价关系这也就意味-着它具有\"></a> 我们假设“相连”是一种等价关系，这也就意味 着它具有：</h3>\n<ul>\n<li>自反性：p 和 p 是相连的</li>\n<li>对称性：如果 p 和 q 是相连的，那么 q 和 p 也是相连的</li>\n<li>传递性：如果 p 和 q 是相连的且 q 和 r 是相连的，那么 p 和 r 也是相连的</li>\n</ul>\n<h3 id=\"连通分量\"><a class=\"markdownIt-Anchor\" href=\"#连通分量\"></a> 连通分量</h3>\n<p>连通分量是相连元素组成的最大集合</p>\n<h3 id=\"查找\"><a class=\"markdownIt-Anchor\" href=\"#查找\"></a> 查找</h3>\n<p>检查两个元素是否在一个分量中</p>\n<h3 id=\"归并\"><a class=\"markdownIt-Anchor\" href=\"#归并\"></a> 归并</h3>\n<p>将两个分量归并到相同的分量中</p>\n<h2 id=\"并查集算法的api\"><a class=\"markdownIt-Anchor\" href=\"#并查集算法的api\"></a> 并查集算法的API</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><code>public class UF</code></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>UF(int N)</code></td>\n<td>以整数标识（ 0 到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">N-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> ）初始化 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> 个触点</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>void union(int p, int q)</code></td>\n<td>在 p 和 q 之间添加一条连接</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>int find(int p)</code></td>\n<td>p（0 到 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">N-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> ）所在的分量的标识符</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>boolean connected(int p, int q)</code></td>\n<td>如果 p 和 q 存在于同一个分量中则返回 <code>true</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>int count() </code></td>\n<td>连通分量的数量</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"quick-find-算法\"><a class=\"markdownIt-Anchor\" href=\"#quick-find-算法\"></a> quick-find 算法</h2>\n<h3 id=\"数据结构\"><a class=\"markdownIt-Anchor\" href=\"#数据结构\"></a> 数据结构</h3>\n<ul>\n<li>长度为 N 的整型数组 <code>id[]</code></li>\n<li>当且仅当 p 和 q 有相同 <code>id</code> 时 p 和 q 连通</li>\n</ul>\n<figure class=\"shiki java\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div><div class=\"code\"><pre class=\"shiki One Dark Pro\"><code><span class=\"line\"><span style=\"color: #C678DD\">private</span><span style=\"color: #E06C75\"> </span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\">[] id</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">public</span><span style=\"color: #E06C75\"> </span><span style=\"color: #61AFEF; font-weight: bold\">QuickFindUF</span><span style=\"color: #E06C75\">(</span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> N) {</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    id </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #E06C75\"> </span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\">[N]</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    </span><span style=\"color: #C678DD\">for</span><span style=\"color: #E06C75\"> (</span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> i </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #E06C75\"> i </span><span style=\"color: #56B6C2\">&lt;</span><span style=\"color: #E06C75\"> N</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #E06C75\"> i</span><span style=\"color: #ABB2BF\">++</span><span style=\"color: #E06C75\">)</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">        id[i] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> i</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">}</span></span></code></pre></div></div></figure>\n<h3 id=\"find\"><a class=\"markdownIt-Anchor\" href=\"#find\"></a> find()</h3>\n<p>返回根节点</p>\n<figure class=\"shiki java\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div><div class=\"code\"><pre class=\"shiki One Dark Pro\"><code><span class=\"line\"><span style=\"color: #C678DD\">public</span><span style=\"color: #E06C75\"> </span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> </span><span style=\"color: #61AFEF; font-weight: bold\">root</span><span style=\"color: #E06C75\">(</span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> p) {</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    </span><span style=\"color: #C678DD\">return</span><span style=\"color: #E06C75\"> id[p]</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">}</span></span></code></pre></div></div></figure>\n<h3 id=\"union\"><a class=\"markdownIt-Anchor\" href=\"#union\"></a> union()</h3>\n<p>把要归并的所有连通分量的 <code>id</code> 改为另一个连通分量的 <code>id</code></p>\n<figure class=\"shiki java\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div><div class=\"code\"><pre class=\"shiki One Dark Pro\"><code><span class=\"line\"><span style=\"color: #C678DD\">public</span><span style=\"color: #E06C75\"> </span><span style=\"color: #C678DD\">void</span><span style=\"color: #E06C75\"> </span><span style=\"color: #61AFEF; font-weight: bold\">union</span><span style=\"color: #E06C75\">(</span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> p</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\"> </span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> q) {</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    </span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> pid </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> id[p]</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    </span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> qid </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> id[q]</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    </span><span style=\"color: #C678DD\">for</span><span style=\"color: #E06C75\"> (</span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> i </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #E06C75\"> i </span><span style=\"color: #56B6C2\">&lt;</span><span style=\"color: #E06C75\"> </span><span style=\"color: #E5C07B\">id</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E5C07B\">length</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #E06C75\"> i</span><span style=\"color: #ABB2BF\">++</span><span style=\"color: #E06C75\">)</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">        </span><span style=\"color: #C678DD\">if</span><span style=\"color: #E06C75\"> (id[i] </span><span style=\"color: #56B6C2\">==</span><span style=\"color: #E06C75\"> pid) id[i] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> qid</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">}</span></span></code></pre></div></div></figure>\n<h3 id=\"复杂度分析\"><a class=\"markdownIt-Anchor\" href=\"#复杂度分析\"></a> 复杂度分析</h3>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>构造函数</th>\n<th>union()</th>\n<th>find()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>quick-find</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></td>\n</tr>\n</tbody>\n</table>\n<p><code>union</code>操作过于复杂，很难运用于大型问题</p>\n<h2 id=\"quick-union-算法\"><a class=\"markdownIt-Anchor\" href=\"#quick-union-算法\"></a> quick-union 算法</h2>\n<h3 id=\"数据结构-2\"><a class=\"markdownIt-Anchor\" href=\"#数据结构-2\"></a> 数据结构</h3>\n<p>还是 <code>id[]</code> 数组，不过这次不用把所有的分量都改了，一种“偷懒”算法，即<strong>尽量避免计算直到不得不进行计算</strong></p>\n<figure class=\"shiki java\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div><div class=\"code\"><pre class=\"shiki One Dark Pro\"><code><span class=\"line\"><span style=\"color: #C678DD\">private</span><span style=\"color: #E06C75\"> </span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\">[] id</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">public</span><span style=\"color: #E06C75\"> </span><span style=\"color: #61AFEF; font-weight: bold\">QuickUnionUF</span><span style=\"color: #E06C75\">(</span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> N) {</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    id </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #E06C75\"> </span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\">[N]</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    </span><span style=\"color: #C678DD\">for</span><span style=\"color: #E06C75\"> (</span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> i </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #E06C75\"> i </span><span style=\"color: #56B6C2\">&lt;</span><span style=\"color: #E06C75\"> N</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #E06C75\"> i</span><span style=\"color: #ABB2BF\">++</span><span style=\"color: #E06C75\">) id[i] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> i</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">}</span></span></code></pre></div></div></figure>\n<h3 id=\"find-2\"><a class=\"markdownIt-Anchor\" href=\"#find-2\"></a> find()</h3>\n<p>返回根节点</p>\n<figure class=\"shiki java\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div><div class=\"code\"><pre class=\"shiki One Dark Pro\"><code><span class=\"line\"><span style=\"color: #C678DD\">private</span><span style=\"color: #E06C75\"> </span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> </span><span style=\"color: #61AFEF; font-weight: bold\">find</span><span style=\"color: #E06C75\">(</span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> i) {</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    </span><span style=\"color: #C678DD\">while</span><span style=\"color: #E06C75\"> (i </span><span style=\"color: #56B6C2\">!=</span><span style=\"color: #E06C75\"> id[i]) i </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> id[i]</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    </span><span style=\"color: #C678DD\">return</span><span style=\"color: #E06C75\"> i</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">}</span></span></code></pre></div></div></figure>\n<h3 id=\"union-2\"><a class=\"markdownIt-Anchor\" href=\"#union-2\"></a> union()</h3>\n<p>把要归并的连通分量的根节点的 <code>id</code> 改为另一个连通分量根节点的 <code>id</code></p>\n<figure class=\"shiki java\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></div><div class=\"code\"><pre class=\"shiki One Dark Pro\"><code><span class=\"line\"><span style=\"color: #C678DD\">public</span><span style=\"color: #E06C75\"> </span><span style=\"color: #C678DD\">void</span><span style=\"color: #E06C75\"> </span><span style=\"color: #61AFEF; font-weight: bold\">union</span><span style=\"color: #E06C75\">(</span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> p</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\"> </span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> q){</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    </span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> i </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> </span><span style=\"color: #61AFEF; font-weight: bold\">find</span><span style=\"color: #E06C75\">(p)</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    </span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> j </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> </span><span style=\"color: #61AFEF; font-weight: bold\">find</span><span style=\"color: #E06C75\">(q)</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    id[i] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> j</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">}</span></span></code></pre></div></div></figure>\n<h3 id=\"复杂度分析-2\"><a class=\"markdownIt-Anchor\" href=\"#复杂度分析-2\"></a> 复杂度分析</h3>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>构造函数</th>\n<th>union()</th>\n<th>find()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>quick-union</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>（包括查找根节点，取决于树的高度）</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>（取决于树的高度）</td>\n</tr>\n</tbody>\n</table>\n<p><code>union</code>操作过于复杂，很难运用于大型问题</p>\n<h2 id=\"改进\"><a class=\"markdownIt-Anchor\" href=\"#改进\"></a> 改进</h2>\n<h3 id=\"加权-quick-union-算法\"><a class=\"markdownIt-Anchor\" href=\"#加权-quick-union-算法\"></a> 加权 quick-union 算法</h3>\n<p>就是将小树连接到大树来降低高度</p>\n<img src=\"/post/Union-Find/image-20230521192309273.png\" class=\"\" title=\"加权\">\n<p>我们需要一个额外的数组 <code>sz[]</code> 来记录以 <code>i</code> 为根节点的树的大小，只要在 <code>union</code> 方法中加入三行：</p>\n<figure class=\"shiki java\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></div><div class=\"code\"><pre class=\"shiki One Dark Pro\"><code><span class=\"line\"><span style=\"color: #C678DD\">public</span><span style=\"color: #E06C75\"> </span><span style=\"color: #C678DD\">void</span><span style=\"color: #E06C75\"> </span><span style=\"color: #61AFEF; font-weight: bold\">union</span><span style=\"color: #E06C75\">(</span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> p</span><span style=\"color: #ABB2BF\">,</span><span style=\"color: #E06C75\"> </span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> q){</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    </span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> i </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> </span><span style=\"color: #61AFEF; font-weight: bold\">find</span><span style=\"color: #E06C75\">(p)</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    </span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> j </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> </span><span style=\"color: #61AFEF; font-weight: bold\">find</span><span style=\"color: #E06C75\">(q)</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    id[i] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> j</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    </span><span style=\"color: #C678DD\">if</span><span style=\"color: #E06C75\"> (i </span><span style=\"color: #56B6C2\">==</span><span style=\"color: #E06C75\"> j) </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    </span><span style=\"color: #C678DD\">if</span><span style=\"color: #E06C75\"> (sz[i] </span><span style=\"color: #56B6C2\">&lt;</span><span style=\"color: #E06C75\"> sz[j]) {</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">        id[i] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> j</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #E06C75\"> sz[j] </span><span style=\"color: #56B6C2\">+=</span><span style=\"color: #E06C75\"> sz[i]</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    } </span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    </span><span style=\"color: #C678DD\">else</span><span style=\"color: #E06C75\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">        id[j] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> i</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #E06C75\"> sz[i] </span><span style=\"color: #56B6C2\">+=</span><span style=\"color: #E06C75\"> sz[j]</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">}</span></span></code></pre></div></div></figure>\n<h4 id=\"复杂度分析-3\"><a class=\"markdownIt-Anchor\" href=\"#复杂度分析-3\"></a> 复杂度分析</h4>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>构造函数</th>\n<th>union()</th>\n<th>find()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>weighted QU</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span></td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>lg</mi><mo>⁡</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">\\lg N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mop\">l<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>（包括查找根节点）</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>lg</mi><mo>⁡</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">\\lg N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mop\">l<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span></td>\n</tr>\n</tbody>\n</table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>我们能不能再进一步？</p></blockquote>\n<h3 id=\"使用路径压缩的加权-quick-union-算法\"><a class=\"markdownIt-Anchor\" href=\"#使用路径压缩的加权-quick-union-算法\"></a> 使用路径压缩的加权 quick-union 算法</h3>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>顾名思义，就是路径压缩（</p></blockquote>\n<p>为了简化路径压缩，直接加上一行代码就行了，将路径上每个节点指向它在路径上的祖父节点。这种实现不如完全展平好，但在实际应用中两者差不多一样好：</p>\n<figure class=\"shiki java\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div><div class=\"code\"><pre class=\"shiki One Dark Pro\"><code><span class=\"line\"><span style=\"color: #C678DD\">private</span><span style=\"color: #E06C75\"> </span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> </span><span style=\"color: #61AFEF; font-weight: bold\">find</span><span style=\"color: #E06C75\">(</span><span style=\"color: #C678DD\">int</span><span style=\"color: #E06C75\"> i) {</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    </span><span style=\"color: #C678DD\">while</span><span style=\"color: #E06C75\"> (i </span><span style=\"color: #56B6C2\">!=</span><span style=\"color: #E06C75\"> id[i]) {</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">        id[i] </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> id[id[i]]</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">        i </span><span style=\"color: #56B6C2\">=</span><span style=\"color: #E06C75\"> id[i]</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    }</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">    </span><span style=\"color: #C678DD\">return</span><span style=\"color: #E06C75\"> i</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #E06C75\">}</span></span></code></pre></div></div></figure>\n<h4 id=\"复杂度分析-4\"><a class=\"markdownIt-Anchor\" href=\"#复杂度分析-4\"></a> 复杂度分析</h4>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>构造函数</th>\n<th>union()</th>\n<th>find()</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>weighted QU</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span></td>\n<td>非常接近线性</td>\n<td>1（均摊 成本）</td>\n</tr>\n</tbody>\n</table>\n","text":" 本文来自Coursera的Algorithms, Part I课程 动态连通性 我们假设“相连”是一种等价关系，这也就意味 着它具有： 自反性：p 和 p 是...","permalink":"/post/Union-Find","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"Algorithms, Part I","slug":"Algorithms-Part-I","count":2,"path":"api/categories/Algorithms-Part-I.json"}],"tags":[{"name":"data structure","slug":"data-structure","count":13,"path":"api/tags/data-structure.json"},{"name":"coding","slug":"coding","count":19,"path":"api/tags/coding.json"},{"name":"algorithms","slug":"algorithms","count":8,"path":"api/tags/algorithms.json"},{"name":"coursera","slug":"coursera","count":2,"path":"api/tags/coursera.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E8%BF%9E%E9%80%9A%E6%80%A7\"><span class=\"toc-text\"> 动态连通性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%91%E4%BB%AC%E5%81%87%E8%AE%BE%E7%9B%B8%E8%BF%9E%E6%98%AF%E4%B8%80%E7%A7%8D%E7%AD%89%E4%BB%B7%E5%85%B3%E7%B3%BB%E8%BF%99%E4%B9%9F%E5%B0%B1%E6%84%8F%E5%91%B3-%E7%9D%80%E5%AE%83%E5%85%B7%E6%9C%89\"><span class=\"toc-text\"> 我们假设“相连”是一种等价关系，这也就意味 着它具有：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F\"><span class=\"toc-text\"> 连通分量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE\"><span class=\"toc-text\"> 查找</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BD%92%E5%B9%B6\"><span class=\"toc-text\"> 归并</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%AE%97%E6%B3%95%E7%9A%84api\"><span class=\"toc-text\"> 并查集算法的API</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#quick-find-%E7%AE%97%E6%B3%95\"><span class=\"toc-text\"> quick-find 算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\"> 数据结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#find\"><span class=\"toc-text\"> find()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#union\"><span class=\"toc-text\"> union()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90\"><span class=\"toc-text\"> 复杂度分析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#quick-union-%E7%AE%97%E6%B3%95\"><span class=\"toc-text\"> quick-union 算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-2\"><span class=\"toc-text\"> 数据结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#find-2\"><span class=\"toc-text\"> find()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#union-2\"><span class=\"toc-text\"> union()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-2\"><span class=\"toc-text\"> 复杂度分析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%94%B9%E8%BF%9B\"><span class=\"toc-text\"> 改进</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E6%9D%83-quick-union-%E7%AE%97%E6%B3%95\"><span class=\"toc-text\"> 加权 quick-union 算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-3\"><span class=\"toc-text\"> 复杂度分析</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E8%B7%AF%E5%BE%84%E5%8E%8B%E7%BC%A9%E7%9A%84%E5%8A%A0%E6%9D%83-quick-union-%E7%AE%97%E6%B3%95\"><span class=\"toc-text\"> 使用路径压缩的加权 quick-union 算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-4\"><span class=\"toc-text\"> 复杂度分析</span></a></li></ol></li></ol></li></ol>","author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"栈与队列","uid":"333795d348e8e56df1fa020b8443f458","slug":"stack_and_queue","date":"2023-05-30T02:25:48.000Z","updated":"2024-03-18T09:10:20.080Z","comments":true,"path":"api/articles/stack_and_queue.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/DS.png","text":" 栈和队列可以说是最基本的数据结构了，它们都是在两端进行操作，其中栈在栈顶进行操作，被称为先进后出（LIFO），队列在队头和队尾进行操作，被称为先进先出（FIF...","permalink":"/post/stack_and_queue","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"Algorithms, Part I","slug":"Algorithms-Part-I","count":2,"path":"api/categories/Algorithms-Part-I.json"}],"tags":[{"name":"data structure","slug":"data-structure","count":13,"path":"api/tags/data-structure.json"},{"name":"coding","slug":"coding","count":19,"path":"api/tags/coding.json"},{"name":"algorithms","slug":"algorithms","count":8,"path":"api/tags/algorithms.json"},{"name":"coursera","slug":"coursera","count":2,"path":"api/tags/coursera.json"}],"author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"数据结构之线性表","uid":"9a4a3c848f25d7dc5b1593149d8fc72a","slug":"List","date":"2023-05-17T07:35:23.000Z","updated":"2024-03-17T05:29:42.539Z","comments":true,"path":"api/articles/List.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/DS.png","text":" 这是一系列关于数据结构的笔记博客，为了练习自己的代码能力，咱将尽可能不使用C++来实现这些数据结构 线性表的简单介绍 线性表是具有相同特性的数据元素的一个有限...","permalink":"/post/List","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"data structure","slug":"data-structure","count":11,"path":"api/categories/data-structure.json"}],"tags":[{"name":"data structure","slug":"data-structure","count":13,"path":"api/tags/data-structure.json"},{"name":"coding","slug":"coding","count":19,"path":"api/tags/coding.json"}],"author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}