{"title":"拓扑排序 Topological Sort","uid":"92091d0d673d2f304a54eaf158ea4630","slug":"TS","date":"2023-06-25T06:31:20.000Z","updated":"2024-03-18T09:10:12.234Z","comments":true,"path":"api/articles/TS.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/DS.png","content":"<h2 id=\"拓扑排序-topological-sort\"><a class=\"markdownIt-Anchor\" href=\"#拓扑排序-topological-sort\"></a> 拓扑排序 Topological Sort</h2>\n<h3 id=\"拓扑序列-topological-order\"><a class=\"markdownIt-Anchor\" href=\"#拓扑序列-topological-order\"></a> 拓扑序列 Topological Order</h3>\n<p>拓扑序列是一个有向无环图（Directed Acyclic Graph，简称DAG）的所有顶点的线性序列。</p>\n<p>设G=(V，E)是一个具有n个顶点的有向图，V中顶点序列<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mn>1</mn></msub><mtext>、</mtext><msub><mi>v</mi><mn>2</mn></msub><mtext>、</mtext><mo>…</mo><mtext>、</mtext><msub><mi>v</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">v_1、v_2、…、v_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">、</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">、</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord cjk_fallback\">、</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>称为一个拓扑序列，当且仅当该顶点序列满足下列条件：若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&lt;</mo><msub><mi>v</mi><mi>i</mi></msub><mtext>，</mtext><msub><mi>v</mi><mi>j</mi></msub><mo>&gt;</mo></mrow><annotation encoding=\"application/x-tex\">&lt;v_i，v_j&gt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span></span></span></span>是图中的有向边或者从顶点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">v_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>到顶点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">v_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>有一条路径，则在序列中顶点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">v_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>必须排在顶点<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>j</mi></msub></mrow><annotation encoding=\"application/x-tex\">v_j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>之前。</p>\n<h3 id=\"过程\"><a class=\"markdownIt-Anchor\" href=\"#过程\"></a> 过程</h3>\n<ol>\n<li>从有向图中选择一个没有前驱（即入度为0）的顶点并且输出它。</li>\n<li>从图中删去该顶点，并且删去从该顶点发出的全部有向边。</li>\n<li>重复上述两步，直到剩余的图中不再存在没有前驱的顶点为止。</li>\n</ol>\n<h3 id=\"结果\"><a class=\"markdownIt-Anchor\" href=\"#结果\"></a> 结果</h3>\n<ul>\n<li>图中全部顶点都被输出，即得到包含全部顶点的拓扑序列，称为<strong>成功的拓扑排序</strong>。</li>\n<li>图中顶点未被全部输出，即只能得到部分顶点的拓扑序列，称为<strong>失败的拓扑排序</strong>，说明有向图中<strong>存在回路</strong>。</li>\n</ul>\n<h3 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n<h4 id=\"基于bfs的拓扑排序\"><a class=\"markdownIt-Anchor\" href=\"#基于bfs的拓扑排序\"></a> 基于BFS的拓扑排序</h4>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></div><div class=\"code\"><pre class=\"shiki One Dark Pro\"><code><span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Edge</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> from, to, cost;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF; font-weight: bold\">Edge</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">u</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">w</span><span style=\"color: #ABB2BF\">): </span><span style=\"color: #61AFEF; font-weight: bold\">from</span><span style=\"color: #ABB2BF\">(u), </span><span style=\"color: #61AFEF; font-weight: bold\">to</span><span style=\"color: #ABB2BF\">(v), </span><span style=\"color: #61AFEF; font-weight: bold\">cost</span><span style=\"color: #ABB2BF\">(w) {}</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">vector</span><span style=\"color: #C678DD\">&lt;</span><span style=\"color: #ABB2BF\">Edge</span><span style=\"color: #C678DD\">&gt;</span><span style=\"color: #ABB2BF\"> edges;</span><span style=\"color: #7F848E\"> // 存储所有边</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">vector</span><span style=\"color: #C678DD\">&lt;int&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">G</span><span style=\"color: #ABB2BF\">[MAXN];</span><span style=\"color: #7F848E\"> // G[i] 存储顶点i发出的所有边</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">inDegree</span><span style=\"color: #ABB2BF\">[MAXN];</span><span style=\"color: #7F848E\"> // 存储每个顶点的入度</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">vector</span><span style=\"color: #C678DD\">&lt;int&gt;</span><span style=\"color: #ABB2BF\"> result;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">void</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF; font-weight: bold\">TopologicalSort</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">V</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    queue</span><span style=\"color: #C678DD\">&lt;int&gt;</span><span style=\"color: #ABB2BF\"> q;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E\">    // 统计每个顶点的入度</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> i </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">; i </span><span style=\"color: #C678DD\">&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">edges</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">size</span><span style=\"color: #ABB2BF\">(); </span><span style=\"color: #C678DD\">++</span><span style=\"color: #ABB2BF\">i) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> to </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">edges</span><span style=\"color: #ABB2BF\">[i].</span><span style=\"color: #E06C75\">to</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">inDegree</span><span style=\"color: #ABB2BF\">[to]</span><span style=\"color: #C678DD\">++</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E\">    // 将入度为0的顶点入队</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> i </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">; i </span><span style=\"color: #C678DD\">&lt;</span><span style=\"color: #ABB2BF\"> V; </span><span style=\"color: #C678DD\">++</span><span style=\"color: #ABB2BF\">i) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E5C07B\">inDegree</span><span style=\"color: #ABB2BF\">[i] </span><span style=\"color: #C678DD\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">push</span><span style=\"color: #ABB2BF\">(i);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">while</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #56B6C2\">!</span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">empty</span><span style=\"color: #ABB2BF\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> u </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">front</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">pop</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">result</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">push_back</span><span style=\"color: #ABB2BF\">(u);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E\">        // 遍历顶点u发出的所有边</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> i </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">; i </span><span style=\"color: #C678DD\">&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">G</span><span style=\"color: #ABB2BF\">[u].</span><span style=\"color: #61AFEF; font-weight: bold\">size</span><span style=\"color: #ABB2BF\">(); </span><span style=\"color: #C678DD\">++</span><span style=\"color: #ABB2BF\">i) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            Edge</span><span style=\"color: #56B6C2\">&amp;</span><span style=\"color: #ABB2BF\"> e </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">edges</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E5C07B\">G</span><span style=\"color: #ABB2BF\">[u][i]];</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> v </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">e</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">to</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #7F848E\">            // 删除边(u, v)，更新顶点v的入度</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">--</span><span style=\"color: #E5C07B\">inDegree</span><span style=\"color: #ABB2BF\">[v] </span><span style=\"color: #C678DD\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">                </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">push</span><span style=\"color: #ABB2BF\">(v);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div></div></figure>\n<h4 id=\"基于dfs的拓扑排序\"><a class=\"markdownIt-Anchor\" href=\"#基于dfs的拓扑排序\"></a> 基于DFS的拓扑排序</h4>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></div><div class=\"code\"><pre class=\"shiki One Dark Pro\"><code><span class=\"line\"><span style=\"color: #C678DD\">void</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF; font-weight: bold\">TopSort</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">vector</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">Edge</span><span style=\"color: #ABB2BF\">&gt;</span><span style=\"color: #C678DD\">&amp;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">edges</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #E5C07B\">vector</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #E5C07B\">vector</span><span style=\"color: #ABB2BF\">&lt;</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\">&gt;&gt;</span><span style=\"color: #C678DD\">&amp;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">G</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    stack</span><span style=\"color: #C678DD\">&lt;int&gt;</span><span style=\"color: #ABB2BF\"> st;</span><span style=\"color: #7F848E\">            // 定义一个栈</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">ind</span><span style=\"color: #ABB2BF\">[MAXV];</span><span style=\"color: #7F848E\">            // 记录每个顶点的入度</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF; font-weight: bold\">memset</span><span style=\"color: #ABB2BF\">(ind, </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #C678DD\">sizeof</span><span style=\"color: #ABB2BF\">(ind));</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">const</span><span style=\"color: #ABB2BF\"> Edge</span><span style=\"color: #56B6C2\">&amp;</span><span style=\"color: #ABB2BF\"> edge : edges) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> to </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">edge</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">to</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">ind</span><span style=\"color: #ABB2BF\">[to]</span><span style=\"color: #C678DD\">++</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E\">            // 顶点to的入度增1</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> i </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">; i </span><span style=\"color: #C678DD\">&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">G</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">size</span><span style=\"color: #ABB2BF\">(); i</span><span style=\"color: #C678DD\">++</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E5C07B\">ind</span><span style=\"color: #ABB2BF\">[i] </span><span style=\"color: #C678DD\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #E5C07B\">st</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">push</span><span style=\"color: #ABB2BF\">(i);</span><span style=\"color: #7F848E\">      // 将所有入度为0的顶点进栈</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">while</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #56B6C2\">!</span><span style=\"color: #E5C07B\">st</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">empty</span><span style=\"color: #ABB2BF\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> i </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">st</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">top</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">st</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">pop</span><span style=\"color: #ABB2BF\">();</span><span style=\"color: #7F848E\">             // 出栈一个顶点i</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #61AFEF; font-weight: bold\">printf</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #98C379\">&quot;</span><span style=\"color: #D19A66\">%d</span><span style=\"color: #98C379\"> &quot;</span><span style=\"color: #ABB2BF\">, i);</span><span style=\"color: #7F848E\">     // 输出拓扑序列中的一个顶点i</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> j : </span><span style=\"color: #E5C07B\">G</span><span style=\"color: #ABB2BF\">[i]) {</span><span style=\"color: #7F848E\">  // 遍历顶点i的所有邻接点</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> w </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">edges</span><span style=\"color: #ABB2BF\">[j].</span><span style=\"color: #E06C75\">to</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #E5C07B\">ind</span><span style=\"color: #ABB2BF\">[w]</span><span style=\"color: #C678DD\">--</span><span style=\"color: #ABB2BF\">;</span><span style=\"color: #7F848E\">         // 顶点w的入度减1</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E5C07B\">ind</span><span style=\"color: #ABB2BF\">[w] </span><span style=\"color: #C678DD\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">                </span><span style=\"color: #E5C07B\">st</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">push</span><span style=\"color: #ABB2BF\">(w);</span><span style=\"color: #7F848E\">   // 入度为0的邻接点w进栈</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div></div></figure>\n<h3 id=\"分析\"><a class=\"markdownIt-Anchor\" href=\"#分析\"></a> 分析</h3>\n<p>使用邻接表进行拓扑排序的时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>V</mi><mo>+</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(V + E)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span>。这是一种相对高效的算法，特别适用于稀疏图（边的数量较少）的拓扑排序问题。</p>\n<h2 id=\"aoe网\"><a class=\"markdownIt-Anchor\" href=\"#aoe网\"></a> AOE网</h2>\n<h3 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\"></a> 定义</h3>\n<p>若用一个带权有向图（DAG）描述工程的预计进度，以顶点表示事件，有向边表示活动，边e的权c(e)表示完成活动e所需的时间（比如天数），或者说活动e持续时间<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\to</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span>AOE网。</p>\n<p>通常AOE网中只有一个入度为0的顶点，称为<strong>源点</strong>，和一个出度为0的顶点，称为<strong>汇点</strong>。</p>\n<p>在AOE网中，从源点到汇点的所有路径中，具有<strong>最大路径长度</strong>的路径称为<strong>关键路径</strong>。完成整个工程的<strong>最短时间</strong>就是网中<strong>关键路径的长度</strong>。</p>\n<p>关键路径上的活动称为<strong>关键活动</strong>，或者说关键路径是由关键活动构成的。</p>\n<h3 id=\"事件的最早开始和最迟开始时间\"><a class=\"markdownIt-Anchor\" href=\"#事件的最早开始和最迟开始时间\"></a> 事件的最早开始和最迟开始时间</h3>\n<ul>\n<li>事件v的最早开始时间：规定源点事件的最早开始时间为0。定义图中任一事件v的最早开始时间<code>ee(v)</code>等于x、y、z到v所有路径长度的<strong>最大值</strong></li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.3599999999999999em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>v</mi><mtext>为源点</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">{</mo><mi>e</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>a</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi>e</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>b</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi>e</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>c</mi><mo stretchy=\"false\">}</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>否则</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">ee(v) = \\begin{cases} 0 &amp;v为源点 \\\\ max\\{ee(x)+a,\\ ee(y) + b,\\ ee(z)+c\\} &amp;否则 \\end{cases}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0000299999999998em;vertical-align:-1.25003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord\">0</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">}</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord cjk_fallback\">源</span><span class=\"mord cjk_fallback\">点</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord cjk_fallback\">否</span><span class=\"mord cjk_fallback\">则</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p>\n<img src=\"/post/TS/1.png\" class=\"\">\n<ul>\n<li>事件v的最迟开始时间：定义在不影响整个工程进度的前提下，事件v必须发生的时间称为v的最迟开始时间<code>le(v)</code>应等于<code>ee(y)</code>与v到<strong>汇点</strong>的<strong>最长路径长度之差</strong></li>\n</ul>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mrow><mo fence=\"true\">{</mo><mtable rowspacing=\"0.3599999999999999em\" columnalign=\"left left\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>e</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>v</mi><mtext>为汇点</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">{</mo><mi>l</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>a</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi>l</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>b</mi><mo separator=\"true\">,</mo><mtext> </mtext><mi>l</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>z</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>c</mi><mo stretchy=\"false\">}</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mtext>否则</mtext></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"application/x-tex\">le(v) = \\begin{cases} ee(v) &amp;v为汇点 \\\\ min\\{le(x)-a,\\ le(y) - b,\\ le(z)-c\\} &amp;否则 \\end{cases}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0000299999999998em;vertical-align:-1.25003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size4\">{</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">}</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:1em;\"></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.69em;\"><span style=\"top:-3.69em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord cjk_fallback\">汇</span><span class=\"mord cjk_fallback\">点</span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.008em;\"></span><span class=\"mord\"><span class=\"mord cjk_fallback\">否</span><span class=\"mord cjk_fallback\">则</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.19em;\"><span></span></span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></p>\n<img src=\"/post/TS/2.png\" class=\"\">\n<h3 id=\"活动的最早开始时间和最迟开始时间\"><a class=\"markdownIt-Anchor\" href=\"#活动的最早开始时间和最迟开始时间\"></a> 活动的最早开始时间和最迟开始时间</h3>\n<ul>\n<li>活动a的最早开始时间<code>e(a)</code>指该<strong>活动起点x事件</strong>的<strong>最早开始时间</strong>，即： <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>e</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">e(a)=ee(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>活动a的最迟开始时间<code>l(a)</code>指<strong>终点y事件</strong>的<strong>最迟开始时间</strong>与该活动<strong>所需时间之差</strong>，即：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>l</mi><mi>e</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">l(a)=le(y)-c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span></li>\n</ul>\n<h3 id=\"关键活动\"><a class=\"markdownIt-Anchor\" href=\"#关键活动\"></a> 关键活动</h3>\n<p>对于每个活动a，求出<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>l</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo><mo>−</mo><mi>e</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">d(a)=l(a)-e(a)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span></span></span></span>，若<code>d(a)</code>为0，则称活动a为关键活动。 对关键活动来说，<strong>不存在富余时间</strong>。</p>\n<h3 id=\"使用拓扑排序求关键路径\"><a class=\"markdownIt-Anchor\" href=\"#使用拓扑排序求关键路径\"></a> 使用拓扑排序求关键路径</h3>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></div><div class=\"code\"><pre class=\"shiki One Dark Pro\"><code><span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">Edge</span><span style=\"color: #ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> from, to, cost;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF; font-weight: bold\">Edge</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">u</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">w</span><span style=\"color: #ABB2BF\">): </span><span style=\"color: #61AFEF; font-weight: bold\">from</span><span style=\"color: #ABB2BF\">(u), </span><span style=\"color: #61AFEF; font-weight: bold\">to</span><span style=\"color: #ABB2BF\">(v), </span><span style=\"color: #61AFEF; font-weight: bold\">cost</span><span style=\"color: #ABB2BF\">(w) {}</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">vector</span><span style=\"color: #C678DD\">&lt;</span><span style=\"color: #ABB2BF\">Edge</span><span style=\"color: #C678DD\">&gt;</span><span style=\"color: #ABB2BF\"> edges;</span><span style=\"color: #7F848E\"> // 存储所有边</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">vector</span><span style=\"color: #C678DD\">&lt;int&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">G</span><span style=\"color: #ABB2BF\">[MAXN];</span><span style=\"color: #7F848E\"> // G[i] 存储顶点i发出的所有边</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">inDegree</span><span style=\"color: #ABB2BF\">[MAXN];</span><span style=\"color: #7F848E\"> // 存储每个顶点的入度</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">earliest</span><span style=\"color: #ABB2BF\">[MAXN];</span><span style=\"color: #7F848E\"> // 存储每个顶点的最早开始时间</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">latest</span><span style=\"color: #ABB2BF\">[MAXN];</span><span style=\"color: #7F848E\"> // 存储每个顶点的最晚开始时间</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">void</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF; font-weight: bold\">addEdge</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">u</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">v</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">w</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">edges</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">push_back</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #61AFEF; font-weight: bold\">Edge</span><span style=\"color: #ABB2BF\">(u, v, w));</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> m </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">edges</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">size</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">G</span><span style=\"color: #ABB2BF\">[u].</span><span style=\"color: #61AFEF; font-weight: bold\">push_back</span><span style=\"color: #ABB2BF\">(m </span><span style=\"color: #56B6C2\">-</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">inDegree</span><span style=\"color: #ABB2BF\">[v]</span><span style=\"color: #C678DD\">++</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">void</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF; font-weight: bold\">calcEarliestTime</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">n</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF; font-weight: bold\">memset</span><span style=\"color: #ABB2BF\">(earliest, </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #C678DD\">sizeof</span><span style=\"color: #ABB2BF\">(earliest));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    queue</span><span style=\"color: #C678DD\">&lt;int&gt;</span><span style=\"color: #ABB2BF\"> q;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> i </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">; i </span><span style=\"color: #C678DD\">&lt;</span><span style=\"color: #ABB2BF\"> n; i</span><span style=\"color: #C678DD\">++</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E5C07B\">inDegree</span><span style=\"color: #ABB2BF\">[i] </span><span style=\"color: #C678DD\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">push</span><span style=\"color: #ABB2BF\">(i);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">while</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #56B6C2\">!</span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">empty</span><span style=\"color: #ABB2BF\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> u </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">front</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">pop</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> i </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">; i </span><span style=\"color: #C678DD\">&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">G</span><span style=\"color: #ABB2BF\">[u].</span><span style=\"color: #61AFEF; font-weight: bold\">size</span><span style=\"color: #ABB2BF\">(); i</span><span style=\"color: #C678DD\">++</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            Edge</span><span style=\"color: #56B6C2\">&amp;</span><span style=\"color: #ABB2BF\"> e </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">edges</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E5C07B\">G</span><span style=\"color: #ABB2BF\">[u][i]];</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> v </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">e</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">to</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> w </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">e</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">cost</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #E5C07B\">earliest</span><span style=\"color: #ABB2BF\">[v] </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF; font-weight: bold\">max</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">earliest</span><span style=\"color: #ABB2BF\">[v], </span><span style=\"color: #E5C07B\">earliest</span><span style=\"color: #ABB2BF\">[u] </span><span style=\"color: #56B6C2\">+</span><span style=\"color: #ABB2BF\"> w);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #E5C07B\">inDegree</span><span style=\"color: #ABB2BF\">[v]</span><span style=\"color: #C678DD\">--</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E5C07B\">inDegree</span><span style=\"color: #ABB2BF\">[v] </span><span style=\"color: #C678DD\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">                </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">push</span><span style=\"color: #ABB2BF\">(v);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">void</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF; font-weight: bold\">calcLatestTime</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">n</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #61AFEF; font-weight: bold\">memset</span><span style=\"color: #ABB2BF\">(latest, INF, </span><span style=\"color: #C678DD\">sizeof</span><span style=\"color: #ABB2BF\">(latest));</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">latest</span><span style=\"color: #ABB2BF\">[n </span><span style=\"color: #56B6C2\">-</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">] </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">earliest</span><span style=\"color: #ABB2BF\">[n </span><span style=\"color: #56B6C2\">-</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    queue</span><span style=\"color: #C678DD\">&lt;int&gt;</span><span style=\"color: #ABB2BF\"> q;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">push</span><span style=\"color: #ABB2BF\">(n </span><span style=\"color: #56B6C2\">-</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">while</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #56B6C2\">!</span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">empty</span><span style=\"color: #ABB2BF\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> u </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">front</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">pop</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> i </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">; i </span><span style=\"color: #C678DD\">&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">G</span><span style=\"color: #ABB2BF\">[u].</span><span style=\"color: #61AFEF; font-weight: bold\">size</span><span style=\"color: #ABB2BF\">(); i</span><span style=\"color: #C678DD\">++</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            Edge</span><span style=\"color: #56B6C2\">&amp;</span><span style=\"color: #ABB2BF\"> e </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">edges</span><span style=\"color: #ABB2BF\">[</span><span style=\"color: #E5C07B\">G</span><span style=\"color: #ABB2BF\">[u][i]];</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> v </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">e</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">to</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> w </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">e</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">cost</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #E5C07B\">latest</span><span style=\"color: #ABB2BF\">[u] </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF; font-weight: bold\">min</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">latest</span><span style=\"color: #ABB2BF\">[u], </span><span style=\"color: #E5C07B\">latest</span><span style=\"color: #ABB2BF\">[v] </span><span style=\"color: #56B6C2\">-</span><span style=\"color: #ABB2BF\"> w);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">--</span><span style=\"color: #E5C07B\">inDegree</span><span style=\"color: #ABB2BF\">[v] </span><span style=\"color: #C678DD\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">                </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">push</span><span style=\"color: #ABB2BF\">(v);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">void</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF; font-weight: bold\">findCriticalPath</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75\">n</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> i </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">; i </span><span style=\"color: #C678DD\">&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">edges</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">size</span><span style=\"color: #ABB2BF\">(); i</span><span style=\"color: #C678DD\">++</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        Edge</span><span style=\"color: #56B6C2\">&amp;</span><span style=\"color: #ABB2BF\"> e </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">edges</span><span style=\"color: #ABB2BF\">[i];</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> u </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">e</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">from</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> v </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">e</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">to</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> w </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">e</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #E06C75\">cost</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> earliestU </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">earliest</span><span style=\"color: #ABB2BF\">[u];</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> latestV </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">latest</span><span style=\"color: #ABB2BF\">[v] </span><span style=\"color: #56B6C2\">-</span><span style=\"color: #ABB2BF\"> w;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (earliestU </span><span style=\"color: #C678DD\">==</span><span style=\"color: #ABB2BF\"> latestV) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">            cout </span><span style=\"color: #C678DD\">&lt;&lt;</span><span style=\"color: #ABB2BF\"> u </span><span style=\"color: #C678DD\">&lt;&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot; -&gt; &quot;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">&lt;&lt;</span><span style=\"color: #ABB2BF\"> v </span><span style=\"color: #C678DD\">&lt;&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot; : &quot;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">&lt;&lt;</span><span style=\"color: #ABB2BF\"> w </span><span style=\"color: #C678DD\">&lt;&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&quot;</span><span style=\"color: #56B6C2\">\\n</span><span style=\"color: #98C379\">&quot;</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div></div></figure>\n<h3 id=\"分析-2\"><a class=\"markdownIt-Anchor\" href=\"#分析-2\"></a> 分析</h3>\n<p>因为使用了拓扑排序，时间复杂度为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>V</mi><mo>+</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(V+E)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span></p>\n","text":" 拓扑排序 Topological Sort 拓扑序列 Topological Order 拓扑序列是一个有向无环图（Directed Acyclic Grap...","permalink":"/post/TS","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"data structure","slug":"data-structure","count":11,"path":"api/categories/data-structure.json"}],"tags":[{"name":"data structure","slug":"data-structure","count":13,"path":"api/tags/data-structure.json"},{"name":"coding","slug":"coding","count":19,"path":"api/tags/coding.json"},{"name":"algorithms","slug":"algorithms","count":8,"path":"api/tags/algorithms.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F-topological-sort\"><span class=\"toc-text\"> 拓扑排序 Topological Sort</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8B%93%E6%89%91%E5%BA%8F%E5%88%97-topological-order\"><span class=\"toc-text\"> 拓扑序列 Topological Order</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\"> 过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\"> 结果</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\"> 代码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8Ebfs%E7%9A%84%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\"> 基于BFS的拓扑排序</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8Edfs%E7%9A%84%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\"> 基于DFS的拓扑排序</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90\"><span class=\"toc-text\"> 分析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#aoe%E7%BD%91\"><span class=\"toc-text\"> AOE网</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\"> 定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E7%9A%84%E6%9C%80%E6%97%A9%E5%BC%80%E5%A7%8B%E5%92%8C%E6%9C%80%E8%BF%9F%E5%BC%80%E5%A7%8B%E6%97%B6%E9%97%B4\"><span class=\"toc-text\"> 事件的最早开始和最迟开始时间</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B4%BB%E5%8A%A8%E7%9A%84%E6%9C%80%E6%97%A9%E5%BC%80%E5%A7%8B%E6%97%B6%E9%97%B4%E5%92%8C%E6%9C%80%E8%BF%9F%E5%BC%80%E5%A7%8B%E6%97%B6%E9%97%B4\"><span class=\"toc-text\"> 活动的最早开始时间和最迟开始时间</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E6%B4%BB%E5%8A%A8\"><span class=\"toc-text\"> 关键活动</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F%E6%B1%82%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\"> 使用拓扑排序求关键路径</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%9E%90-2\"><span class=\"toc-text\"> 分析</span></a></li></ol></li></ol>","author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"二叉搜索树 Binary Search Tree","uid":"0a6a591ef679e7bf2b14c8c862c44648","slug":"BST","date":"2023-06-27T06:47:09.000Z","updated":"2024-03-17T05:29:20.053Z","comments":true,"path":"api/articles/BST.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/DS.png","text":" 二叉搜索树 Binary Search Tree 定义 二叉搜索树（二叉排序树或二叉查找树）： 或者是一棵空树； 或者是具有如下特性的二叉树 若它的左子树不空...","permalink":"/post/BST","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"data structure","slug":"data-structure","count":11,"path":"api/categories/data-structure.json"}],"tags":[{"name":"data structure","slug":"data-structure","count":13,"path":"api/tags/data-structure.json"},{"name":"coding","slug":"coding","count":19,"path":"api/tags/coding.json"},{"name":"algorithms","slug":"algorithms","count":8,"path":"api/tags/algorithms.json"}],"author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"最短路径 Shortest Path","uid":"ea135958f52dc15115556a781c9e36cf","slug":"SPT","date":"2023-06-24T02:56:20.000Z","updated":"2024-03-17T05:29:57.892Z","comments":true,"path":"api/articles/SPT.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/DS.png","text":" 最短路径 Shortest Path 加权有向图中每条路径都有值，其值是该路径上所有边的权值之和。最短路径 （Shortest Path）问题就是指求出两个给...","permalink":"/post/SPT","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"data structure","slug":"data-structure","count":11,"path":"api/categories/data-structure.json"}],"tags":[{"name":"data structure","slug":"data-structure","count":13,"path":"api/tags/data-structure.json"},{"name":"coding","slug":"coding","count":19,"path":"api/tags/coding.json"},{"name":"algorithms","slug":"algorithms","count":8,"path":"api/tags/algorithms.json"}],"author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}