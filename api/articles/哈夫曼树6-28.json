{"title":"哈夫曼树叶子结点的路径长度与权值的乘积之和","uid":"5a1621912b73a3abad1cd8da411425b8","slug":"哈夫曼树6-28","date":"2023-06-28T08:15:04.000Z","updated":"2024-03-17T05:28:55.230Z","comments":true,"path":"api/articles/哈夫曼树6-28.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/DS.png","content":"<h4 id=\"题目描述\"><a class=\"markdownIt-Anchor\" href=\"#题目描述\"></a> 题目描述</h4>\n<p>哈夫曼树，第一行输入一个数n，表示叶结点的个数。需要用这些叶结点生成哈夫曼树，根据哈夫曼树的概念，这些结点有权值，即weight，题目需要输出所有叶子结点的路径长度与权值的乘积之和。</p>\n<h4 id=\"输入\"><a class=\"markdownIt-Anchor\" href=\"#输入\"></a> 输入</h4>\n<p>输入有多组数据。<br />\n每组第一行输入一个数n，接着输入n个叶节点（叶节点权值不超过100，2&lt;=n&lt;=1000）。</p>\n<h4 id=\"输出\"><a class=\"markdownIt-Anchor\" href=\"#输出\"></a> 输出</h4>\n<p>输出权值。</p>\n<h4 id=\"样例输入\"><a class=\"markdownIt-Anchor\" href=\"#样例输入\"></a> 样例输入</h4>\n<figure class=\"shiki txt\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div><div class=\"code\"><pre class=\"shiki One Dark Pro\"><code><span class=\"line\"><span style=\"color: #abb2bf\">2</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">2 8 </span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">3</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">5 11 30</span></span></code></pre></div></div></figure>\n<h4 id=\"样例输出\"><a class=\"markdownIt-Anchor\" href=\"#样例输出\"></a> 样例输出</h4>\n<figure class=\"shiki txt\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div><div class=\"code\"><pre class=\"shiki One Dark Pro\"><code><span class=\"line\"><span style=\"color: #abb2bf\">10</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">62</span></span></code></pre></div></div></figure>\n<h4 id=\"题解\"><a class=\"markdownIt-Anchor\" href=\"#题解\"></a> 题解</h4>\n<figure class=\"shiki cpp\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></div><div class=\"code\"><pre class=\"shiki One Dark Pro\"><code><span class=\"line\"><span style=\"color: #C678DD\">#include</span><span style=\"color: #98C379\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">using</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">namespace</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">priority_queue</span><span style=\"color: #C678DD\">&lt;int</span><span style=\"color: #ABB2BF\">, vector</span><span style=\"color: #C678DD\">&lt;int&gt;</span><span style=\"color: #ABB2BF\">, greater</span><span style=\"color: #C678DD\">&lt;int&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">&gt;</span><span style=\"color: #ABB2BF\"> q;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF; font-weight: bold\">main</span><span style=\"color: #ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> n;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t</span><span style=\"color: #C678DD\">while</span><span style=\"color: #ABB2BF\"> (cin </span><span style=\"color: #C678DD\">&gt;&gt;</span><span style=\"color: #ABB2BF\"> n) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t\t</span><span style=\"color: #C678DD\">while</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #56B6C2\">!</span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">empty</span><span style=\"color: #ABB2BF\">()) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t\t\t</span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">pop</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t\t</span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> i </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">; i </span><span style=\"color: #C678DD\">&lt;</span><span style=\"color: #ABB2BF\"> n; </span><span style=\"color: #C678DD\">++</span><span style=\"color: #ABB2BF\">i) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t\t\t</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> x;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t\t\tcin </span><span style=\"color: #C678DD\">&gt;&gt;</span><span style=\"color: #ABB2BF\"> x;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t\t\t</span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">push</span><span style=\"color: #ABB2BF\">(x);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t\t</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> ans </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t\t</span><span style=\"color: #C678DD\">while</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">size</span><span style=\"color: #ABB2BF\">() </span><span style=\"color: #C678DD\">&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">) {</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t\t\t</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> a </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">top</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t\t\t</span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">pop</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t\t\t</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> b </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">top</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t\t\t</span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">pop</span><span style=\"color: #ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t\t\tans </span><span style=\"color: #C678DD\">+=</span><span style=\"color: #ABB2BF\"> a </span><span style=\"color: #56B6C2\">+</span><span style=\"color: #ABB2BF\"> b;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t\t\t</span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF; font-weight: bold\">push</span><span style=\"color: #ABB2BF\">(a </span><span style=\"color: #56B6C2\">+</span><span style=\"color: #ABB2BF\"> b);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t\t}</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t\tcout </span><span style=\"color: #C678DD\">&lt;&lt;</span><span style=\"color: #ABB2BF\"> ans </span><span style=\"color: #C678DD\">&lt;&lt;</span><span style=\"color: #ABB2BF\"> endl;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t}</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">\t</span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div></div></figure>\n","text":" 题目描述 哈夫曼树，第一行输入一个数n，表示叶结点的个数。需要用这些叶结点生成哈夫曼树，根据哈夫曼树的概念，这些结点有权值，即weight，题目需要输出所有叶...","permalink":"/post/哈夫曼树6-28","photos":[],"count_time":{"symbolsCount":749,"symbolsTime":"1 mins."},"categories":[{"name":"data structure","slug":"data-structure","count":11,"path":"api/categories/data-structure.json"}],"tags":[{"name":"data structure","slug":"data-structure","count":13,"path":"api/tags/data-structure.json"},{"name":"coding","slug":"coding","count":19,"path":"api/tags/coding.json"},{"name":"tree","slug":"tree","count":2,"path":"api/tags/tree.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\"> 题目描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5\"><span class=\"toc-text\"> 输入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA\"><span class=\"toc-text\"> 输出</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B%E8%BE%93%E5%85%A5\"><span class=\"toc-text\"> 样例输入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B%E8%BE%93%E5%87%BA\"><span class=\"toc-text\"> 样例输出</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3\"><span class=\"toc-text\"> 题解</span></a></li></ol>","author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"数据结构函数复习","uid":"4f12ac090a36ba71bea43af761b2b20a","slug":"数据结构函数复习","date":"2023-07-02T13:55:06.000Z","updated":"2024-03-17T09:35:26.516Z","comments":true,"path":"api/articles/数据结构函数复习.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/DS.png","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444...","permalink":"/post/数据结构函数复习","photos":[],"count_time":{"symbolsCount":"7.9k","symbolsTime":"7 mins."},"categories":[{"name":"data structure","slug":"data-structure","count":11,"path":"api/categories/data-structure.json"}],"tags":[{"name":"data structure","slug":"data-structure","count":13,"path":"api/tags/data-structure.json"},{"name":"coding","slug":"coding","count":19,"path":"api/tags/coding.json"},{"name":"algorithms","slug":"algorithms","count":8,"path":"api/tags/algorithms.json"}],"author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"二叉搜索树 Binary Search Tree","uid":"0a6a591ef679e7bf2b14c8c862c44648","slug":"BST","date":"2023-06-27T06:47:09.000Z","updated":"2024-03-17T05:29:20.053Z","comments":true,"path":"api/articles/BST.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/DS.png","text":" 二叉搜索树 Binary Search Tree 定义 二叉搜索树（二叉排序树或二叉查找树）： 或者是一棵空树； 或者是具有如下特性的二叉树 若它的左子树不空...","permalink":"/post/BST","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"data structure","slug":"data-structure","count":11,"path":"api/categories/data-structure.json"}],"tags":[{"name":"data structure","slug":"data-structure","count":13,"path":"api/tags/data-structure.json"},{"name":"coding","slug":"coding","count":19,"path":"api/tags/coding.json"},{"name":"algorithms","slug":"algorithms","count":8,"path":"api/tags/algorithms.json"}],"author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}