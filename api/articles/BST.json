{"title":"二叉搜索树 Binary Search Tree","uid":"0a6a591ef679e7bf2b14c8c862c44648","slug":"BST","date":"2023-06-27T06:47:09.000Z","updated":"2024-03-17T05:29:20.053Z","comments":true,"path":"api/articles/BST.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/DS.png","content":"<h2 id=\"二叉搜索树-Binary-Search-Tree\"><a href=\"#二叉搜索树-Binary-Search-Tree\" class=\"headerlink\" title=\"二叉搜索树 Binary Search Tree\"></a>二叉搜索树 Binary Search Tree</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>二叉搜索树（二叉排序树或二叉查找树）：</p>\n<ul>\n<li>或者是一棵空树；</li>\n<li>或者是具有如下特性的二叉树<ol>\n<li>若它的<strong>左子树不空</strong>，则左子树上所有节点<br>的值均<strong>小于根节点</strong>的值；</li>\n<li>若它的<strong>右子树不空</strong>，则右子树上所有节点<br>的值均<strong>大于等于根节点</strong>的值；</li>\n<li>它的左、右子树也都分别是二叉搜索树。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"主要操作\"><a href=\"#主要操作\" class=\"headerlink\" title=\"主要操作\"></a>主要操作</h3><h4 id=\"查找某个数值\"><a href=\"#查找某个数值\" class=\"headerlink\" title=\"查找某个数值\"></a>查找某个数值</h4><p>若二叉搜索树为空，则查找不成功；否则：</p>\n<ol>\n<li>若给定值<strong>等于</strong>根节点的关键字，则查找成功；</li>\n<li>若给定值<strong>小于</strong>根节点的关键字，则继续在<strong>左</strong>子树上进行搜索；</li>\n<li>若给定值<strong>大于</strong>根节点的关键字，则继续在<strong>右</strong>子树上进行搜索。</li>\n</ol>\n<h4 id=\"插入某个数值\"><a href=\"#插入某个数值\" class=\"headerlink\" title=\"插入某个数值\"></a>插入某个数值</h4><p>插入操作在查找不成功时才进行；</p>\n<p>若二叉搜索树为<strong>空树</strong>，则新插入的节点为<strong>根节点</strong>；否则，新插入的节点必为一个<strong>叶子节点</strong>，其插入位置由<strong>查找过程得到</strong>。</p>\n<h4 id=\"删除某个数值\"><a href=\"#删除某个数值\" class=\"headerlink\" title=\"删除某个数值\"></a>删除某个数值</h4><p>删除一个节点后，仍是二叉排序树。可分三种情况讨论：</p>\n<ol>\n<li><p>被删除的节点是叶子：其双亲节点中相应指针域的值改为空</p>\n <img src=\"/post/BST/image-20230627150524180.png\" class=\"\">\n</li>\n<li><p>被删除的节点只有左子树或者只有右子树：可以用结点p的左（右）子树替代结点p的子树，也就是直接用其左（右）孩子替代它（结点替代）。</p>\n <img src=\"/post/BST/image-20230627150701546.png\" class=\"\">\n\n <img src=\"/post/BST/image-20230627150853262.png\" class=\"\">\n</li>\n<li><p>被删除的节点既有左子树，也有右子树：用左孩子的子孙里最大的节点取代被删除节点（间接删除）。</p>\n  <img src=\"/post/BST/image-20230627151028143.png\" class=\"\"></li>\n</ol>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">node</span><span style=\"color: #ABB2BF\"> &#123; </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> val;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    node </span><span style=\"color: #56B6C2\">*</span><span style=\"color: #ABB2BF\">lch, </span><span style=\"color: #56B6C2\">*</span><span style=\"color: #ABB2BF\">rch;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">&#125;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">bool</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">find</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">node</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">*</span><span style=\"color: #E06C75; font-style: italic\">p</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75; font-style: italic\">x</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (p </span><span style=\"color: #C678DD\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">NULL</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">false</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (x </span><span style=\"color: #C678DD\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">val</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">true</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (x </span><span style=\"color: #C678DD\">&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">val</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">find</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">lch</span><span style=\"color: #ABB2BF\">, x);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">find</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">rch</span><span style=\"color: #ABB2BF\">, x);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E5C07B\">node</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">*</span><span style=\"color: #61AFEF\">insert</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">node</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">*</span><span style=\"color: #E06C75; font-style: italic\">p</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75; font-style: italic\">x</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (p </span><span style=\"color: #C678DD\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">NULL</span><span style=\"color: #ABB2BF\">) &#123; </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        node </span><span style=\"color: #56B6C2\">*</span><span style=\"color: #ABB2BF\">q </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">new</span><span style=\"color: #ABB2BF\"> node;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">val</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> x;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">lch</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">rch</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">NULL</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> q; </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\"> &#123; </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (x </span><span style=\"color: #C678DD\">&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">val</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">lch</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">insert</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">lch</span><span style=\"color: #ABB2BF\">, x);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">rch</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">insert</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">rch</span><span style=\"color: #ABB2BF\">, x);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> p; </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">&#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E5C07B\">node</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">*</span><span style=\"color: #61AFEF\">remove</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">node</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">*</span><span style=\"color: #E06C75; font-style: italic\">p</span><span style=\"color: #ABB2BF\">, </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E06C75; font-style: italic\">x</span><span style=\"color: #ABB2BF\">) &#123; </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (p </span><span style=\"color: #C678DD\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">NULL</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">NULL</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (x </span><span style=\"color: #C678DD\">&lt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">val</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">lch</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">remove</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">lch</span><span style=\"color: #ABB2BF\">, x);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (x </span><span style=\"color: #C678DD\">&gt;</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">val</span><span style=\"color: #ABB2BF\">) </span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">rch</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">remove</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">rch</span><span style=\"color: #ABB2BF\">, x);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">lch</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">NULL</span><span style=\"color: #ABB2BF\">) &#123;</span><span style=\"color: #7F848E; font-style: italic\"> //第一种情况</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        node </span><span style=\"color: #56B6C2\">*</span><span style=\"color: #ABB2BF\">q </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">rch</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">delete</span><span style=\"color: #ABB2BF\"> p; </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> q; </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">if</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E5C07B\">lch</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">rch</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">==</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">NULL</span><span style=\"color: #ABB2BF\">) &#123;</span><span style=\"color: #7F848E; font-style: italic\">//第二种情况</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        node </span><span style=\"color: #56B6C2\">*</span><span style=\"color: #ABB2BF\">q </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">lch</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">rch</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">rch</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">delete</span><span style=\"color: #ABB2BF\"> p; </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> q; </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">else</span><span style=\"color: #ABB2BF\"> &#123;</span><span style=\"color: #7F848E; font-style: italic\"> //第三种情况 </span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        node </span><span style=\"color: #56B6C2\">*</span><span style=\"color: #ABB2BF\">q;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> (q </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">lch</span><span style=\"color: #ABB2BF\">; </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E5C07B\">rch</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">rch</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">!=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">NULL</span><span style=\"color: #ABB2BF\">; q </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">rch</span><span style=\"color: #ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        node </span><span style=\"color: #56B6C2\">*</span><span style=\"color: #ABB2BF\">r </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">rch</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">q</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">rch</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">r</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">lch</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">r</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">lch</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">lch</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">r</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">rch</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">p</span><span style=\"color: #ABB2BF\">-&gt;</span><span style=\"color: #E06C75\">rch</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">delete</span><span style=\"color: #ABB2BF\"> p;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> r;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> p;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">&#125;</span></span>\n<span class=\"line\"></span></code></pre></div><h3 id=\"二叉排序树的查找性能\"><a href=\"#二叉排序树的查找性能\" class=\"headerlink\" title=\"二叉排序树的查找性能\"></a>二叉排序树的查找性能</h3><ul>\n<li><p>给定含n个关键字的集合，假设所有关键字不相同，对应有n!个关键字序列，每个关键字序列构造一棵二叉排序树，所有这些二叉排序树中查找每个关键字的平均时间为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">2</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>。</p>\n</li>\n<li><p>给定含n个关键字的关键字序列构造一棵二叉排序树。其中查找性能最好的是高度最小的二叉排序树，最好查找性能为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">2</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>。查找性能最坏的是高度为n的二叉排序树（单支树），最坏查找性能为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>。平均情况由具体的关键字序列来确定。所以常说二叉排序树的时间复杂度在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(log2n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathdefault\">o</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord\">2</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>之间，就是指这种分析方法。</p>\n</li>\n<li><p><strong>查找序列</strong>（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>k</mi><mn>1</mn></msub><mtext>，</mtext><msub><mi>k</mi><mn>2</mn></msub><mtext>，</mtext><mo>…</mo><mtext>，</mtext><msub><mi>k</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">k_1，k_2，…，k_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">，</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord cjk_fallback\">，</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>）的查找树画法是，每一层只有一个结点，首先<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>k</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">k_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>为根结点，再依次画出其他结点，若<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>k</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>&lt;</mo><msub><mi>k</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">k_{i+1}&lt;k_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.902771em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，则<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>k</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">k_{i+1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.902771em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span></span></span></span>的结点作为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>k</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">k_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>结点的左孩子，否则作为右孩子。</p>\n</li>\n</ul>\n","text":"二叉搜索树 Binary Search Tree定义二叉搜索树（二叉排序树或二叉查找树）： 或者是一棵空树； 或者是具有如下特性的二叉树 若它的左子树不空，则左...","permalink":"/post/BST","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"data structure","slug":"data-structure","count":11,"path":"api/categories/data-structure.json"}],"tags":[{"name":"data structure","slug":"data-structure","count":13,"path":"api/tags/data-structure.json"},{"name":"coding","slug":"coding","count":19,"path":"api/tags/coding.json"},{"name":"algorithms","slug":"algorithms","count":8,"path":"api/tags/algorithms.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91-Binary-Search-Tree\"><span class=\"toc-text\">二叉搜索树 Binary Search Tree</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E8%A6%81%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">主要操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE%E6%9F%90%E4%B8%AA%E6%95%B0%E5%80%BC\"><span class=\"toc-text\">查找某个数值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E6%9F%90%E4%B8%AA%E6%95%B0%E5%80%BC\"><span class=\"toc-text\">插入某个数值</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E6%9F%90%E4%B8%AA%E6%95%B0%E5%80%BC\"><span class=\"toc-text\">删除某个数值</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">代码实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%E7%9A%84%E6%9F%A5%E6%89%BE%E6%80%A7%E8%83%BD\"><span class=\"toc-text\">二叉排序树的查找性能</span></a></li></ol></li></ol>","author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"哈夫曼树叶子结点的路径长度与权值的乘积之和","uid":"5a1621912b73a3abad1cd8da411425b8","slug":"哈夫曼树6-28","date":"2023-06-28T08:15:04.000Z","updated":"2024-03-17T05:28:55.230Z","comments":true,"path":"api/articles/哈夫曼树6-28.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/DS.png","text":"题目描述哈夫曼树，第一行输入一个数n，表示叶结点的个数。需要用这些叶结点生成哈夫曼树，根据哈夫曼树的概念，这些结点有权值，即weight，题目需要输出所有叶子结...","permalink":"/post/哈夫曼树6-28","photos":[],"count_time":{"symbolsCount":904,"symbolsTime":"1 mins."},"categories":[{"name":"data structure","slug":"data-structure","count":11,"path":"api/categories/data-structure.json"}],"tags":[{"name":"data structure","slug":"data-structure","count":13,"path":"api/tags/data-structure.json"},{"name":"coding","slug":"coding","count":19,"path":"api/tags/coding.json"},{"name":"tree","slug":"tree","count":2,"path":"api/tags/tree.json"}],"author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"拓扑排序 Topological Sort","uid":"92091d0d673d2f304a54eaf158ea4630","slug":"TS","date":"2023-06-25T06:31:20.000Z","updated":"2024-03-17T05:30:05.842Z","comments":true,"path":"api/articles/TS.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/DS.png","text":"拓扑排序 Topological Sort拓扑序列 Topological Order拓扑序列是一个有向无环图（Directed Acyclic Graph，简...","permalink":"/post/TS","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"data structure","slug":"data-structure","count":11,"path":"api/categories/data-structure.json"}],"tags":[{"name":"data structure","slug":"data-structure","count":13,"path":"api/tags/data-structure.json"},{"name":"coding","slug":"coding","count":19,"path":"api/tags/coding.json"},{"name":"algorithms","slug":"algorithms","count":8,"path":"api/tags/algorithms.json"}],"author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}