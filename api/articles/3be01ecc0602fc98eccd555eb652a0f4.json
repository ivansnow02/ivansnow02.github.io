{"title":"机器人王国里的路径长度","uid":"3be01ecc0602fc98eccd555eb652a0f4","slug":"3be01ecc0602fc98eccd555eb652a0f4","date":"2023-06-20T13:09:12.000Z","updated":"2024-03-17T05:29:53.051Z","comments":true,"path":"api/articles/3be01ecc0602fc98eccd555eb652a0f4.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/DS.png","content":"<h4 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h4><p>在一个机器人王国里，围绕首都分N层构建卫星城市。以首都为圆心，以路相连分出两个卫星城在第一个层，然后每个卫星城又有路相连分出两个卫星城在下一层，但每条路的长度不同。第N层的卫星城不再分出新的卫星城。现在人类只探知到所有直接相连的城市间的路程，你能计算某个卫星城到达首都的路程吗？</p>\n<h4 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h4><p>第一行为N，表示机器人王国里有N层卫星城，N最大为10。从第二行开始，共<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mrow><mi>N</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2^{N+1}-2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.924661em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.10903em;\">N</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>行，每行分别是城市的代号到其分出的卫星城的代号和它们间的路程。 代号用若干个字母表示，直连路程最大为100。最后一行是某卫星城的代号。</p>\n<h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><p>根据最后一行的卫星城代号，求该卫星城到首都的路程。</p>\n<h4 id=\"样例输入\"><a href=\"#样例输入\" class=\"headerlink\" title=\"样例输入\"></a>样例输入</h4><div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #abb2bf\">2</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">A F 20</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">B D 100</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">G A 5</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">G B 10</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">A C 6</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">B E 30</span></span>\n<span class=\"line\"><span style=\"color: #abb2bf\">D</span></span></code></pre></div><h4 id=\"样例输出\"><a href=\"#样例输出\" class=\"headerlink\" title=\"样例输出\"></a>样例输出</h4><div class=\"language-txt\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">txt</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #abb2bf\">110</span></span></code></pre></div><h4 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h4><div class=\"language-cpp\"><button title=\"Copy code\" class=\"copy\"></button><span class=\"lang\">cpp</span><pre class=\"shiki one-dark-pro\" style=\"background-color: #1a1a1a\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #C678DD\">#include</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&lt;iostream&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">#include</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&lt;unordered_map&gt;</span></span>\n<span class=\"line\"><span style=\"color: #C678DD\">#include</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #98C379\">&lt;string&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">using</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">namespace</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">std</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">struct</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">City</span><span style=\"color: #ABB2BF\"> &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    string parent;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> distance;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">&#125;;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #61AFEF\">main</span><span style=\"color: #ABB2BF\">() &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> N;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    cin </span><span style=\"color: #C678DD\">&gt;&gt;</span><span style=\"color: #ABB2BF\"> N;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> num_cities </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #C678DD\">&lt;&lt;</span><span style=\"color: #ABB2BF\"> (N </span><span style=\"color: #56B6C2\">+</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">1</span><span style=\"color: #ABB2BF\">)) </span><span style=\"color: #56B6C2\">-</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">2</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    unordered_map</span><span style=\"color: #C678DD\">&lt;</span><span style=\"color: #ABB2BF\">string, City</span><span style=\"color: #C678DD\">&gt;</span><span style=\"color: #ABB2BF\"> cities;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">for</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> i </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">; i </span><span style=\"color: #C678DD\">&lt;</span><span style=\"color: #ABB2BF\"> num_cities; i</span><span style=\"color: #C678DD\">++</span><span style=\"color: #ABB2BF\">) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        string from, to;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> distance;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        cin </span><span style=\"color: #C678DD\">&gt;&gt;</span><span style=\"color: #ABB2BF\"> from </span><span style=\"color: #C678DD\">&gt;&gt;</span><span style=\"color: #ABB2BF\"> to </span><span style=\"color: #C678DD\">&gt;&gt;</span><span style=\"color: #ABB2BF\"> distance;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        </span><span style=\"color: #E5C07B\">cities</span><span style=\"color: #ABB2BF\">[to] </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> &#123;from, distance&#125;;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    string target;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    cin </span><span style=\"color: #C678DD\">&gt;&gt;</span><span style=\"color: #ABB2BF\"> target;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">int</span><span style=\"color: #ABB2BF\"> total_distance </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #7F848E; font-style: italic\">    //反向追踪它的父键值，并累加它们的距离值，直到找不到目标键值为止</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">while</span><span style=\"color: #ABB2BF\"> (</span><span style=\"color: #E5C07B\">cities</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">find</span><span style=\"color: #ABB2BF\">(target) </span><span style=\"color: #C678DD\">!=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">cities</span><span style=\"color: #ABB2BF\">.</span><span style=\"color: #61AFEF\">end</span><span style=\"color: #ABB2BF\">()) &#123;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        total_distance </span><span style=\"color: #C678DD\">+=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">cities</span><span style=\"color: #ABB2BF\">[target].</span><span style=\"color: #E06C75\">distance</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">        target </span><span style=\"color: #C678DD\">=</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #E5C07B\">cities</span><span style=\"color: #ABB2BF\">[target].</span><span style=\"color: #E06C75\">parent</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    &#125;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    cout </span><span style=\"color: #C678DD\">&lt;&lt;</span><span style=\"color: #ABB2BF\"> total_distance </span><span style=\"color: #C678DD\">&lt;&lt;</span><span style=\"color: #ABB2BF\"> endl;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">    </span><span style=\"color: #C678DD\">return</span><span style=\"color: #ABB2BF\"> </span><span style=\"color: #D19A66\">0</span><span style=\"color: #ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">&#125;</span></span></code></pre></div>","text":"题目描述在一个机器人王国里，围绕首都分N层构建卫星城市。以首都为圆心，以路相连分出两个卫星城在第一个层，然后每个卫星城又有路相连分出两个卫星城在下一层，但每条路...","permalink":"/post/3be01ecc0602fc98eccd555eb652a0f4","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"data structure","slug":"data-structure","count":11,"path":"api/categories/data-structure.json"}],"tags":[{"name":"data structure","slug":"data-structure","count":13,"path":"api/tags/data-structure.json"},{"name":"coding","slug":"coding","count":19,"path":"api/tags/coding.json"},{"name":"tree","slug":"tree","count":2,"path":"api/tags/tree.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">输入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">输出</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">样例输入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A0%B7%E4%BE%8B%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">样例输出</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3\"><span class=\"toc-text\">题解</span></a></li></ol>","author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"最小生成树 Minimum Spanning Tree","uid":"3bb7227ed966054de259b7b7501c2568","slug":"3bb7227ed966054de259b7b7501c2568","date":"2023-06-23T08:05:39.000Z","updated":"2024-03-17T05:29:47.010Z","comments":true,"path":"api/articles/3bb7227ed966054de259b7b7501c2568.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/DS.png","text":"最小生成树 Minimum Spanning Tree加权无向图的最小生成树（Minimum Spanning Tree，简称MST）是一棵生成树，其权（所有边...","permalink":"/post/3bb7227ed966054de259b7b7501c2568","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"data structure","slug":"data-structure","count":11,"path":"api/categories/data-structure.json"}],"tags":[{"name":"data structure","slug":"data-structure","count":13,"path":"api/tags/data-structure.json"},{"name":"coding","slug":"coding","count":19,"path":"api/tags/coding.json"},{"name":"algorithms","slug":"algorithms","count":8,"path":"api/tags/algorithms.json"}],"author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"The Power of Robert Capa's The Falling Soldier","uid":"76e09a24f065289061dc76386548c213","slug":"76e09a24f065289061dc76386548c213","date":"2023-06-10T12:43:08.000Z","updated":"2024-03-17T05:24:32.128Z","comments":true,"path":"api/articles/76e09a24f065289061dc76386548c213.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/the_falling_soldier.jpg","text":"Today, I would like to talk about one of the most famous and controversial war p...","permalink":"/post/76e09a24f065289061dc76386548c213","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"English","slug":"English","count":4,"path":"api/categories/English.json"}],"tags":[{"name":"English","slug":"English","count":4,"path":"api/tags/English.json"}],"author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}