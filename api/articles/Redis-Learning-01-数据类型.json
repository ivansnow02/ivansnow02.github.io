{"title":"Redis的数据类型","uid":"4b4f7cdf0dd2548c372a61ce48da36cd","slug":"Redis-Learning-01-数据类型","date":"2023-04-24T02:31:49.000Z","updated":"2024-03-17T05:24:57.445Z","comments":true,"path":"api/articles/Redis-Learning-01-数据类型.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/redis.jpg","content":"<p>Redis 支持五种数据类型：</p>\n<ul>\n<li>string</li>\n<li>hash</li>\n<li>list</li>\n<li>set</li>\n<li>zset</li>\n</ul>\n<h2 id=\"string\"><a class=\"markdownIt-Anchor\" href=\"#string\"></a> String</h2>\n<p>string 是最基本的类型。string 二进制安全，即可以包含任何数据。</p>\n<p>string 一个键最大能存储512MB。</p>\n<p>string 类型的数据结构存储方式有三种<code>int</code>、<code>raw</code>、<code>embstr</code>：</p>\n<h3 id=\"int\"><a class=\"markdownIt-Anchor\" href=\"#int\"></a> int</h3>\n<p>Redis 中规定假如存储的是<strong>整数型值</strong>，比如<code>set num 123</code>这样的类型，就会使用<code>int</code>的存储方式进行存储，在<code>redisObject</code>的<code>ptr属性</code>中就会保存该值。</p>\n<img src=\"/post/Redis-Learning-01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/int-1682306725947-10.png\" class=\"\" title=\"int\">\n<h3 id=\"sds\"><a class=\"markdownIt-Anchor\" href=\"#sds\"></a> SDS</h3>\n<p>假如存储的<strong>字符串是一个字符串值并且长度大于32个字节</strong>就会使用 SDS（simple dynamic string）方式进行存储，并且<code>encoding</code>设置为<code>raw</code>；若是<strong>字符串长度小于等于32个字节</strong>就会将<code>encoding</code>改为<code>embstr</code>来保存字符串。</p>\n<p>SDS称为<strong>简单动态字符串</strong>，对于SDS中的定义在Redis的源码中有的三个属性<code>int len</code>、<code>int free</code>、<code>char buf[]</code>。</p>\n<p><code>len</code>保存了字符串的长度，<code>free</code>表示<code>buf数组</code>中未使用的字节数量，<code>buf数组</code>则是保存字符串的每一个字符元素。</p>\n<p>因此当你在Redis中存储一个字符串<code>&quot;Hello_World&quot;</code>时，SDS 的形式的<code>redisObject</code>结构图如下图所示：</p>\n<img src=\"/post/Redis-Learning-01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/SDS.png\" class=\"\" title=\"SDS\">\n<h2 id=\"hash\"><a class=\"markdownIt-Anchor\" href=\"#hash\"></a> Hash</h2>\n<p>Redis hash 是一个<strong>键值(key=&gt;value)对集合</strong>。</p>\n<p>Redis hash 是一个 string 类型的 field 和 value 的<strong>映射表</strong>，hash 特别适合用于存储对象。</p>\n<p>每个 hash 可以存储 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{32} -1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 键值对。</p>\n<p>Hash对象的实现方式有两种分别是<code>ziplist</code>、<code>hashtable</code>，其中<code>hashtable</code>的存储方式<code>key</code>是 String 类型的，<code>value</code>也是以<code>key value</code>的形式进行存储。</p>\n<h3 id=\"ziplist\"><a class=\"markdownIt-Anchor\" href=\"#ziplist\"></a> ziplist</h3>\n<p>压缩列表（ziplist）是<strong>一组连续内存块组成的顺序的数据结构</strong>，压缩列表能够节省空间，压缩列表中使用多个节点来存储数据。</p>\n<p>压缩列表是列表键和哈希键底层实现的原理之一，<strong>压缩列表并不是以某种压缩算法进行压缩存储数据，而是它表示一组连续的内存空间的使用，节省空间</strong>，压缩列表的内存结构图如下：</p>\n<img src=\"/post/Redis-Learning-01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/ziplist.png\" class=\"\" title=\"ziplist\">\n<p>其中：</p>\n<ol>\n<li><code>zlbytes</code>：4个字节的大小，记录压缩列表占用内存的字节数。</li>\n<li><code>zltail</code>：4个字节大小，记录表尾节点距离起始地址的偏移量，用于快速定位到尾节点的地址。</li>\n<li><code>zllen</code>：2个字节的大小，记录压缩列表中的节点数。</li>\n<li><code>entry</code>：表示列表中的每一个节点。</li>\n<li><code>zlend</code>：表示压缩列表的特殊结束符号<code>'0xFF'</code></li>\n</ol>\n<p>每一个<code>entry</code>节点又有三部分组成，分别是<code>previous_entry_length</code>、<code>encoding</code>、<code>content</code>。</p>\n<ol>\n<li><code>previous_entry_length</code>表示前一个节点<code>entry</code>的长度，可用于计算前一个节点的其实地址，因为他们的地址是连续的。</li>\n<li><code>encoding</code>：这里保存的是<code>content</code>的内容类型和长度。</li>\n<li><code>content</code>：<code>content</code>保存的是每一个节点的内容。</li>\n</ol>\n<img src=\"/post/Redis-Learning-01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/entry.png\" class=\"\" title=\"entry\">\n<h3 id=\"hashtable\"><a class=\"markdownIt-Anchor\" href=\"#hashtable\"></a> hashtable</h3>\n<p>hashtable 是<strong>一种字典类型的数据结构</strong>，用于存储键值对，其中键是字符串类型，值可以是字符串、列表、集合或有序集合。hashtable 的<strong>底层实现是一个数组，每个数组元素是一个链表，用于解决哈希冲突</strong>。当 hashtable 中的键值对数量变化时，会进行扩展或收缩操作，重新分配数组的大小和哈希值。hashtable 是哈希键和集合键的底层实现之一，当这些键的元素数量和长度较大时，Redis 会使用 hashtable 作为其存储方式。</p>\n<h2 id=\"list\"><a class=\"markdownIt-Anchor\" href=\"#list\"></a> List</h2>\n<p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部或者尾部。</p>\n<p>列表最多可存储 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{32} - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> 元素。</p>\n<p>Redis中的列表在3.2之前的版本是使用<code>ziplist</code>和<code>linkedlist</code>进行实现的。在3.2之后的版本就是引入了<code>quicklist</code>。</p>\n<h3 id=\"linkedlist\"><a class=\"markdownIt-Anchor\" href=\"#linkedlist\"></a> linkedlist</h3>\n<p>linkedlist 是一个双向链表，他和普通的链表一样都是由指向前后节点的指针。插入、修改、更新的时间复杂度是 O(1)，查询的时间复杂度是 O(n)。其特性为</p>\n<ol>\n<li>每一个节点都有指向前一个节点和后一个节点的指针。</li>\n<li>头节点和尾节点的<code>prev</code>和<code>next</code>指针指向为<code>null</code>，所以链表是无环的。</li>\n<li>链表有自己长度的信息，获取长度的时间复杂度为 O(1)。</li>\n</ol>\n<img src=\"/post/Redis-Learning-01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/linkedlist.png\" class=\"\" title=\"linkedlist\">\n<h3 id=\"quicklist\"><a class=\"markdownIt-Anchor\" href=\"#quicklist\"></a> quicklist</h3>\n<p>quicklist 实际上是 zipList 和 linkedList 的混合体，它将 linkedList 按段切分，每一段使用 zipList 来紧凑存储，多个 zipList 之间使用双向指针串接起来。</p>\n<ol>\n<li><code>prev</code>、<code>next</code>指向该节点的前后节点。</li>\n<li><code>zl</code>指向该节点对应的 ziplist 结构。</li>\n<li><code>sz</code>代表整个 ziplist 结构的大小。</li>\n<li><code>encoding</code>代表采用的编码方式：<code>1</code>代表是原生的，<code>2</code>代表使用<code>LZF</code>进行压缩。</li>\n<li><code>container</code>为 quickListNode 节点<code>zl</code>指向的容器类型：<code>1</code>代表<code>none</code>，<code>2</code>代表使用<code>ziplist</code>存储数据。</li>\n<li><code>recompress</code>代表这个节点之前是否是压缩节点，若是，则在使用压缩节点前先进行解压缩，使用后需要重新压缩，此外为<code>1</code>，代表是压缩节点。</li>\n<li><code>attempted_compress</code>测试时使用。</li>\n<li><code>extra</code>为预留。</li>\n</ol>\n<img src=\"/post/Redis-Learning-01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/quicklist.png\" class=\"\" title=\"quicklist\">\n<h2 id=\"set\"><a class=\"markdownIt-Anchor\" href=\"#set\"></a> Set</h2>\n<p>Redis 的 Set 是 string 类型的无序集合。</p>\n<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p>\n<p>集合中最大的成员数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{32} - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>。</p>\n<p>Redis 中列表和集合都可以用来存储字符串，但是 <strong>Set 是不可重复的集合，而 List 列表可以存储相同的字符串</strong>。</p>\n<p>Set 的底层实现是<code>hashtable</code>和<code>intset</code>。</p>\n<h3 id=\"intset\"><a class=\"markdownIt-Anchor\" href=\"#intset\"></a> intset</h3>\n<p>inset 也叫做<strong>整数集合</strong>，用于保存整数值的数据结构类型，它可以保存<code>int16_t</code>、<code>int32_t</code> 或者<code>int64_t</code> 的整数值。</p>\n<p>在整数集合中，有三个属性值<code>encoding、length、contents[]</code>，分别表示编码方式、整数集合的长度、以及元素内容，<code>length</code>就是记录<code>contents</code>里面的大小。</p>\n<p>在整数集合新增元素的时候，若是超出了原集合的长度大小，就会对集合进行升级，具体的升级过程如下：</p>\n<ol>\n<li>首先扩展底层数组的大小，并且数组的类型为新元素的类型。</li>\n<li>然后将原来的数组中的元素转为新元素的类型，并放到扩展后数组对应的位置。</li>\n<li>整数集合升级后就不会再降级，编码会一直保持升级后的状态。</li>\n</ol>\n<img src=\"/post/Redis-Learning-01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/intset.png\" class=\"\" title=\"intset\">\n<h2 id=\"zset\"><a class=\"markdownIt-Anchor\" href=\"#zset\"></a> Zset</h2>\n<p>Redis zset 和 set 一样也是 string 类型元素的集合,且不允许重复的成员。</p>\n<p>不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。</p>\n<p>zset 的成员是唯一的,但分数（score）却可以重复。</p>\n<p>zset 的底层实现是<code>ziplist</code>和<code>skiplist</code>。</p>\n<h3 id=\"skipset\"><a class=\"markdownIt-Anchor\" href=\"#skipset\"></a> skipset</h3>\n<p>skiplist 也叫做<strong>跳跃表</strong>，跳跃表是一种有序的数据结构，它通过每一个节点维持多个指向其它节点的指针，从而达到快速访问的目的。</p>\n<p>skiplist 由如下几个特点：</p>\n<ol>\n<li>有很多层组成，由上到下节点数逐渐密集，最上层的节点最稀疏，跨度也最大。</li>\n<li>每一层都是一个有序链表，只扫包含两个节点，头节点和尾节点。</li>\n<li>每一层的每一个每一个节点都含有指向同一层下一个节点和下一层同一个位置节点的指针。</li>\n<li>如果一个节点在某一层出现，那么该以下的所有链表同一个位置都会出现该节点。</li>\n</ol>\n<img src=\"/post/Redis-Learning-01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/skiplist.png\" class=\"\" title=\"skiplist\">\n","text":"Redis 支持五种数据类型： string hash list set zset String string 是最基本的类型。string 二进制安全，即可以...","permalink":"/post/Redis-Learning-01-数据类型","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"Redis","slug":"Redis","count":4,"path":"api/categories/Redis.json"}],"tags":[{"name":"coding","slug":"coding","count":19,"path":"api/tags/coding.json"},{"name":"Redis","slug":"Redis","count":4,"path":"api/tags/Redis.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#string\"><span class=\"toc-text\"> String</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#int\"><span class=\"toc-text\"> int</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sds\"><span class=\"toc-text\"> SDS</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#hash\"><span class=\"toc-text\"> Hash</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ziplist\"><span class=\"toc-text\"> ziplist</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hashtable\"><span class=\"toc-text\"> hashtable</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#list\"><span class=\"toc-text\"> List</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#linkedlist\"><span class=\"toc-text\"> linkedlist</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#quicklist\"><span class=\"toc-text\"> quicklist</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#set\"><span class=\"toc-text\"> Set</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#intset\"><span class=\"toc-text\"> intset</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#zset\"><span class=\"toc-text\"> Zset</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#skipset\"><span class=\"toc-text\"> skipset</span></a></li></ol></li></ol>","author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"离散数学复习","uid":"6690aa0e5bbdd795f0a15fde119a77e1","slug":"离散数学","date":"2023-04-24T12:11:05.000Z","updated":"2024-03-17T09:30:31.116Z","comments":true,"path":"api/articles/离散数学.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/maths.jpg","text":" 集合论 集合的基本概念 集合的定义 具有某种特定性质事物的全体，通常，用大写的英文字母A,B,C,……A, B, C,……A,B,C,……表示集合 集合的元素...","permalink":"/post/离散数学","photos":[],"count_time":{"symbolsCount":"42k","symbolsTime":"38 mins."},"categories":[{"name":"Math","slug":"Math","count":2,"path":"api/categories/Math.json"}],"tags":[{"name":"learning","slug":"learning","count":8,"path":"api/tags/learning.json"},{"name":"Math","slug":"Math","count":2,"path":"api/tags/Math.json"},{"name":"Discrete Mathematics","slug":"Discrete-Mathematics","count":1,"path":"api/tags/Discrete-Mathematics.json"}],"author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"VIM的学习","uid":"3b7fce38e480c65a2ce7cfa0852550a0","slug":"VIM的学习","date":"2023-04-17T13:44:17.000Z","updated":"2024-03-17T05:24:20.879Z","comments":true,"path":"api/articles/VIM的学习.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/vim.png","text":" Vim的哲学 在编程时，您大部分时间都花在阅读/编辑上，而不是写作上。因此，Vim 是一个模态编辑器：它有不同的插入文本和操作文本的模式。Vim 是可编程的（...","permalink":"/post/VIM的学习","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"coding","slug":"coding","count":1,"path":"api/categories/coding.json"}],"tags":[{"name":"coding","slug":"coding","count":19,"path":"api/tags/coding.json"},{"name":"vim","slug":"vim","count":1,"path":"api/tags/vim.json"}],"author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}