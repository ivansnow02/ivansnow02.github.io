{"title":"操作系统复习","uid":"2ed5c397762475d4e4b4f7ab2d780b9f","slug":"ComputerSystem","date":"2024-03-07T04:51:59.000Z","updated":"2024-03-16T09:37:55.909Z","comments":true,"path":"api/articles/ComputerSystem.json","keywords":"Code, Learning, Backend, Frontend","cover":[],"content":"<h2 id=\"概论\"><a class=\"markdownIt-Anchor\" href=\"#概论\"></a> 概论</h2>\n<h3 id=\"操作系统的定义和功能\"><a class=\"markdownIt-Anchor\" href=\"#操作系统的定义和功能\"></a> 操作系统的定义和功能</h3>\n<h4 id=\"操作系统的定义\"><a class=\"markdownIt-Anchor\" href=\"#操作系统的定义\"></a> 操作系统的定义</h4>\n<ul>\n<li>一组计算机程序的集合，主要用以控制和管理 计算机的硬件和软件资源，合理地组织计算机的工作流程，向应用程序和用户提供方便、快捷、友好的使用接口</li>\n</ul>\n<h4 id=\"操作系统的功能\"><a class=\"markdownIt-Anchor\" href=\"#操作系统的功能\"></a> 操作系统的功能</h4>\n<ul>\n<li>进程管理</li>\n<li>存储管理</li>\n<li>文件管理</li>\n<li>设备管理</li>\n</ul>\n<h4 id=\"操作系统的特征\"><a class=\"markdownIt-Anchor\" href=\"#操作系统的特征\"></a> 操作系统的特征</h4>\n<ul>\n<li>并发</li>\n<li>共享</li>\n<li>虚拟</li>\n<li>异步</li>\n</ul>\n<h3 id=\"操作系统的发展\"><a class=\"markdownIt-Anchor\" href=\"#操作系统的发展\"></a> 操作系统的发展</h3>\n<ol>\n<li>手工操作时代</li>\n<li>早期单道批处理系统时代</li>\n<li>多道批处理系统时代</li>\n</ol>\n<h3 id=\"操作系统的分类\"><a class=\"markdownIt-Anchor\" href=\"#操作系统的分类\"></a> 操作系统的分类</h3>\n<h4 id=\"批处理操作系统\"><a class=\"markdownIt-Anchor\" href=\"#批处理操作系统\"></a> 批处理操作系统</h4>\n<ul>\n<li>主要特征\n<ul>\n<li>用户脱机工作</li>\n<li>成批处理作业</li>\n<li>单/多道程序运行</li>\n<li>作业周转时间长</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"分时操作系统\"><a class=\"markdownIt-Anchor\" href=\"#分时操作系统\"></a> 分时操作系统</h4>\n<ul>\n<li>主要特征：\n<ul>\n<li><strong>同时性</strong>。允许各终端用户同时工作，系统分时响应用户请求（使用CPU并不同时）</li>\n<li><strong>交互性</strong>。支持联机的操作方式，用户可以在终端上通过操作系统进行人-机对话，随时控制和调试程序，以交互的方式工作</li>\n<li><strong>独立性</strong>。用户之间彼此独立的工作，好象独占一台计算机系统一样，互不干扰</li>\n<li><strong>及时性</strong>。用户请求能在较短的时间内得到响应</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"实时操作系统\"><a class=\"markdownIt-Anchor\" href=\"#实时操作系统\"></a> 实时操作系统</h4>\n<ul>\n<li>系统能及时响应外部事件的请求，在规定的时间内完成对该事件的处理，并控制所有实时任务协调一致地运行</li>\n</ul>\n<h4 id=\"个人计算机操作系统\"><a class=\"markdownIt-Anchor\" href=\"#个人计算机操作系统\"></a> 个人计算机操作系统</h4>\n<ul>\n<li>主要特点：\n<ul>\n<li>图形用户接口</li>\n<li>开放性</li>\n<li>多媒体支持</li>\n<li>应用软件丰富</li>\n<li>操作系统管理性能高</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"网络操作系统\"><a class=\"markdownIt-Anchor\" href=\"#网络操作系统\"></a> 网络操作系统</h4>\n<ul>\n<li>除具备通常操作系统功能外，还具备联网功能，支持网络体系结构和各种网络通信协议，提供网络互连能力，支持可靠、有效、安全的数据传输</li>\n<li>主要采用客户机/服务器(C/S)工作方式\n<ul>\n<li>客户机一般由微型计算机承担，主动从本地向服务器提出服务请求</li>\n<li>服务器接收客户机请求、处理请求的服务、返回服务结果。一般由高档微机、小、中、大型机承担</li>\n</ul>\n</li>\n<li>对等模式：网络中的每台计算机同时具有客户端和服务器两种功能</li>\n</ul>\n<h4 id=\"分布式操作系统\"><a class=\"markdownIt-Anchor\" href=\"#分布式操作系统\"></a> 分布式操作系统</h4>\n<ul>\n<li>特点：\n<ul>\n<li>计算机网络系统的高级形式，由多台计算机组成，计算机之间没有主次之分</li>\n<li>数据和控制及任务的分布性、整体性、资源共享的透明性、各节点的自制性和协同性</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"嵌入式操作系统\"><a class=\"markdownIt-Anchor\" href=\"#嵌入式操作系统\"></a> 嵌入式操作系统</h4>\n<ul>\n<li>\n<p>指运行在嵌入式(计算机)环境中，对整个系统各种部件和资源进行统一协调、处理、指挥和控制的系统软件。它具有通常操作系统的基本功能</p>\n</li>\n<li>\n<p>与一般操作系统有很大不同，主要体现在微型化、可定制、实时性、可靠性、易移植、开发工具与使用环境密切相关等特点</p>\n</li>\n</ul>\n<h3 id=\"操作系统的接口\"><a class=\"markdownIt-Anchor\" href=\"#操作系统的接口\"></a> 操作系统的接口</h3>\n<h4 id=\"程序接口\"><a class=\"markdownIt-Anchor\" href=\"#程序接口\"></a> 程序接口</h4>\n<ul>\n<li>系统调用：“系统调用”可以获得操作系统的底层服务，从而进一步使用或访问系统管理的各种软硬件资源。不同的操作系统提供的系统调用的种类、数量和名字不尽相同</li>\n<li>API（application programming interface）\n<ul>\n<li>常用的Windows系统，微软公司只公布了相关的API，它是一种应用程序编程接口，是在操作系统系统调用的基础经过规范整理出来，面向社会公布的唯一的接口方式</li>\n<li>由于不是直接的系统调用，其效率有所损失。微软公司没有发布全部的API，也为开发程序带来了一定的难度</li>\n</ul>\n</li>\n<li>系统调用 &amp; POSIX标准\n<ul>\n<li>系统调用内部的具体实现与硬件相关，直接使用会产生问题：\n<ul>\n<li>接口复杂，使用困难</li>\n<li>应用程序的跨平台可移植性受到很大限制</li>\n</ul>\n</li>\n<li>POSIX标准：专门规定内核的系统调用接口标准，操作系统若遵循此标准，则应用程序在不同操作系统之间就具有可移植性\n<ul>\n<li>Unix/Linux遵循此标准</li>\n<li>Windows NT-based 系统不能直接支持新版POSIX接口</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>系统调用的处理过程\n<ol>\n<li>应用程序使用系统调用时会产生一条指令（陷入指令或访管指令），该指令中存放了对应系统调用的功能号，有时还附带传递给内核的参数：<code>系统调用—功能号—入口地址表—入口地址</code></li>\n<li>处理机在执行到该访管指令时发出相应的中断信号给“陷阱处理机制”</li>\n<li>陷阱处理机制启动相关的内核函数完成该系统调用所要求的功能：保护CPU现场、获取功能号、根据功能号查找对应内核函数入口地址表、转到入口地址执行内核函数、内核函数执行完，中断处理结束</li>\n<li>恢复CPU现场，继续执行中断点的下一条指令</li>\n</ol>\n</li>\n<li>注意：执行系统调用时，应用程序从用户态（目态）转到了核心态（管态），即执行内核函数时必须在核心态下运行，但访管指令本身是在用户态下执行的</li>\n</ul>\n<h4 id=\"操作接口\"><a class=\"markdownIt-Anchor\" href=\"#操作接口\"></a> 操作接口</h4>\n<ul>\n<li>命令界面（CLI，Command Line Interface ）\n<ul>\n<li>简单命令的一般形式：命令 参数1 参数2 … 参数n</li>\n<li>Windows操作系统的基本命令：type、erase、attrib、copy、xcopy、dir、cd、md、rd、tree、ver等</li>\n</ul>\n</li>\n<li>图形界面（ GUI，Graphics User Interface ）</li>\n<li>作业控制命令\n<ul>\n<li>专为批处理作业的用户提供的，所以也称批处理用户接口。操作系统提供一个作业控制语言JCL（Job Control Language），它由一组作业控制语句、作业控制操作命令及相应语法规范组成</li>\n<li>用户利用作业控制语言书写批处理作业控制说明书，操作系统解释作业控制说明书，按其要求一步步地运行用户作业。\n<ul>\n<li>DOS下的批处理命令是一种简单的作业控制语言（.bat）</li>\n<li>UNIX的Shell语言是现代计算机一种功能强大的作业控制语言</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"操作系统的设计实现方法\"><a class=\"markdownIt-Anchor\" href=\"#操作系统的设计实现方法\"></a> 操作系统的设计实现方法</h3>\n<h4 id=\"操作系统设计与开发\"><a class=\"markdownIt-Anchor\" href=\"#操作系统设计与开发\"></a> 操作系统设计与开发</h4>\n<ul>\n<li>操作系统设计与开发特点\n<ul>\n<li>与硬件关联</li>\n<li>复杂程度高</li>\n<li>生产周期长</li>\n</ul>\n</li>\n<li>操作系统的设计原则\n<ul>\n<li>可靠性</li>\n<li>方便性</li>\n<li>高效率</li>\n<li>易维护性</li>\n<li>可扩充性</li>\n<li>开放性</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"操作系统的体系结构\"><a class=\"markdownIt-Anchor\" href=\"#操作系统的体系结构\"></a> 操作系统的体系结构</h4>\n<ul>\n<li>无结构操作系统</li>\n<li>模块化结构</li>\n<li>分层结构</li>\n<li>客户/服务器结构（微内核）</li>\n<li>虚拟机结构</li>\n<li>面向对象结构</li>\n</ul>\n<h2 id=\"进程管理\"><a class=\"markdownIt-Anchor\" href=\"#进程管理\"></a> 进程管理</h2>\n<h3 id=\"程序的执行方式\"><a class=\"markdownIt-Anchor\" href=\"#程序的执行方式\"></a> 程序的执行方式</h3>\n<h4 id=\"程序的顺序执行\"><a class=\"markdownIt-Anchor\" href=\"#程序的顺序执行\"></a> 程序的顺序执行</h4>\n<ul>\n<li>一个具有独立功能的程序独占处理器直至最终结束的过程称为程序的顺序执行\n<ul>\n<li>程序设计中的顺序控制结构仅能控制程序内部指令的执行序列</li>\n<li>程序的顺序执行意味着运行时程序间的执行序列也是顺序的——一个程序执行完了，才能执行另一个程序</li>\n</ul>\n</li>\n<li>顺序执行的特性：\n<ul>\n<li>顺序性</li>\n<li>封闭性</li>\n<li>可再现性</li>\n<li>程序的顺序执行方式便于程序的编制与调试，但不利于充分利用计算机系统资源，运行效率低下</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"程序的并发执行与并行执行\"><a class=\"markdownIt-Anchor\" href=\"#程序的并发执行与并行执行\"></a> 程序的并发执行与并行执行</h4>\n<ul>\n<li>为了提高系统的运行效率，允许“同时”执行多个程序</li>\n<li>并行（parallel）：多个事件在同一时刻发生</li>\n<li>并发（concurrent）：多个事件在同一时期内发生</li>\n<li>显然，<strong>并行是并发的特例</strong>，程序并行执行的硬件前提是系统中有多个CPU</li>\n<li>并发的<strong>本质</strong>是一个CPU在多个程序运行过程中的<strong>时分复用</strong></li>\n<li>并发执行的特性：\n<ul>\n<li>间断性</li>\n<li>开放/交互性</li>\n<li>不可再现性</li>\n<li>进行并发程序设计时应当避免由于程序间开放交互引起的不可再现性而产生运行时错误</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"进程概念的引入\"><a class=\"markdownIt-Anchor\" href=\"#进程概念的引入\"></a> 进程概念的引入</h4>\n<ul>\n<li>程序（program）：静态的代码文件（*.exe）</li>\n<li>进程（process）：程序在某个数据集合上的一次执行，系统资源分配的基本单位</li>\n<li>作业（job）：批处理系统要装入系统运行处理的一系列程序步骤和数据</li>\n</ul>\n<h3 id=\"进程的特征与控制\"><a class=\"markdownIt-Anchor\" href=\"#进程的特征与控制\"></a> 进程的特征与控制</h3>\n<h4 id=\"进程的相关概念\"><a class=\"markdownIt-Anchor\" href=\"#进程的相关概念\"></a> 进程的相关概念</h4>\n<ul>\n<li>\n<p>进程有以下特征</p>\n<ul>\n<li>结构性</li>\n<li>动态性</li>\n<li>独立性</li>\n<li>并发性</li>\n</ul>\n</li>\n<li>\n<p>进程分类：系统进程、用户进程</p>\n</li>\n<li>\n<p>进程上下文（process context）</p>\n<ul>\n<li>用户级上下文（user-level context）：进程的代码区、数据区、用户栈区和共享存储区</li>\n<li>系统级上下文（system-level context）：PCB、内存管理信息、进程环境块、系统栈</li>\n<li>寄存器上下文（register context）</li>\n<li>一个进程被系统调度而占有CPU时，会发生CPU在新老进程之间切换，切换的内容是进程上下文，进程运行是在进程的上下文中执行的</li>\n<li>一个典型的上下文切换过程</li>\n</ul>\n<figure class=\"shiki c\"><div class='codeblock'><div class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></div><div class=\"code\"><pre class=\"shiki One Dark Pro\"><code><span class=\"line\"><span style=\"color: #61AFEF; font-weight: bold\">context_switch</span><span style=\"color: #ABB2BF\">(</span><span style=\"color: #E06C75\"> </span><span style=\"color: #ABB2BF\">){</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">   Push registers onto stack</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">   Save ptrs to code and data.</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">   Save stack pointer</span><span style=\"color: #7F848E\"> //以上语句保护当前进程上下文</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">   Pick next process to execute</span><span style=\"color: #7F848E\"> //选中/调度新进程</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">  </span><span style=\"color: #7F848E\">//以下语句恢复所选中/调度的进程的上下文</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">   Restore stack ptr of that process</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">   Restore ptrs to code and data.</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">   Pop registers</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">   Return</span></span>\n<span class=\"line\"><span style=\"color: #ABB2BF\">}</span></span></code></pre></div></div></figure>\n</li>\n</ul>\n<h4 id=\"进程状态及转换\"><a class=\"markdownIt-Anchor\" href=\"#进程状态及转换\"></a> 进程状态及转换</h4>\n<ul>\n<li>进程的状态\n<ul>\n<li>就绪状态（ready）：进程在内存中已经具备执行的条件，等待分配CPU</li>\n<li>运行状态（running）：进程占用CPU并正在执行</li>\n<li>阻塞状态（blocked）：也称为等待（waiting）状态——运行的进程由于发生某事件而放弃CPU</li>\n<li><img src=\"1.png\" alt=\"三状态模型\" /></li>\n<li><img src=\"2.png\" alt=\"五状态模型\" /></li>\n<li><img src=\"3.png\" alt=\"七状态模型\" /></li>\n</ul>\n</li>\n<li>有挂起功能的进程状态：\n<ul>\n<li>挂起就绪（ready suspended）</li>\n<li>挂起阻塞（blocked suspended）</li>\n<li>进程在运行态也可以被挂起，转换为挂起就绪状态</li>\n<li>阻塞状态的进程被挂起后，若阻塞事件或I/O请求完成，则进程状态转换为挂起就绪状态——仍然是挂起状态</li>\n<li>创建进程时若没有足够的内存空间，则转入挂起就绪状态</li>\n<li>只有处于就绪态的进程才有可能被调度分配CPU运行</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"进程控制块pcb\"><a class=\"markdownIt-Anchor\" href=\"#进程控制块pcb\"></a> 进程控制块PCB</h4>\n","feature":true,"text":" 概论 操作系统的定义和功能 操作系统的定义 一组计算机程序的集合，主要用以控制和管理 计算机的硬件和软件资源，合理地组织计算机的工作流程，向应用程序和用户提供...","permalink":"/post/ComputerSystem","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"computer science","slug":"computer-science","count":2,"path":"api/categories/computer-science.json"}],"tags":[{"name":"computer science","slug":"computer-science","count":2,"path":"api/tags/computer-science.json"},{"name":"learning","slug":"learning","count":8,"path":"api/tags/learning.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%AE%BA\"><span class=\"toc-text\"> 概论</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\"> 操作系统的定义和功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\"> 操作系统的定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\"> 操作系统的功能</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E5%BE%81\"><span class=\"toc-text\"> 操作系统的特征</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%91%E5%B1%95\"><span class=\"toc-text\"> 操作系统的发展</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%88%86%E7%B1%BB\"><span class=\"toc-text\"> 操作系统的分类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%B9%E5%A4%84%E7%90%86%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\"> 批处理操作系统</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%86%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\"> 分时操作系统</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%97%B6%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\"> 实时操作系统</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%AA%E4%BA%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\"> 个人计算机操作系统</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%BB%9C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\"> 网络操作系统</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%B8%83%E5%BC%8F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\"> 分布式操作系统</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B5%8C%E5%85%A5%E5%BC%8F%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\"> 嵌入式操作系统</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\"> 操作系统的接口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\"> 程序接口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\"> 操作接口</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95\"><span class=\"toc-text\"> 操作系统的设计实现方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91\"><span class=\"toc-text\"> 操作系统设计与开发</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84\"><span class=\"toc-text\"> 操作系统的体系结构</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86\"><span class=\"toc-text\"> 进程管理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%89%A7%E8%A1%8C%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\"> 程序的执行方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\"> 程序的顺序执行</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%B9%B6%E5%8F%91%E6%89%A7%E8%A1%8C%E4%B8%8E%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\"> 程序的并发执行与并行执行</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E6%A6%82%E5%BF%B5%E7%9A%84%E5%BC%95%E5%85%A5\"><span class=\"toc-text\"> 进程概念的引入</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%89%B9%E5%BE%81%E4%B8%8E%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\"> 进程的特征与控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\"> 进程的相关概念</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E5%8F%8A%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\"> 进程状态及转换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%9D%97pcb\"><span class=\"toc-text\"> 进程控制块PCB</span></a></li></ol></li></ol></li></ol>","author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"计算机组成原理复习","uid":"9eabaac45732ecdc3be940d0aaa9e3ce","slug":"computer-organization","date":"2023-12-20T08:32:28.000Z","updated":"2024-03-17T09:30:11.989Z","comments":true,"path":"api/articles/computer-organization.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/cpu.jpg","text":" 计算机系统概论 计算机的性能指标 吞吐量：表征一台计算机在某一时间间隔内能够处理的信息量。 响应时间：表征从输入有效到系统产生响应之间的时间度量，例如微秒、纳...","permalink":"/post/computer-organization","photos":[],"count_time":{"symbolsCount":"35k","symbolsTime":"32 mins."},"categories":[{"name":"computer science","slug":"computer-science","count":2,"path":"api/categories/computer-science.json"}],"tags":[{"name":"computer science","slug":"computer-science","count":2,"path":"api/tags/computer-science.json"},{"name":"learning","slug":"learning","count":8,"path":"api/tags/learning.json"}],"author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}