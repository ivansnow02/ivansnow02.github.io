{"title":"VIM的学习","uid":"3b7fce38e480c65a2ce7cfa0852550a0","slug":"VIM的学习","date":"2023-04-17T13:44:17.000Z","updated":"2024-03-18T09:08:21.334Z","comments":true,"path":"api/articles/VIM的学习.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/vim.png","content":"<p><img src=\"/VIM%E7%9A%84%E5%AD%A6%E4%B9%A0/vim%E9%94%AE%E4%BD%8D.gif\" alt=\"vim键位\" /></p>\n<h2 id=\"vim的哲学\"><a class=\"markdownIt-Anchor\" href=\"#vim的哲学\"></a> Vim的哲学</h2>\n<p>在编程时，您大部分时间都花在阅读/编辑上，而不是写作上。因此，Vim 是一个模态编辑器：它有不同的插入文本和操作文本的模式。Vim 是可编程的（使用 Vimscript 以及 Python 等其他语言），并且 Vim 的界面本身就是一种编程语言：击键（具有助记名称）是命令，并且这些命令是可组合的。Vim 避免使用鼠标，因为它太慢了；Vim 甚至避免使用箭头键，因为它需要太多的移动。</p>\n<p>最终结果是一个可以匹配您思考速度的编辑器。</p>\n<h2 id=\"模态编辑\"><a class=\"markdownIt-Anchor\" href=\"#模态编辑\"></a> 模态编辑</h2>\n<p>Vim有多种运行模式</p>\n<p><img src=\"/VIM%E7%9A%84%E5%AD%A6%E4%B9%A0/vim%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F.png\" alt=\"vim运行模式\" /></p>\n<ul>\n<li><code>Normal</code> 用于在文件中移动并进行编辑</li>\n<li><code>Insert</code> 用于插入文本，按 <code>i</code> 键</li>\n<li><code>Replace</code> 用于替换文本，按 <code>R</code> 键</li>\n<li><code>Visual</code> 用于选择文本块，可视模式为 <code>v</code> 键，可视行模式为<code>V</code> 键，可视块模式为<code>&lt;C-v&gt;</code> 键</li>\n<li><code>Command-line</code> 用于运行命令，按 <code>:</code> 键</li>\n</ul>\n<p>击键在不同的操作模式下具有不同的含义。例如，字母 <code>x</code> 在插入模式下只会插入一个文字字符 ‘x’ ，但在普通模式下，它会删除光标下的字符，而在可视模式下，它会删除选择的字符。</p>\n<h2 id=\"缓冲区选项卡和窗口\"><a class=\"markdownIt-Anchor\" href=\"#缓冲区选项卡和窗口\"></a> 缓冲区，选项卡和窗口</h2>\n<p>Vim 维护一组打开的文件，称为&quot;缓冲区&quot;。一个 Vim 会话有许多选项卡，每个选项卡都有许多窗口( 拆分窗格) 。每个窗口显示一个缓冲区。与您熟悉的其他程序( 如网络浏览器) 不同，缓冲区和窗口之间不存在一对一的对应关系，窗户只是视图。一个给定的缓冲区可以在多个窗口中打开，甚至在同一个选项卡中。这非常方便，例如，同时查看文件的两个不同部分。</p>\n<p>默认情况下，Vim 打开一个选项卡，其中包含一个窗口。</p>\n<h2 id=\"底线命令模式\"><a class=\"markdownIt-Anchor\" href=\"#底线命令模式\"></a> 底线命令模式</h2>\n<p>命令模式可以通过在普通模式下输入<code>:</code>来进入。按下<code>:</code>后，光标会跳到屏幕底部的命令行，你可以在那里输入不同的命令。这种模式有很多功能，包括：</p>\n<ul>\n<li><code>:q</code> 退出（关闭窗口）</li>\n<li><code>:w</code> 保存（“写入”）</li>\n<li><code>:wq</code> 保存并退出</li>\n<li><code>:e</code> {文件名} 打开文件进行编辑</li>\n<li><code>:ls</code> 显示打开的缓冲区</li>\n<li><code>:help</code> {主题} 打开帮助</li>\n<li><code>:help :w</code> 打开:w命令的帮助</li>\n<li><code>:help w</code> 打开w移动的帮助</li>\n</ul>\n<p>例如，如果你想打开一个名为<code>test.txt</code>的文件，你可以在命令模式下输入<code>:e test.txt</code>，然后按回车键。如果你想保存当前文件，你可以输入<code>:w</code>，然后按回车键。如果你想查看Vim的基本用法，你可以输入<code>:help</code>，然后按回车键。</p>\n<h2 id=\"移动\"><a class=\"markdownIt-Anchor\" href=\"#移动\"></a> 移动</h2>\n<ul>\n<li><code>h</code> 或 向左箭头键 <code>←</code> 光标向左移动一个字符</li>\n<li><code>j</code> 或 向下箭头键 <code>↓</code> 光标向下移动一个字符</li>\n<li><code>k</code> 或 向上箭头键 <code>↑</code> 光标向上移动一个字符</li>\n<li><code>l</code> 或 向右箭头键 <code>→</code> 光标向右移动一个字符</li>\n<li><code>Ctrl + f</code> 屏幕向下移动<strong>一页</strong>，相当于 <code>Page Down</code> 按键 (<strong>常用</strong>)</li>\n<li><code>Ctrl + b</code> 屏幕向上移动一页，相当于 <code>Page Up</code> 按键 (<strong>常用</strong>)</li>\n<li><code>Ctrl + d</code> 屏幕向下移动<strong>半页</strong></li>\n<li><code>Ctrl + u</code> 屏幕向上移动<strong>半页</strong></li>\n<li><code>+</code> 光标移动到<strong>非空格符</strong>的下一行</li>\n<li><code>-</code> 光标移动到<strong>非空格符</strong>的上一行</li>\n<li><code>n&lt;space&gt;</code> 那个 <code>n</code> 表示数字，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 <code>20&lt;space&gt;</code> 则光标会向后面移动 20 个字符距离。</li>\n<li><code>0</code> 或功能键<code>Home</code> 移动到这一行的<strong>最前面</strong>字符处 (<strong>常用</strong>)</li>\n<li><code>$</code> 或功能键<code>End</code> 移动到这一行的<strong>最后面</strong>字符处(<strong>常用</strong>)</li>\n<li><code>H</code> 光标移动到这个屏幕的<strong>最上方</strong>那一行的第一个字符</li>\n<li><code>M</code> 光标移动到这个屏幕的<strong>中央</strong>那一行的第一个字符</li>\n<li><code>L</code> 光标移动到这个屏幕的<strong>最下方</strong>那一行的第一个字符</li>\n<li><code>G</code> 移动到这个档案的最后一行(<strong>常用</strong>)</li>\n<li><code>nG</code> <code>n</code> 为数字。移动到这个档案的第 n 行。例如 <code>20G</code> 则会移动到这个档案的第 20 行(可配合 :<code>set nu</code>)</li>\n<li><code>gg</code> 移动到这个档案的第一行，相当于 <code>1G</code>  (<strong>常用</strong>)</li>\n<li><code>n&lt;Enter&gt;</code> <code>n</code> 为数字。光标向下移动 n 行(<strong>常用</strong>)</li>\n</ul>\n<h2 id=\"搜索替换\"><a class=\"markdownIt-Anchor\" href=\"#搜索替换\"></a> 搜索替换</h2>\n<ul>\n<li><code>/word</code>  向光标之下寻找一个名称为 <code>word</code> 的字符串。例如要在档案内搜寻 <code>vbird</code> 这个字符串，就输入 <code>/vbird</code> 即可！ (<strong>常用</strong>)</li>\n<li><code>?word</code> 向光标之上寻找一个字符串名称为 <code>word</code> 的字符串。</li>\n<li><code>n</code> 这个 <code>n</code> 是英文按键。代表<strong>重复</strong>前一个搜寻的动作。举例来说， 如果刚刚我们执行 <code>/vbird</code> 去向下搜寻 <code>vbird</code> 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 <code>vbird</code> 的字符串。如果是执行 <code>?vbird</code> 的话，那么按下 n 则会向上继续搜寻名称为 <code>vbird</code> 的字符串！</li>\n<li><code>N</code> 这个 <code>N</code> 是英文按键。与 <code>n</code> 刚好相反，为<strong>反向</strong>进行前一个搜寻动作。 例如 <code>/vbird</code> 后，按下 <code>N</code> 则表示<strong>向上</strong>搜寻 <code>vbird</code> 。</li>\n</ul>\n<h2 id=\"删除-复制与粘贴\"><a class=\"markdownIt-Anchor\" href=\"#删除-复制与粘贴\"></a> 删除、复制与粘贴</h2>\n<ul>\n<li><code>x</code>, <code>X</code> 在一行字当中，<code>x</code> 为向后删除一个字符 (相当于 <code>del</code> 按键)， <code>X</code> 为向前删除一个字符(相当于 <code>backspace</code> 亦即是退格键) (<strong>常用</strong>)</li>\n<li><code>nx</code> <code>n</code> 为数字，连续向后删除 n 个字符。</li>\n<li><code>dd</code> 剪切游标所在的那一整行(<strong>常用</strong>)，用 <code>p</code>/<code>P</code> 可以粘贴。</li>\n<li><code>ndd</code> <code>n</code> 为数字。剪切光标所在的向下 n 行，例如 <code>20dd</code> 则是剪切 20 行(<strong>常用</strong>)，用 <code>p</code>/<code>P</code> 可以粘贴。</li>\n<li><code>d1G</code> 删除光标所在到第一行的所有数据</li>\n<li><code>dG</code> 删除光标所在到最后一行的所有数据</li>\n<li><code>d$</code> 删除游标所在处，到该行的最后一个字符</li>\n<li><code>d0</code> 那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</li>\n<li><code>yy</code> 复制游标所在的那一行(<strong>常用</strong>)</li>\n<li><code>nyy</code> <code>n</code> 为数字。复制光标所在的向下 n 行，例如 <code>20yy</code> 则是复制 20 行(<strong>常用</strong>)</li>\n<li><code>y1G</code> 复制游标所在行到第一行的所有数据</li>\n<li><code>yG</code> 复制游标所在行到最后一行的所有数据</li>\n<li><code>y0</code> 复制光标所在的那个字符到该行行首的所有数据</li>\n<li><code>y$</code> 复制光标所在的那个字符到该行行尾的所有数据</li>\n<li><code>p</code>, <code>P</code> <code>p</code> 为将已复制的数据在光标下一行贴上，<code>P</code> 则为贴在游标上一行！  (<strong>常用</strong>)</li>\n<li><code>J</code> 将光标所在行与下一行的数据结合成同一行</li>\n<li><code>c</code> 重复删除多个数据，例如 <code>10cj</code> 表示向下删除 10 行</li>\n<li><code>u</code> 复原前一个动作。(<strong>常用</strong>)</li>\n<li><code>Ctrl + r</code> 重做上一个动作。(<strong>常用</strong>)</li>\n</ul>\n<h2 id=\"补充\"><a class=\"markdownIt-Anchor\" href=\"#补充\"></a> 补充</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">进入输入或取代的编辑模式</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">i, I</td>\n<td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">a, A</td>\n<td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">o, O</td>\n<td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">r, R</td>\n<td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[Esc]</td>\n<td>退出编辑模式，回到一般模式中(常用)</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">指令行的储存、离开等指令</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">:w</td>\n<td>将编辑的数据写入硬盘档案中(常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:w!</td>\n<td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:q</td>\n<td>离开 vi (常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:q!</td>\n<td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td>\n<td></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:wq</td>\n<td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZZ</td>\n<td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ZQ</td>\n<td>不保存，强制退出。效果等同于 <strong>:q!</strong>。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:w [filename]</td>\n<td>将编辑的数据储存成另一个档案（类似另存新档）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:r [filename]</td>\n<td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:n1,n2 w [filename]</td>\n<td>将 n1 到 n2 的内容储存成 filename 这个档案。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:! command</td>\n<td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">vim 环境的变更</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">:set nu</td>\n<td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:set nonu</td>\n<td>与 set nu 相反，为取消行号！</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考资料\"><a class=\"markdownIt-Anchor\" href=\"#参考资料\"></a> 参考资料</h2>\n<p><a href=\"https://missing.csail.mit.edu/2020/editors/\">Editors (Vim) · Missing Semester (mit.edu)</a></p>\n<p><a href=\"https://www.runoob.com/linux/linux-vim.html\">Linux vi/vim | 菜鸟教程 (runoob.com)</a></p>\n","text":" Vim的哲学 在编程时，您大部分时间都花在阅读/编辑上，而不是写作上。因此，Vim 是一个模态编辑器：它有不同的插入文本和操作文本的模式。Vim 是可编程的（...","permalink":"/post/VIM的学习","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"coding","slug":"coding","count":1,"path":"api/categories/coding.json"}],"tags":[{"name":"coding","slug":"coding","count":19,"path":"api/tags/coding.json"},{"name":"vim","slug":"vim","count":1,"path":"api/tags/vim.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#vim%E7%9A%84%E5%93%B2%E5%AD%A6\"><span class=\"toc-text\"> Vim的哲学</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%80%81%E7%BC%96%E8%BE%91\"><span class=\"toc-text\"> 模态编辑</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%93%E5%86%B2%E5%8C%BA%E9%80%89%E9%A1%B9%E5%8D%A1%E5%92%8C%E7%AA%97%E5%8F%A3\"><span class=\"toc-text\"> 缓冲区，选项卡和窗口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%95%E7%BA%BF%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 底线命令模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A7%BB%E5%8A%A8\"><span class=\"toc-text\"> 移动</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%90%9C%E7%B4%A2%E6%9B%BF%E6%8D%A2\"><span class=\"toc-text\"> 搜索替换</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4-%E5%A4%8D%E5%88%B6%E4%B8%8E%E7%B2%98%E8%B4%B4\"><span class=\"toc-text\"> 删除、复制与粘贴</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E5%85%85\"><span class=\"toc-text\"> 补充</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\"> 参考资料</span></a></li></ol>","author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"Redis的数据类型","uid":"4b4f7cdf0dd2548c372a61ce48da36cd","slug":"Redis-Learning-01-数据类型","date":"2023-04-24T02:31:49.000Z","updated":"2024-03-18T09:11:34.050Z","comments":true,"path":"api/articles/Redis-Learning-01-数据类型.json","keywords":"Code, Learning, Backend, Frontend","cover":"/img/redis.jpg","text":"Redis 支持五种数据类型： string hash list set zset String string 是最基本的类型。string 二进制安全，即可以...","permalink":"/post/Redis-Learning-01-数据类型","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"Redis","slug":"Redis","count":4,"path":"api/categories/Redis.json"}],"tags":[{"name":"coding","slug":"coding","count":19,"path":"api/tags/coding.json"},{"name":"Redis","slug":"Redis","count":4,"path":"api/tags/Redis.json"}],"author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"TEST","uid":"ad07a23e70b0e9f11bd9b11c976479b5","slug":"TEST","date":"2023-04-16T12:30:05.000Z","updated":"2024-03-18T09:09:48.582Z","comments":true,"path":"api/articles/TEST.json","keywords":"Code, Learning, Backend, Frontend","cover":[],"text":"这是一篇测试文章 ","permalink":"/post/TEST","photos":[],"count_time":{"symbolsCount":11,"symbolsTime":"1 mins."},"categories":[{"name":"test","slug":"test","count":1,"path":"api/categories/test.json"}],"tags":[{"name":"test","slug":"test","count":1,"path":"api/tags/test.json"}],"author":{"name":"Ivan Snow","slug":"blog-author","avatar":"https://ivansnow02.github.io/img/avatar.png","link":"/","description":"目前就读于某大学的计算机科学与技术专业，在学习后端与CV中","socials":{"github":"https://github.com/ivansnow02","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}