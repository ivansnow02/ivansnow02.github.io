<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>离散数学复习</title>
    <link href="/posts/12732/"/>
    <url>/posts/12732/</url>
    
    <content type="html"><![CDATA[<h1 id="集合论">集合论</h1><h2 id="集合的基本概念">集合的基本概念</h2><h3 id="集合的定义">集合的定义</h3><ul><li>具有某种特定性质事物的全体，通常，用大写的英文字母<spanclass="math inline">\(A, B, C,……\)</span>表示集合</li></ul><h3 id="集合的元素">集合的元素</h3><ul><li>组成一个集合的那些对象或单元称为这个集合的元素，通常，用小写的英文字母<spanclass="math inline">\(a\)</span>,<spanclass="math inline">\(b\)</span>,<spanclass="math inline">\(c\)</span>,…，或者<spanclass="math inline">\(a_1\)</span>,<spanclass="math inline">\(a_2\)</span>,<spanclass="math inline">\(b_1\)</span>,<spanclass="math inline">\(b_2\)</span>…表示集合中的元素</li></ul><h3 id="属于">属于</h3><ul><li>设A是一个集合，a是集合A中的元素，记以<span class="math inline">\(a\in A\)</span>，读作<span class="math inline">\(a\)</span>属于<spanclass="math inline">\(A\)</span>；若<spanclass="math inline">\(a\)</span>不是集合<spanclass="math inline">\(A\)</span>中的元素，则记以<spanclass="math inline">\(a \notin A\)</span>，读作<spanclass="math inline">\(a\)</span>不属于<spanclass="math inline">\(A\)</span></li></ul><h3 id="有限集">有限集</h3><ul><li>包含有限个元素的集合，称为有限集或有穷集(finite set)</li></ul><h3 id="无限集">无限集</h3><ul><li>包含无限个元素的集合，称为无限集或无穷集(infinite set )</li></ul><h3 id="空集">空集</h3><ul><li>约定，存在一个没有任何元素的集合，称为空集(empty set) ，记为<spanclass="math inline">\(\varnothing\)</span>，有时也用<spanclass="math inline">\(\{\}\)</span>来表示</li></ul><h3 id="全集">全集</h3><ul><li><p>约定，所讨论的对象的全体称为全集(universal set)，记作<spanclass="math inline">\(E\)</span>或<spanclass="math inline">\(U\)</span>，我们所讨论的集合都是全集的子集</p></li><li><p><strong>全集是相对的</strong></p></li></ul><h3 id="集合的元素数">集合的元素数</h3><ul><li>设<span class="math inline">\(A\)</span>是有穷集合，<spanclass="math inline">\(A\)</span>中元素的个数称为集合<spanclass="math inline">\(A\)</span>的元素数，记为<spanclass="math inline">\(|A|\)</span>，<strong>特别，<spanclass="math inline">\(|\varnothing|=0\)</span></strong></li></ul><h3 id="集合的表示法">集合的表示法</h3><h4 id="列举法">列举法</h4><ul><li>将集合中的元素一一列举，或列出足够多的元素以反映集合中元素的特征</li></ul><h4 id="描述法">描述法</h4><ul><li>通过描述集合中元素的共同特征来表示集合</li></ul><h4 id="文氏图">文氏图</h4><ul><li>用一个大的矩形表示全集，在矩形内画一些圆或其它的几何图形，来表示集合，有时也用一些点来表示集合中的特定元素</li></ul><h3 id="集合的特征">集合的特征</h3><h4 id="确定性">确定性</h4><ul><li>任何一个对象，或者是这个集合的元素，或者不是，二者必居其一</li></ul><h4 id="互异性">互异性</h4><ul><li>集合中任何两个元素都是不同的，即集合中不允许出现重复的元素</li></ul><h4 id="无序性">无序性</h4><ul><li>集合与其中的元素的顺序无关</li></ul><h4 id="多样性">多样性*</h4><ul><li>集合中的元素可以是任意的对象，相互独立，不要求一定要具备明显的共同特征</li></ul><h2 id="集合间的关系">集合间的关系</h2><h3 id="集合相等">集合相等</h3><ul><li>当两个集合<span class="math inline">\(A\)</span>和<spanclass="math inline">\(B\)</span>的元素完全一样，即<spanclass="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>实际上是同一个集合时，则称集合<spanclass="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>相等，记以<spanclass="math inline">\(A=B\)</span></li></ul><h3 id="集合包含">集合包含</h3><h4 id="子集">子集</h4><ul><li>设<span class="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>是两个集合，若<spanclass="math inline">\(A\)</span>的元素都是<spanclass="math inline">\(B\)</span>的元素，则称<spanclass="math inline">\(A\)</span>是<spanclass="math inline">\(B\)</span>的子集(subset) ，也称<spanclass="math inline">\(B\)</span>包含<spanclass="math inline">\(A\)</span>，或<spanclass="math inline">\(A\)</span>包含于<spanclass="math inline">\(B\)</span>，记以<span class="math inline">\(A\subseteq B\)</span>，或<span class="math inline">\(B \supseteqA\)</span></li></ul><h4 id="真子集">真子集</h4><ul><li>若<span class="math inline">\(A \subseteq B\)</span>，且<spanclass="math inline">\(A \neq B\)</span>，则称<spanclass="math inline">\(A\)</span>是<spanclass="math inline">\(B\)</span>的真子集(proper subset)，也称<spanclass="math inline">\(B\)</span>真包含<spanclass="math inline">\(A\)</span>，或<spanclass="math inline">\(A\)</span>真包含于<spanclass="math inline">\(B\)</span>，记以<span class="math inline">\(A\subset B\)</span>，或<span class="math inline">\(B \supsetA\)</span></li></ul><h4 id="重要结论">重要结论</h4><ul><li>对任意集合<span class="math inline">\(A\)</span>, 有<spanclass="math inline">\(A ⊆ A\)</span></li><li><spanclass="math inline">\(\varnothing\)</span>是任意集合的子集，且空集是唯一的</li><li>对于任意两个集合<span class="math inline">\(A\)</span>、<spanclass="math inline">\(B\)</span>，<spanclass="math inline">\(A=B\)</span>当且仅当<spanclass="math inline">\(A⊆B\)</span>且<span class="math inline">\(B⊆A\)</span>。</li></ul><h3 id="幂集">幂集</h3><h4 id="定义">定义</h4><ul><li>设<span class="math inline">\(A\)</span>是集合，<spanclass="math inline">\(A\)</span>的所有子集为元素组成的集合称为<spanclass="math inline">\(A\)</span>的幂集，记以<spanclass="math inline">\(ρ(A)\)</span>或<spanclass="math inline">\(2^A\)</span>，<spanclass="math inline">\(ρ(A)=\{S|S ⊆ A\}\)</span></li></ul><h4 id="性质">性质</h4><ul><li>若A为有穷集，<span class="math inline">\(|A|=n\)</span>，则<spanclass="math inline">\(|2^A | = |ρ(A)|= C_n^0 + C_n^1 + … + C_n^n=2^n\)</span></li><li><span class="math inline">\(x∈ρ(A)\)</span>当且仅当<spanclass="math inline">\(x⊆A\)</span></li><li>设<span class="math inline">\(A\)</span>、<spanclass="math inline">\(B\)</span>是两个集合，<spanclass="math inline">\(A⊆B\)</span>当且仅当<spanclass="math inline">\(ρ(A)⊆ρ(B)\)</span></li></ul><h2 id="集合运算">　集合运算</h2><h3 id="集合的并集">集合的并集</h3><ul><li>设<span class="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>是两个集合。所有属于<spanclass="math inline">\(A\)</span>或者属于<spanclass="math inline">\(B\)</span>的元素组成的集合，称为<spanclass="math inline">\(A\)</span>和<spanclass="math inline">\(B\)</span>的并集，记以<spanclass="math inline">\(A∪B\)</span>。即<spanclass="math inline">\(A∪B=\{x|x∈A或x∈B\}\)</span></li></ul><h3 id="集合的交集">集合的交集</h3><ul><li>设<span class="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>是两个集合。由属于<spanclass="math inline">\(A\)</span>又属于<spanclass="math inline">\(B\)</span>的元素组成的集合，称为<spanclass="math inline">\(A\)</span>和<spanclass="math inline">\(B\)</span>的交集，记以<spanclass="math inline">\(A∩B\)</span>。即<spanclass="math inline">\(A∩B=\{x|x∈A且x∈B\}\)</span></li></ul><h3 id="并集和交集的推广">并集和交集的推广</h3><ul><li><p>设<span class="math inline">\(A_1\)</span>，<spanclass="math inline">\(A_2\)</span>，…，<spanclass="math inline">\(A_n\)</span>是<spanclass="math inline">\(n\)</span>个集合，则：<spanclass="math inline">\(A_1∪A_2∪…∪A_n\)</span>，简记为<spanclass="math inline">\(\bigcup\limits_{i=1}^nA_i\)</span></p></li><li><p><span class="math inline">\(A_1∩A_2∩…∩A_n\)</span>，简记为<spanclass="math inline">\(\bigcap\limits_{i=1}^n A_i\)</span></p></li></ul><h3 id="集合的补集">集合的补集</h3><ul><li><p>设<span class="math inline">\(A\)</span>是一个集合，全集<spanclass="math inline">\(E\)</span>与<spanclass="math inline">\(A\)</span>的差集称为<spanclass="math inline">\(A\)</span>的补集，记以<spanclass="math inline">\(\sim A\)</span>，即<spanclass="math inline">\(\sim A=E-A\)</span></p></li><li><p>特别， <span class="math inline">\(\sim\varnothing=E\)</span>，<span class="math inline">\(\sim E=\varnothing\)</span></p></li></ul><h3 id="集合的差集">集合的差集</h3><ul><li>设<span class="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>是两个集合。由属于集合<spanclass="math inline">\(A\)</span>而不属于集合<spanclass="math inline">\(B\)</span>的所有元素组成的集合，称为<spanclass="math inline">\(A\)</span>与<spanclass="math inline">\(B\)</span>的差集，记以<spanclass="math inline">\(A-B\)</span>。即<spanclass="math inline">\(A-B=\{x|x∈A且x ∉B\}\)</span></li></ul><h3 id="集合的对称差">集合的对称差</h3><ul><li>设<span class="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>是两个集合。则<spanclass="math inline">\(A\)</span>与<spanclass="math inline">\(B\)</span>的和(对称差),记以<spanclass="math inline">\(A⊕B\)</span>, 定义为<spanclass="math inline">\(A⊕B=(A-B)∪(B-A)\)</span>，即<spanclass="math inline">\(A \oplus B=\{x|(x \in A)且(x \notin B)或(x \inB)且(x \notin A)\}\)</span></li><li><span class="math inline">\(A\)</span>与<spanclass="math inline">\(B\)</span>的对称差还有一个等价的定义，即<spanclass="math inline">\(A⊕B=(A∪B)-(A∩B)\)</span></li></ul><h3 id="集合的运算律">集合的运算律</h3><h4 id="等幂律">等幂律</h4><ul><li><span class="math inline">\(A∩A=A\)</span></li><li><span class="math inline">\(A∪A=A\)</span></li></ul><h4 id="交换律">交换律</h4><ul><li><span class="math inline">\(A∩B=B∩A\)</span></li><li><span class="math inline">\(A∪B=B∪A\)</span></li></ul><h4 id="结合律">结合律</h4><ul><li><span class="math inline">\((A∩B)∩C=A∩(B∩C)\)</span></li><li><span class="math inline">\((A∪B)∪C=A∪(B∪C)\)</span></li></ul><h4 id="分配律">分配律</h4><ul><li><span class="math inline">\(A∩(B∪C)=(A∩B)∪(A∩C)\)</span></li><li><span class="math inline">\(A∪(B∩C)=(A∪B)∩(A∪C)\)</span></li></ul><h4 id="吸收律">吸收律</h4><ul><li><span class="math inline">\(A∩(A∪B)=A\)</span></li><li><span class="math inline">\(A∪(A∩B)=A\)</span></li></ul><h4 id="互补律">互补律</h4><ul><li><span class="math inline">\(\sim A∩A= \varnothing\)</span></li><li><span class="math inline">\(\sim A∪A=E\)</span></li></ul><h4 id="摩根律">摩根律</h4><ul><li><span class="math inline">\(\sim (A∩B)=\sim A ∪ \sim B\)</span></li><li><span class="math inline">\(\sim(A∪B)=\sim A ∩ \sim B\)</span></li></ul><h4 id="同一律">同一律</h4><ul><li><span class="math inline">\(E∩A=A\)</span></li><li><span class="math inline">\(\varnothing ∪A=A\)</span></li></ul><h4 id="零一律">零一律</h4><ul><li><p><spanclass="math inline">\(\varnothing∩A=\varnothing\)</span></p></li><li><p><span class="math inline">\(E∪A=E\)</span></p></li></ul><h4 id="双重否定律">双重否定律</h4><ul><li><span class="math inline">\(\sim (\sim A)=A\)</span></li></ul><h4 id="其他算律">其他算律</h4><ul><li><span class="math inline">\(A-B=A∩ \sim B\)</span></li><li><spanclass="math inline">\(A⊕B=(A-B)∪(B-A)=(A∪B)-(A∩B)\)</span></li><li><span class="math inline">\(A⊕A=\varnothing\)</span></li><li><span class="math inline">\(\sim\varnothing=E\)</span></li><li><span class="math inline">\(\sim E=\varnothing\)</span></li></ul><h2 id="有限集合的计数">有限集合的计数</h2><h3 id="容斥原理">容斥原理</h3><ul><li><span class="math inline">\(|A∪B|=|A|+|B|-|A∩B|\)</span></li><li><spanclass="math inline">\(|A∪B∪C|=|A|+|B|+|C|-|A∩B|-|A∩C|-|B∩C|+|A∩B∩C|\)</span></li><li>设<span class="math inline">\(A_1，A_2，…，A_n\)</span>是<spanclass="math inline">\(n\)</span>个集合，则：<spanclass="math inline">\(|\bigcup\limits_{i=1}^nA_i|=\sum\limits_{i=1}^n|A_i|-\sum\limits_{i&lt;j}^n|A_i\capA_j|+\sum\limits_{i&lt;j&lt;k}^n|A_i\cap A_j \capA_k|+...+(-1)^{n-1}|A_1 \cap A_2 \cap A_3 \cap ...\capA_n|\)</span>称为包含排斥原理，简称容斥原理</li></ul><h2 id="集合恒等式的证明">集合恒等式的证明</h2><h3 id="基本定义法">基本定义法</h3><h3 id="公式等价法">公式等价法</h3><h4 id="基本原则">基本原则</h4><ul><li>将集合运算表达式中其他运算符号转换为∩和∪；</li><li>将补运算作用到单一集合上；</li><li>左<span class="math inline">\(\Rightarrow\)</span>右，右<spanclass="math inline">\(\Rightarrow\)</span>左，左<spanclass="math inline">\(\Rightarrow\)</span>中间式，右<spanclass="math inline">\(\Rightarrow\)</span>中间式；</li><li>根据基本运算符号的定义和运算定律转换。</li></ul><h3 id="集合成员表法">集合成员表法*</h3><h1 id="关系">关系</h1><h2 id="序偶和笛卡尔积">序偶和笛卡尔积</h2><h3 id="序偶">序偶</h3><h4 id="定义-1">定义</h4><ul><li>对于有序<span class="math inline">\(n\)</span>元组，当<spanclass="math inline">\(n=2\)</span>时，我们将其称作有序二元组，也称作有序对,或序偶。</li></ul><h4 id="特点">特点</h4><ul><li>若<span class="math inline">\(a≠b\)</span>,则<spanclass="math inline">\((a,b)≠(b,a)\)</span></li><li>两个有序对<span class="math inline">\((a,b)\)</span>和<spanclass="math inline">\((c,d)\)</span>相等当且仅当<spanclass="math inline">\(a=c\)</span>，<spanclass="math inline">\(b=d\)</span></li></ul><h4 id="特征">特征</h4><ul><li>成对出现、具有一定的顺序</li></ul><h3 id="笛卡尔积">笛卡尔积</h3><h4 id="定义-2">定义</h4><ul><li>设<span class="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>是两个集合，所有有序对<spanclass="math inline">\((x, y)\)</span>做成的集合<spanclass="math inline">\((其中x∈A，y∈B)\)</span>，称为<spanclass="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>的笛卡儿积，记为<spanclass="math inline">\(A×B\)</span>，<spanclass="math inline">\(A×B=\{(x，y)|x∈A且y∈B\}\)</span></li><li>设<span class="math inline">\(A_1,A_2 , ...,A_n\)</span>是<spanclass="math inline">\(n\)</span>个集合，由所有有序<spanclass="math inline">\(n\)</span>元组(<spanclass="math inline">\(a_1,a_2,…,a_n\)</span>)组成的集合<spanclass="math inline">\((其中ai∈A_i，i=1,2, … ,n)\)</span>，称为<spanclass="math inline">\(A_1,A_2,...,A_n\)</span>的笛卡儿积，记以<spanclass="math inline">\(A_1×A_2 ×...×A_n\)</span>，<spanclass="math inline">\(A_1×A_2 ×...×A_n=\{(a_1,a_2 ,… ,a_n) |a_i∈A_i，i=1,2, … ,n \}\)</span></li></ul><h4 id="性质-1">性质</h4><ul><li><p><span class="math inline">\(|A×B|=|A|× |B|\)</span></p></li><li><p>对任意集合<span class="math inline">\(A\)</span>，有<spanclass="math inline">\(A×\varnothing=\varnothing\)</span>，<spanclass="math inline">\(\varnothing \times A=\varnothing\)</span></p></li><li><p>笛卡儿积运算<strong>不满足</strong>交换律，即<spanclass="math inline">\(A×B≠B×A\)</span></p></li><li><p>笛卡儿积运算<strong>不满足</strong>结合律，即<spanclass="math inline">\((A×B)×C≠A×(B×C)\)</span></p></li><li><p>笛卡儿积运算对并和交运算<strong>满足</strong>分配律， 即</p><ul><li><span class="math inline">\(A×(B∪C)=(A×B)∪(A×C)\)</span></li><li><span class="math inline">\((B∪C)×A=(B×A)∪(C×A)\)</span></li><li><span class="math inline">\(A×(B∩C)=(A×B)∩(A×C)\)</span></li><li><span class="math inline">\((B∩C)×A=(B×A)∩(C×A)\)</span></li></ul></li><li><p>设<span class="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>，<spanclass="math inline">\(C\)</span>，<spanclass="math inline">\(D\)</span>是集合，若<spanclass="math inline">\(A⊆C\)</span>且<spanclass="math inline">\(B⊆D\)</span>，则<span class="math inline">\(A×B ⊆C×D\)</span></p></li></ul><h2 id="二元关系">二元关系</h2><h3 id="定义-3">定义</h3><ul><li>给定任意集合<span class="math inline">\(A\)</span>和<spanclass="math inline">\(B\)</span>，若<spanclass="math inline">\(R⊆A×B\)</span>，则称<spanclass="math inline">\(R\)</span>为从<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>的二元关系，特别在<spanclass="math inline">\(A=B\)</span>时，称<spanclass="math inline">\(R\)</span>为<spanclass="math inline">\(A\)</span>上的二元关系</li></ul><h3 id="补充">补充</h3><ul><li><strong>关系是一个集合，是序偶的集合</strong></li><li><span class="math inline">\(R\)</span>是有序对的集合。若<spanclass="math inline">\((x,y)∈R\)</span>，则也表示为<spanclass="math inline">\(x R y\)</span>，即<spanclass="math inline">\((x,y)∈ R ⇔ x R y\)</span><ul><li>若<span class="math inline">\(R =\varnothing\)</span>，则称<spanclass="math inline">\(R\)</span>为<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>上<strong>空关系</strong></li><li>若<span class="math inline">\(R =A×B\)</span>，称<spanclass="math inline">\(R\)</span>为<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>上<strong>全域关系</strong></li><li>称<span class="math inline">\(R=\{(x,x)|x∈A\}\)</span>为<spanclass="math inline">\(A\)</span>上的<strong>恒等关系</strong>，记为<spanclass="math inline">\(I_A\)</span></li></ul></li><li>当集合<span class="math inline">\(A,B\)</span>都是有限集时，<spanclass="math inline">\(A×B\)</span>共有<spanclass="math inline">\(2^{|A|\cdot|B|}\)</span>个不同的子集， 即从<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>的不同关系共有<spanclass="math inline">\(2^{|A|\cdot|B|}\)</span>个</li></ul><h3 id="定义域值域和域">定义域、值域和域</h3><h4 id="定义-4">定义</h4><ul><li>令<span class="math inline">\(R \subseteq A \times B\)</span>，且<span class="math inline">\(\begin{cases} D (R) = \{ x | (∃y) (x R y )\}\\R (R) = \{ y | (∃x) (x R y ) \}\\F(R) =D(R)∪R(R)\end{cases}\)</span>则称<spanclass="math inline">\(D(R)\)</span>、<spanclass="math inline">\(R(R)\)</span>和<spanclass="math inline">\(F(R)\)</span>分别是二元关系<spanclass="math inline">\(R\)</span>的定义域、值域和域，显然<spanclass="math inline">\(D(R) ⊆ A\)</span>，<spanclass="math inline">\(R(R) ⊆ B\)</span></li></ul><h3 id="关系矩阵与关系图">关系矩阵与关系图</h3><h4 id="关系矩阵">关系矩阵</h4><ul><li>给定集合<span class="math inline">\(A=\{a_1,a_2,···,a_m\}\)</span>和<span class="math inline">\(B=\{b_1,b_2,···,b_n\}\)</span>，且<span class="math inline">\(R⊆A×B\)</span>，若<spanclass="math inline">\(r_{ij}=\begin{cases} 1 ,&amp; {a_i R b_j}\\0,&amp; 否则 \end{cases}\)</span> 则称矩阵<spanclass="math inline">\(M_R=(r _{i j})\)</span>为<spanclass="math inline">\(R\)</span>的关系矩阵</li></ul><h4 id="关系图">关系图</h4><ul><li>给定集合<span class="math inline">\(A=\{a_1,a_2,···,a_m\}\)</span>和<span class="math inline">\(A\)</span>上的关系<spanclass="math inline">\(R\)</span>，且<spanclass="math inline">\(R⊆A×A\)</span>，若：以<spanclass="math inline">\(A\)</span>中的元素为结点；对<spanclass="math inline">\(R\)</span>中的元素<span class="math inline">\((a_i,a_j )\)</span>, 以<spanclass="math inline">\(a_i\)</span>为起点,以<spanclass="math inline">\(a_j\)</span>为终点,作有向边所构成的图，则称该图为<spanclass="math inline">\(R\)</span>的关系图</li></ul><h2 id="关系运算">关系运算</h2><h3 id="关系的并交补差">关系的并、交、补、差</h3><ul><li>关系是序偶(有序对)的集合，因此可以对关系进行运算。 若<spanclass="math inline">\(R, S⊆A×B\)</span>，则<spanclass="math inline">\(R∪S\)</span>，<span class="math inline">\(R∩S\)</span>，<span class="math inline">\(\sim R\)</span>，<spanclass="math inline">\(R-S⊆A×B\)</span></li></ul><h3 id="关系的复合">关系的复合</h3><h4 id="定义-5">定义</h4><ul><li>设<span class="math inline">\(R\)</span>是从集合<spanclass="math inline">\(X\)</span>到<spanclass="math inline">\(Y\)</span>的关系，<spanclass="math inline">\(S\)</span>是从<spanclass="math inline">\(Y\)</span>到<spanclass="math inline">\(Z\)</span>的关系，把<spanclass="math inline">\(X\)</span>到<spanclass="math inline">\(Z\)</span>的关系定义为<spanclass="math inline">\(R\circ S\)</span>。称<spanclass="math inline">\(R\circ S\)</span>是关系<spanclass="math inline">\(R\)</span>和<spanclass="math inline">\(S\)</span>的合成关系或复合关系，<spanclass="math inline">\(R\circ S=\{(x,z)|∃x∈X, ∃z∈Z, 至少存在一个y∈Y有(x ,y)∈R且(y , z)∈S\}\)</span></li></ul><h4 id="定理">定理</h4><ul><li><p>已知集合<span class="math inline">\(X,Y,Z,W\)</span>，关系<spanclass="math inline">\(R_1,R_2,R_3,R_4\)</span>如下<spanclass="math inline">\(X\stackrel {R_1}\longrightarrow Y \stackrel{R_2R_3}\longrightarrow Z \stackrel {R_4}\longrightarrowW\)</span>，则有：</p><ul><li><spanclass="math inline">\(𝑅_1∘(𝑅_2∪𝑅_3)=(𝑅_1∘𝑅_2)∪(𝑅_ 1∘𝑅_3)\)</span></li><li><spanclass="math inline">\(R_1∘(R_2∩R_3)⊆(R_1∘R_2)∩(R_1∘R_3)\)</span></li><li><spanclass="math inline">\((𝑅_2∪𝑅_3)∘𝑅_4=(𝑅_2∘𝑅_4)∪(𝑅_3∘𝑅_4)\)</span></li><li><spanclass="math inline">\((𝑅_2∩𝑅_3)∘𝑅_4⊆(𝑅_2∘𝑅_4)∩(𝑅_3∘𝑅_4)\)</span></li></ul></li><li><p>已知集合<span class="math inline">\(X, Y, Z,W\)</span>，关系<span class="math inline">\(R_1, R_2,R_3\)</span>如下<span class="math inline">\(X\stackrel{R_1}\longrightarrow Y \stackrel {R_2}\longrightarrow Z \stackrel{R_3}\longrightarrow W\)</span>，则有：<span class="math inline">\((R_1\circ R_2)\circ R_3=R_1\circ (R_2 \circ R_3)\)</span><strong>结合律</strong></p></li><li><p><span class="math inline">\(R\circ R\circ R \circ\dots\circR=R^{(n)}\)</span></p></li><li><p><span class="math inline">\(R^{(0)}=I_X=\{(x,x)|x\inX\}\)</span></p></li></ul><h3 id="逆关系">逆关系</h3><h4 id="定义-6">定义</h4><ul><li>若<span class="math inline">\(R⊆A×B\)</span>，则关系<spanclass="math inline">\(\overline R =\{(y,x)|(x,y)∈ R\}\)</span>是集合<span class="math inline">\(B\)</span>到<spanclass="math inline">\(A\)</span>的关系，<spanclass="math inline">\(\overline R\)</span>称为关系<spanclass="math inline">\(R\)</span>的逆关系</li></ul><h4 id="定理-1">定理</h4><ul><li><span class="math inline">\(R_1, R_2, R\)</span>为<spanclass="math inline">\(X\)</span>到<spanclass="math inline">\(Y\)</span>的二元关系，则<ul><li><p><span class="math inline">\(\overline{R_1∪ R_2} =\overline{R_1}∪\overline{R_2}\)</span></p></li><li><p><span class="math inline">\(\overline{R_1 \cap R_2}=\overline{R_1} \cap \overline {R_2}\)</span></p></li><li><p><span class="math inline">\(\overline{X \times Y} = Y \timesX\)</span></p></li><li><p><span class="math inline">\(\overline{\sim R}=\sim\overline{R}\)</span></p></li><li><p><spanclass="math inline">\(\overline{R_1-R_2}=\overline{R_1}-\overline{R_2}\)</span></p></li><li><p><span class="math inline">\(S \subseteq R \Leftrightarrow\overline{S}\subseteq\overline{R}\)</span></p></li></ul></li><li>已知集合<span class="math inline">\(X, Y, Z\)</span>，关系<spanclass="math inline">\(R, S\)</span>如下，<span class="math inline">\(X\stackrel {R}\longrightarrow Y \stackrel {S}\longrightarrowZ\)</span>，则有：<span class="math inline">\(\overline{R\circS}=\overline{S}\circ\overline{R}\)</span></li></ul><h4 id="注意">注意</h4><ul><li>将<span class="math inline">\(R\)</span>的关系矩阵转置即得<spanclass="math inline">\(\overline R\)</span>的关系矩阵，即<spanclass="math inline">\(R\)</span>和<span class="math inline">\(\overlineR\)</span>的关系矩阵互为转置矩阵</li><li><span class="math inline">\(\overlineR\)</span>的前域与后域正好是<spanclass="math inline">\(R\)</span>的后域和前域，即<spanclass="math inline">\(domR=ran\overline R\)</span>，<spanclass="math inline">\(dom\overline R=ranR\)</span></li><li><span class="math inline">\(|R|=|\overline R|\)</span></li></ul><h2 id="关系性质">关系性质</h2><h3 id="自反性">自反性</h3><ul><li>令<span class="math inline">\(R⊆A×A\)</span>，若对<spanclass="math inline">\(A\)</span>中每个<spanclass="math inline">\(x\)</span>，都有<spanclass="math inline">\(xRx\)</span>，则称<spanclass="math inline">\(R\)</span>是自反的，即<spanclass="math inline">\(A上关系R是自反的⇔∀x(x∈A→xRx)\)</span></li><li>该定义表明了，在自反的关系<spanclass="math inline">\(R\)</span>中，除其他有序对外，必须包括由每个<spanclass="math inline">\(x∈A\)</span>所组成的元素相同的有序对</li></ul><h3 id="反自反性">反自反性</h3><ul><li>令<span class="math inline">\(R⊆A×A\)</span>，若对于<spanclass="math inline">\(A\)</span>中每个<spanclass="math inline">\(x\)</span>，有<span class="math inline">\((x,x)∉R\)</span>，则称<spanclass="math inline">\(R\)</span>是反自反的，即<spanclass="math inline">\(A上关系R是反自反的⇔∀x (x∈A→(x,x) ∉R)\)</span></li><li>该定义表明了，一个反自反的关系<spanclass="math inline">\(R\)</span>中，不应包括有任何相同元素的有序对</li><li>应该指出，任何一个不是自反的关系，未必是反自反的；反之，任何一个不是反自反的关系，未必是自反的。这就是说，<strong>存在既不是自反的也不是反自反的二元关系</strong></li></ul><h3 id="对称性">对称性</h3><ul><li>令<span class="math inline">\(R⊆A×A\)</span>，对于<spanclass="math inline">\(A\)</span>中每个<spanclass="math inline">\(x\)</span>和<spanclass="math inline">\(y\)</span>，若<spanclass="math inline">\(xRy\)</span>，则<spanclass="math inline">\(yRx\)</span>，称<spanclass="math inline">\(R\)</span>是对称的，即<spanclass="math inline">\(在A上关系R是对称的⇔(∀x)(∀y)(x,y∈A且xRy→yRx)\)</span></li><li>该定义表明了，在表示对称的关系<spanclass="math inline">\(R\)</span>的有序对集合中，若有有序对<spanclass="math inline">\((x, y)\)</span>，则必定还会有有序对<spanclass="math inline">\((y, x)\)</span></li></ul><h3 id="反对称性">反对称性</h3><ul><li>令<span class="math inline">\(R⊆A×A\)</span>，对于<spanclass="math inline">\(A\)</span>中每个<spanclass="math inline">\(x\)</span>和<spanclass="math inline">\(y\)</span>，若<spanclass="math inline">\(xRy\)</span>且<spanclass="math inline">\(yRx\)</span>，则<spanclass="math inline">\(x=y\)</span>，称<spanclass="math inline">\(R\)</span>是反对称的，即<spanclass="math inline">\(A上关系R是反对称的⇔(∀x)(∀y)(x,y∈A且xRy且yRx→x=y)\)</span></li><li>该定义表明了，在表示反对称关系<spanclass="math inline">\(R\)</span>的有序对集合中，若存在有序对<spanclass="math inline">\((x, y)\)</span>和<span class="math inline">\((y,x)\)</span>，则必定是<spanclass="math inline">\(x=y\)</span>。或者说，在<spanclass="math inline">\(R\)</span>中若有有序对<spanclass="math inline">\((x, y)\)</span>，则除非<spanclass="math inline">\(x=y\)</span>，否则必定不会出现<spanclass="math inline">\((y, x)\)</span></li></ul><h3 id="传递性">传递性</h3><ul><li>令<span class="math inline">\(R⊆A×A\)</span>，对于<spanclass="math inline">\(A\)</span>中每个<span class="math inline">\(x, y,z\)</span>，若<span class="math inline">\(xRy且yRz\)</span>，则<spanclass="math inline">\(xRz\)</span>，称<spanclass="math inline">\(R\)</span>是传递的，即<spanclass="math inline">\(A上关系R是传递的⇔(∀x)(∀y)(∀z)(x,y,z∈A且xRy且yRz→xRz)\)</span></li><li>该定义表明了，在表示可传递关系<spanclass="math inline">\(R\)</span>的有序对集合中，若有有序对<spanclass="math inline">\((x, y)\)</span>和<span class="math inline">\((y,z)\)</span>，则必有有序对<span class="math inline">\((x,z)\)</span></li></ul><h3 id="结论">结论</h3><ul><li>关系<span class="math inline">\(R\)</span>是自反的<spanclass="math inline">\(\Rightarrow\)</span> <spanclass="math inline">\(R\)</span>不是反自反的</li><li>关系<span class="math inline">\(R\)</span>是自反的<spanclass="math inline">\(\Leftrightarrow\)</span>关系图中每个结点都有环</li><li>关系<span class="math inline">\(R\)</span>是反自反的<spanclass="math inline">\(\Leftrightarrow\)</span>关系图中每个结点都无环</li><li>关系<span class="math inline">\(R\)</span>是自反的<spanclass="math inline">\(\Leftrightarrow\)</span>关系矩阵的主对角线上全为1</li><li>关系<span class="math inline">\(R\)</span>是反自反的<spanclass="math inline">\(\Leftrightarrow\)</span>关系矩阵的主对角线上全为0</li><li>关系<span class="math inline">\(R\)</span>是对称的<spanclass="math inline">\(\Leftrightarrow\)</span>关系图中任何一对结点之间，要么有方向相反的两条边，要么无任何边</li><li>关系<span class="math inline">\(R\)</span>是反对称的<spanclass="math inline">\(\Leftrightarrow\)</span>关系图中任何一对结点之间，至多有一条边</li><li>关系<span class="math inline">\(R\)</span>是对称的<spanclass="math inline">\(\Leftrightarrow\)</span> <spanclass="math inline">\(R\)</span>的关系矩阵为对称矩阵</li><li>关系<span class="math inline">\(R\)</span>是反对称的<spanclass="math inline">\(\Leftrightarrow\)</span> <spanclass="math inline">\(R\)</span>的关系系矩阵满足<spanclass="math inline">\(r_{ij}\cdotr_{ji}＝0，i,j=1,2,…,n，i≠j\)</span></li><li><strong>非空集合上的空关系</strong>是反自反的，对称的，反对称的和传递的，但不是自反的。<strong>空集合上的空关系</strong>则是自反的，反自反的，对称的，反对称的和传递的</li><li><strong>非空集合上的全域关系</strong>是自反的，对称的和传递的，但不是反自反的和反对称的</li><li>设<span class="math inline">\(R⊆A×A\)</span>，若<spanclass="math inline">\(R\)</span>是反自反的和传递的，则<spanclass="math inline">\(R\)</span>是反对称的</li></ul><h2 id="闭包运算">闭包运算</h2><h3 id="自反闭包">自反闭包</h3><ul><li>设<span class="math inline">\(R\)</span>是<spanclass="math inline">\(A\)</span>上的二元关系，若<spanclass="math inline">\(R&#39;\)</span>是<spanclass="math inline">\(R\)</span>的自反闭包,记作<spanclass="math inline">\(r(R)\)</span>，则：<ul><li><span class="math inline">\(R&#39;\)</span>是自反的</li><li><span class="math inline">\(R⊆R&#39;\)</span></li><li>对任意的自反关系<spanclass="math inline">\(R&#39;&#39;\)</span>，<spanclass="math inline">\(R⊆R&#39;&#39;\)</span>，则必有<spanclass="math inline">\(R&#39;⊆R&#39;&#39;\)</span></li></ul></li></ul><h3 id="对称闭包">对称闭包</h3><ul><li>设<span class="math inline">\(R\)</span>是<spanclass="math inline">\(A\)</span>上的二元关系，若<spanclass="math inline">\(R&#39;\)</span>是<spanclass="math inline">\(R\)</span>的对称闭包,记作<spanclass="math inline">\(s(R)\)</span>，则：<ul><li><span class="math inline">\(R&#39;\)</span>是对称的</li><li><span class="math inline">\(R⊆R&#39;\)</span></li><li>对任意的对称关系<spanclass="math inline">\(R&#39;&#39;\)</span>，<spanclass="math inline">\(R⊆R&#39;&#39;\)</span>，则必有<spanclass="math inline">\(R&#39;⊆R&#39;&#39;\)</span></li></ul></li></ul><h3 id="传递闭包">传递闭包</h3><ul><li><p>设<span class="math inline">\(R\)</span>是<spanclass="math inline">\(A\)</span>上的二元关系，若<spanclass="math inline">\(R&#39;\)</span>是<spanclass="math inline">\(R\)</span>的传递闭包,记作<spanclass="math inline">\(t(R)\)</span>，则：</p><ul><li><span class="math inline">\(R&#39;\)</span>是传递的</li><li><span class="math inline">\(R⊆R&#39;\)</span></li><li>对任意的传递关系<spanclass="math inline">\(R&#39;&#39;\)</span>，<spanclass="math inline">\(R⊆R&#39;&#39;\)</span>，则必有<spanclass="math inline">\(R&#39;⊆R&#39;&#39;\)</span></li></ul></li></ul><h3 id="定理-2">定理</h3><ul><li>R是 X 上的二元关系,则：<ul><li><span class="math inline">\(r(R)=R∪\{(x,x)|x∈X\}=R∪I_x\)</span></li><li><span class="math inline">\(s(R) = R∪ \overline{R}\)</span></li><li><span class="math inline">\(t(R)=R∪ R^{(2)}∪ R^{(3)}...∪R^{(n)}\)</span>，<span class="math inline">\(n\)</span>为集合<spanclass="math inline">\(X\)</span>的元素的个数</li><li><span class="math inline">\(R\)</span>是自反的<spanclass="math inline">\(\Leftrightarrow\)</span> <spanclass="math inline">\(r(R)\)</span></li><li><span class="math inline">\(R\)</span>是对称的<spanclass="math inline">\(\Leftrightarrow\)</span> <spanclass="math inline">\(s(R)=R\)</span></li><li><span class="math inline">\(R\)</span>是传递的<spanclass="math inline">\(\Leftrightarrow\)</span> <spanclass="math inline">\(t(R)\)</span></li></ul></li></ul><h2 id="等价关系">等价关系</h2><h3 id="定义-7">定义</h3><ul><li>设<span class="math inline">\(R\)</span>是集合<spanclass="math inline">\(X\)</span>上的二元关系，如果<spanclass="math inline">\(R\)</span>是自反的、对称的、传递的，那么称<spanclass="math inline">\(R\)</span>是等价关系</li></ul><h3 id="划分">划分</h3><ul><li>设集合<span class="math inline">\(A=\{S_1, S_2 , …,S_m\}\)</span>,<span class="math inline">\(S_i\)</span>是<spanclass="math inline">\(S\)</span>的非空子集, 如果称<spanclass="math inline">\(A\)</span>是<spanclass="math inline">\(S\)</span>的一个划分，称<spanclass="math inline">\(S_i\)</span>为划分的块，则：<ul><li><span class="math inline">\(S_i\)</span>之间是不相交的</li><li><span class="math inline">\(S_1∪S_2∪…∪S_m = S\)</span></li></ul></li></ul><h3 id="等价类">等价类</h3><h4 id="定义-8">定义</h4><ul><li><span class="math inline">\(R\)</span>是集合<spanclass="math inline">\(S\)</span>上的等价关系, 对任一<spanclass="math inline">\(x\in S\)</span>，均可构造一个<spanclass="math inline">\(S\)</span>的非空子集<spanclass="math inline">\([x]_R= \{ y | y\in S 且 xRy\}\)</span>，也可记为<span class="math inline">\([x]\)</span>，叫做<spanclass="math inline">\(x\)</span>关于<spanclass="math inline">\(R\)</span>的等价类:</li></ul><h4 id="性质-2">性质</h4><ul><li><span class="math inline">\(x\in[x]\)</span></li><li>若<span class="math inline">\(y\in[x]\)</span>, 则<spanclass="math inline">\([y]=[x]\)</span></li><li>若<span class="math inline">\(y\in[x]\)</span>, 则<spanclass="math inline">\([y]∩[x]=\varnothing\)</span></li></ul><h4 id="定理-3">定理</h4><ul><li>集合<span class="math inline">\(S\)</span>上的一个等价关系<spanclass="math inline">\(R\)</span>生成的等价类集合对应<spanclass="math inline">\(S\)</span>的一个划分</li><li>集合<span class="math inline">\(S\)</span>上的一个等价关系<spanclass="math inline">\(R\)</span>生成的等价类集合对应<spanclass="math inline">\(S\)</span>的一个划分。此划分称为集合<spanclass="math inline">\(S\)</span>关于<spanclass="math inline">\(R\)</span>的商集，记为<spanclass="math inline">\(S/R\)</span></li><li>集合<span class="math inline">\(S\)</span>上的一个划分可产生<spanclass="math inline">\(S\)</span>上的一个等价关系</li></ul><h2 id="偏序关系">偏序关系</h2><h3 id="定义-9">定义</h3><ul><li>设<span class="math inline">\(R\)</span>是集合<spanclass="math inline">\(A\)</span>中的二元关系，如果<spanclass="math inline">\(R\)</span>是自反的、反对称的和可传递的，则称<spanclass="math inline">\(R\)</span>是<spanclass="math inline">\(A\)</span>中的偏序关系。</li><li>通常用符号“<spanclass="math inline">\(≼\)</span>”来标记偏序关系<spanclass="math inline">\(R\)</span></li></ul><h3 id="偏序集">偏序集</h3><ul><li>在偏序集合<span class="math inline">\((A ,≼)\)</span>中，如果有元素<spanclass="math inline">\(x,y∈A\)</span>,且<span class="math inline">\(x≼y\)</span>(或者写为<span class="math inline">\((x,y)∈≼\)</span>)和<spanclass="math inline">\(x≠y\)</span>,同时不存在其它任何元素<spanclass="math inline">\(z∈A\)</span>，能使<span class="math inline">\(x≼z\)</span>和<span class="math inline">\(z≼ y\)</span>,则称元素<spanclass="math inline">\(y\)</span>盖住<spanclass="math inline">\(x\)</span>，若元素<spanclass="math inline">\(y\)</span>盖住<spanclass="math inline">\(x\)</span>，则可以将<spanclass="math inline">\(x,y\)</span>间的关系用图形表示，即：哈斯图</li></ul><h3 id="哈斯图">哈斯图</h3><ul><li>用小圆圈表示<span class="math inline">\(A\)</span>中的元素</li><li>若<span class="math inline">\(x≼y\)</span>且<spanclass="math inline">\(x≠y\)</span>, 则<spanclass="math inline">\(x\)</span>在<spanclass="math inline">\(y\)</span>的下方</li><li>若<span class="math inline">\(x≼y\)</span>且<spanclass="math inline">\(x≠y\)</span>, 并且<spanclass="math inline">\(A\)</span>中不存在另外的元素<spanclass="math inline">\(z\)</span>, 满足<spanclass="math inline">\(x≼z\)</span>,<spanclass="math inline">\(z≼y\)</span>, 则在<spanclass="math inline">\(x\)</span>与<spanclass="math inline">\(y\)</span>之间画一直线</li></ul><h3 id="拟序关系">拟序关系</h3><ul><li>设<span class="math inline">\(R\)</span>是集合<spanclass="math inline">\(A\)</span>中的反自反和传递的二元关系，则称<spanclass="math inline">\(R\)</span>是<spanclass="math inline">\(A\)</span>中的拟序关系 (“<spanclass="math inline">\(≺\)</span>”)</li></ul><h3 id="全序和全序集">全序和全序集</h3><ul><li>设<span class="math inline">\(≼\)</span>是<spanclass="math inline">\(A\)</span>中的偏序关系，若对任意的<spanclass="math inline">\(x,y∈A\)</span>，必有<span class="math inline">\(x≼ y\)</span>或<span class="math inline">\(y ≼ x\)</span>，即<spanclass="math inline">\(x\)</span>和<spanclass="math inline">\(y\)</span>可比较，则称<spanclass="math inline">\(≼\)</span>是<spanclass="math inline">\(A\)</span>中的线性次序关系或全序关系，又称全序或线性序。相应的偏序集<spanclass="math inline">\((A,≼)\)</span>称为线性序集或全序集</li><li>显然，任一全序集也是偏序集，其哈斯图为一条链，但是任一偏序集不一定是全序集合</li></ul><h3 id="最大小元素">最大（小）元素</h3><ul><li>设<span class="math inline">\(( X, ≼ )\)</span>是偏序集，<spanclass="math inline">\(Y\)</span>是<spanclass="math inline">\(X\)</span>的子集。若存在元素<spanclass="math inline">\(y∈ Y\)</span>,对于每一个<spanclass="math inline">\(y’ ∈ Y\)</span>，<ul><li>若有<span class="math inline">\(y’ ≼ y\)</span>，则称<spanclass="math inline">\(y\)</span>是集合<spanclass="math inline">\(Y\)</span>的最大元素</li><li>若有<span class="math inline">\(y ≼y’\)</span>，则称<spanclass="math inline">\(y\)</span>是集合<spanclass="math inline">\(Y\)</span>的最小元素</li></ul></li></ul><h3 id="性质-3">性质</h3><ul><li>设<span class="math inline">\(( X, ≼ )\)</span>是偏序集，<spanclass="math inline">\(Y\)</span>是<spanclass="math inline">\(X\)</span>的子集，如果<spanclass="math inline">\(Y\)</span>有最大（最小）元素，则必定是唯一的</li></ul><h3 id="极大小元素">极大（小）元素</h3><ul><li>设<span class="math inline">\(( X, ≼)\)</span>是偏序集，<spanclass="math inline">\(Y\)</span>是<spanclass="math inline">\(X\)</span>的子集，若<span class="math inline">\(y∈ Y\)</span>，且不存在<span class="math inline">\(y’ ∈ Y\)</span>，<spanclass="math inline">\(y≠ y’\)</span>，<ul><li>若有<span class="math inline">\(y ≼ y’\)</span>，则称<spanclass="math inline">\(y\)</span>是<spanclass="math inline">\(Y\)</span>的极大元素</li><li>若有<span class="math inline">\(y’ ≼ y\)</span>，则称<spanclass="math inline">\(y\)</span>是<spanclass="math inline">\(Y\)</span>的极小元素</li></ul></li></ul><h3 id="上下界">上（下）界</h3><ul><li>设<span class="math inline">\(( X, ≼ )\)</span>是偏序集，<spanclass="math inline">\(Y\subseteq X\)</span>，若<spanclass="math inline">\(x ∈ X\)</span>，使得对任意<spanclass="math inline">\(y’ ∈ Y\)</span>,<ul><li>若有<span class="math inline">\(y’≼x\)</span>，则称<spanclass="math inline">\(x\)</span>是<spanclass="math inline">\(Y\)</span>的上界</li><li>若有<span class="math inline">\(x ≼ y’\)</span>，则称<spanclass="math inline">\(x\)</span>是<spanclass="math inline">\(Y\)</span>的下界</li></ul></li></ul><h3 id="上下确界">上（下）确界</h3><ul><li>设<span class="math inline">\(( X, ≼ )\)</span>是偏序集，<spanclass="math inline">\(Y\)</span>是<spanclass="math inline">\(X\)</span>的子集。<ul><li><span class="math inline">\(x\)</span>是<spanclass="math inline">\(Y\)</span>的上界，若对<spanclass="math inline">\(Y\)</span>的任一上界<spanclass="math inline">\(x’\)</span>，都有<span class="math inline">\(x≼x’\)</span>，则称<span class="math inline">\(x\)</span>是<spanclass="math inline">\(Y\)</span>的上确界，记作<spanclass="math inline">\(LUB\)</span> <spanclass="math inline">\(Y\)</span></li><li><span class="math inline">\(x\)</span>是<spanclass="math inline">\(Y\)</span>的下界，若对于<spanclass="math inline">\(Y\)</span>的任一下界<spanclass="math inline">\(x’\)</span>，均有<span class="math inline">\(x’≼x\)</span>，则称<span class="math inline">\(x\)</span>是<spanclass="math inline">\(Y\)</span>的下确界,记作<spanclass="math inline">\(GLB\)</span> <spanclass="math inline">\(Y\)</span></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Math</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Math</tag>
      
      <tag>Discrete Mathematics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis的数据类型</title>
    <link href="/posts/14492/"/>
    <url>/posts/14492/</url>
    
    <content type="html"><![CDATA[<p>Redis 支持五种数据类型：</p><ul><li>string</li><li>hash</li><li>list</li><li>set</li><li>zset</li></ul><h2 id="string">String</h2><p>string 是最基本的类型。string 二进制安全，即可以包含任何数据。</p><p>string 一个键最大能存储512MB。</p><p>string类型的数据结构存储方式有三种<code>int</code>、<code>raw</code>、<code>embstr</code>：</p><h3 id="int">int</h3><p>Redis中规定假如存储的是<strong>整数型值</strong>，比如<code>set num 123</code>这样的类型，就会使用<code>int</code>的存储方式进行存储，在<code>redisObject</code>的<code>ptr属性</code>中就会保存该值。<img src="/posts/14492/int-1682306725947-10.png" class="" title="int"></p><h3 id="sds">SDS</h3><p>假如存储的<strong>字符串是一个字符串值并且长度大于32个字节</strong>就会使用SDS（simple dynamicstring）方式进行存储，并且<code>encoding</code>设置为<code>raw</code>；若是<strong>字符串长度小于等于32个字节</strong>就会将<code>encoding</code>改为<code>embstr</code>来保存字符串。</p><p>SDS称为<strong>简单动态字符串</strong>，对于SDS中的定义在Redis的源码中有的三个属性<code>int len</code>、<code>int free</code>、<code>char buf[]</code>。</p><p><code>len</code>保存了字符串的长度，<code>free</code>表示<code>buf数组</code>中未使用的字节数量，<code>buf数组</code>则是保存字符串的每一个字符元素。</p><p>因此当你在Redis中存储一个字符串<code>"Hello_World"</code>时，SDS的形式的<code>redisObject</code>结构图如下图所示： <img src="/posts/14492/SDS.png" class="" title="SDS"></p><h2 id="hash">Hash</h2><p>Redis hash 是一个<strong>键值(key=&gt;value)对集合</strong>。</p><p>Redis hash 是一个 string 类型的 field 和 value的<strong>映射表</strong>，hash 特别适合用于存储对象。</p><p>每个 hash 可以存储 <span class="math inline">\(2^{32} -1\)</span>键值对。</p><p>Hash对象的实现方式有两种分别是<code>ziplist</code>、<code>hashtable</code>，其中<code>hashtable</code>的存储方式<code>key</code>是String类型的，<code>value</code>也是以<code>key value</code>的形式进行存储。</p><h3 id="ziplist">ziplist</h3><p>压缩列表（ziplist）是<strong>一组连续内存块组成的顺序的数据结构</strong>，压缩列表能够节省空间，压缩列表中使用多个节点来存储数据。</p><p>压缩列表是列表键和哈希键底层实现的原理之一，<strong>压缩列表并不是以某种压缩算法进行压缩存储数据，而是它表示一组连续的内存空间的使用，节省空间</strong>，压缩列表的内存结构图如下：<img src="/posts/14492/ziplist.png" class="" title="ziplist"></p><p>其中：</p><ol type="1"><li><code>zlbytes</code>：4个字节的大小，记录压缩列表占用内存的字节数。</li><li><code>zltail</code>：4个字节大小，记录表尾节点距离起始地址的偏移量，用于快速定位到尾节点的地址。</li><li><code>zllen</code>：2个字节的大小，记录压缩列表中的节点数。</li><li><code>entry</code>：表示列表中的每一个节点。</li><li><code>zlend</code>：表示压缩列表的特殊结束符号<code>'0xFF'</code></li></ol><p>每一个<code>entry</code>节点又有三部分组成，分别是<code>previous_entry_length</code>、<code>encoding</code>、<code>content</code>。</p><ol type="1"><li><code>previous_entry_length</code>表示前一个节点<code>entry</code>的长度，可用于计算前一个节点的其实地址，因为他们的地址是连续的。</li><li><code>encoding</code>：这里保存的是<code>content</code>的内容类型和长度。</li><li><code>content</code>：<code>content</code>保存的是每一个节点的内容。<img src="/posts/14492/entry.png" class="" title="entry"></li></ol><h3 id="hashtable">hashtable</h3><p>hashtable是<strong>一种字典类型的数据结构</strong>，用于存储键值对，其中键是字符串类型，值可以是字符串、列表、集合或有序集合。hashtable的<strong>底层实现是一个数组，每个数组元素是一个链表，用于解决哈希冲突</strong>。当hashtable中的键值对数量变化时，会进行扩展或收缩操作，重新分配数组的大小和哈希值。hashtable是哈希键和集合键的底层实现之一，当这些键的元素数量和长度较大时，Redis会使用 hashtable 作为其存储方式。</p><h2 id="list">List</h2><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部或者尾部。</p><p>列表最多可存储 <span class="math inline">\(2^{32} - 1\)</span>元素。</p><p>Redis中的列表在3.2之前的版本是使用<code>ziplist</code>和<code>linkedlist</code>进行实现的。在3.2之后的版本就是引入了<code>quicklist</code>。</p><h3 id="linkedlist">linkedlist</h3><p>linkedlist是一个双向链表，他和普通的链表一样都是由指向前后节点的指针。插入、修改、更新的时间复杂度是O(1)，查询的时间复杂度是 O(n)。其特性为</p><ol type="1"><li>每一个节点都有指向前一个节点和后一个节点的指针。</li><li>头节点和尾节点的<code>prev</code>和<code>next</code>指针指向为<code>null</code>，所以链表是无环的。</li><li>链表有自己长度的信息，获取长度的时间复杂度为 O(1)。</li></ol><img src="/posts/14492/linkedlist.png" class="" title="linkedlist"><h3 id="quicklist">quicklist</h3><p>quicklist 实际上是 zipList 和 linkedList 的混合体，它将 linkedList按段切分，每一段使用 zipList 来紧凑存储，多个 zipList之间使用双向指针串接起来。</p><ol type="1"><li><code>prev</code>、<code>next</code>指向该节点的前后节点。</li><li><code>zl</code>指向该节点对应的 ziplist 结构。</li><li><code>sz</code>代表整个 ziplist 结构的大小。</li><li><code>encoding</code>代表采用的编码方式：<code>1</code>代表是原生的，<code>2</code>代表使用<code>LZF</code>进行压缩。</li><li><code>container</code>为 quickListNode节点<code>zl</code>指向的容器类型：<code>1</code>代表<code>none</code>，<code>2</code>代表使用<code>ziplist</code>存储数据。</li><li><code>recompress</code>代表这个节点之前是否是压缩节点，若是，则在使用压缩节点前先进行解压缩，使用后需要重新压缩，此外为<code>1</code>，代表是压缩节点。</li><li><code>attempted_compress</code>测试时使用。</li><li><code>extra</code>为预留。</li></ol><img src="/posts/14492/quicklist.png" class="" title="quicklist"><h2 id="set">Set</h2><p>Redis 的 Set 是 string 类型的无序集合。</p><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><p>集合中最大的成员数为 <span class="math inline">\(2^{32} -1\)</span>。</p><p>Redis 中列表和集合都可以用来存储字符串，但是 <strong>Set是不可重复的集合，而 List 列表可以存储相同的字符串</strong>。</p><p>Set 的底层实现是<code>hashtable</code>和<code>intset</code>。</p><h3 id="intset">intset</h3><p>inset也叫做<strong>整数集合</strong>，用于保存整数值的数据结构类型，它可以保存<code>int16_t</code>、<code>int32_t</code>或者<code>int64_t</code> 的整数值。</p><p>在整数集合中，有三个属性值<code>encoding、length、contents[]</code>，分别表示编码方式、整数集合的长度、以及元素内容，<code>length</code>就是记录<code>contents</code>里面的大小。</p><p>在整数集合新增元素的时候，若是超出了原集合的长度大小，就会对集合进行升级，具体的升级过程如下：</p><ol type="1"><li>首先扩展底层数组的大小，并且数组的类型为新元素的类型。</li><li>然后将原来的数组中的元素转为新元素的类型，并放到扩展后数组对应的位置。</li><li>整数集合升级后就不会再降级，编码会一直保持升级后的状态。</li></ol><img src="/posts/14492/intset.png" class="" title="intset"><h2 id="zset">Zset</h2><p>Redis zset 和 set 一样也是 string类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个 double 类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>zset 的成员是唯一的,但分数（score）却可以重复。</p><p>zset 的底层实现是<code>ziplist</code>和<code>skiplist</code>。</p><h3 id="skipset">skipset</h3><p>skiplist也叫做<strong>跳跃表</strong>，跳跃表是一种有序的数据结构，它通过每一个节点维持多个指向其它节点的指针，从而达到快速访问的目的。</p><p>skiplist 由如下几个特点：</p><ol type="1"><li>有很多层组成，由上到下节点数逐渐密集，最上层的节点最稀疏，跨度也最大。</li><li>每一层都是一个有序链表，只扫包含两个节点，头节点和尾节点。</li><li>每一层的每一个每一个节点都含有指向同一层下一个节点和下一层同一个位置节点的指针。</li><li>如果一个节点在某一层出现，那么该以下的所有链表同一个位置都会出现该节点。</li></ol><img src="/posts/14492/skiplist.png" class="" title="skiplist">]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>coding</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM的学习</title>
    <link href="/posts/60968/"/>
    <url>/posts/60968/</url>
    
    <content type="html"><![CDATA[<figure><img src="vim键位.gif" alt="vim键位" /><figcaption aria-hidden="true">vim键位</figcaption></figure><h2 id="vim的哲学">Vim的哲学</h2><p>在编程时，您大部分时间都花在阅读/编辑上，而不是写作上。因此，Vim是一个模态编辑器：它有不同的插入文本和操作文本的模式。Vim是可编程的（使用 Vimscript 以及 Python 等其他语言），并且 Vim的界面本身就是一种编程语言：击键（具有助记名称）是命令，并且这些命令是可组合的。Vim避免使用鼠标，因为它太慢了；Vim甚至避免使用箭头键，因为它需要太多的移动。</p><p>最终结果是一个可以匹配您思考速度的编辑器。</p><h2 id="模态编辑">模态编辑</h2><p>Vim有多种运行模式</p><figure><img src="vim工作模式.png" alt="vim运行模式" /><figcaption aria-hidden="true">vim运行模式</figcaption></figure><ul><li><code>Normal</code> 用于在文件中移动并进行编辑</li><li><code>Insert</code> 用于插入文本，按 <code>i</code> 键</li><li><code>Replace</code> 用于替换文本，按 <code>R</code> 键</li><li><code>Visual</code> 用于选择文本块，可视模式为 <code>v</code>键，可视行模式为<code>V</code> 键，可视块模式为<code>&lt;C-v&gt;</code>键</li><li><code>Command-line</code> 用于运行命令，按 <code>:</code> 键</li></ul><p>击键在不同的操作模式下具有不同的含义。例如，字母 <code>x</code>在插入模式下只会插入一个文字字符 'x'，但在普通模式下，它会删除光标下的字符，而在可视模式下，它会删除选择的字符。</p><h2 id="缓冲区选项卡和窗口">缓冲区，选项卡和窗口</h2><p>Vim 维护一组打开的文件，称为"缓冲区"。一个 Vim会话有许多选项卡，每个选项卡都有许多窗口( 拆分窗格)。每个窗口显示一个缓冲区。与您熟悉的其他程序( 如网络浏览器)不同，缓冲区和窗口之间不存在一对一的对应关系，窗户只是视图。一个给定的缓冲区可以在多个窗口中打开，甚至在同一个选项卡中。这非常方便，例如，同时查看文件的两个不同部分。</p><p>默认情况下，Vim 打开一个选项卡，其中包含一个窗口。</p><h2 id="底线命令模式">底线命令模式</h2><p>命令模式可以通过在普通模式下输入<code>:</code>来进入。按下<code>:</code>后，光标会跳到屏幕底部的命令行，你可以在那里输入不同的命令。这种模式有很多功能，包括：</p><ul><li><code>:q</code> 退出（关闭窗口）</li><li><code>:w</code> 保存（“写入”）</li><li><code>:wq</code> 保存并退出</li><li><code>:e</code> {文件名} 打开文件进行编辑</li><li><code>:ls</code> 显示打开的缓冲区</li><li><code>:help</code> {主题} 打开帮助</li><li><code>:help :w</code> 打开:w命令的帮助</li><li><code>:help w</code> 打开w移动的帮助</li></ul><p>例如，如果你想打开一个名为<code>test.txt</code>的文件，你可以在命令模式下输入<code>:e test.txt</code>，然后按回车键。如果你想保存当前文件，你可以输入<code>:w</code>，然后按回车键。如果你想查看Vim的基本用法，你可以输入<code>:help</code>，然后按回车键。</p><h2 id="移动">移动</h2><ul><li><code>h</code> 或 向左箭头键 <code>←</code>光标向左移动一个字符</li><li><code>j</code> 或 向下箭头键 <code>↓</code>光标向下移动一个字符</li><li><code>k</code> 或 向上箭头键 <code>↑</code>光标向上移动一个字符</li><li><code>l</code> 或 向右箭头键 <code>→</code>光标向右移动一个字符</li><li><code>Ctrl + f</code> 屏幕向下移动<strong>一页</strong>，相当于<code>Page Down</code> 按键 (<strong>常用</strong>)</li><li><code>Ctrl + b</code> 屏幕向上移动一页，相当于 <code>Page Up</code>按键 (<strong>常用</strong>)</li><li><code>Ctrl + d</code> 屏幕向下移动<strong>半页</strong></li><li><code>Ctrl + u</code> 屏幕向上移动<strong>半页</strong></li><li><code>+</code> 光标移动到<strong>非空格符</strong>的下一行</li><li><code>-</code> 光标移动到<strong>非空格符</strong>的上一行</li><li><code>n&lt;space&gt;</code> 那个 <code>n</code> 表示数字，例如 20。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如<code>20&lt;space&gt;</code> 则光标会向后面移动 20 个字符距离。</li><li><code>0</code> 或功能键<code>Home</code>移动到这一行的<strong>最前面</strong>字符处 (<strong>常用</strong>)</li><li><code>$</code> 或功能键<code>End</code>移动到这一行的<strong>最后面</strong>字符处(<strong>常用</strong>)</li><li><code>H</code>光标移动到这个屏幕的<strong>最上方</strong>那一行的第一个字符</li><li><code>M</code>光标移动到这个屏幕的<strong>中央</strong>那一行的第一个字符</li><li><code>L</code>光标移动到这个屏幕的<strong>最下方</strong>那一行的第一个字符</li><li><code>G</code> 移动到这个档案的最后一行(<strong>常用</strong>)</li><li><code>nG</code> <code>n</code> 为数字。移动到这个档案的第 n 行。例如<code>20G</code> 则会移动到这个档案的第 20 行(可配合:<code>set nu</code>)</li><li><code>gg</code> 移动到这个档案的第一行，相当于 <code>1G</code>(<strong>常用</strong>)</li><li><code>n&lt;Enter&gt;</code> <code>n</code> 为数字。光标向下移动 n行(<strong>常用</strong>)</li></ul><h2 id="搜索替换">搜索替换</h2><ul><li><code>/word</code> 向光标之下寻找一个名称为 <code>word</code>的字符串。例如要在档案内搜寻 <code>vbird</code> 这个字符串，就输入<code>/vbird</code> 即可！ (<strong>常用</strong>)</li><li><code>?word</code> 向光标之上寻找一个字符串名称为 <code>word</code>的字符串。</li><li><code>n</code> 这个 <code>n</code>是英文按键。代表<strong>重复</strong>前一个搜寻的动作。举例来说，如果刚刚我们执行 <code>/vbird</code> 去向下搜寻 <code>vbird</code>这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 <code>vbird</code>的字符串。如果是执行 <code>?vbird</code> 的话，那么按下 n则会向上继续搜寻名称为 <code>vbird</code> 的字符串！</li><li><code>N</code> 这个 <code>N</code> 是英文按键。与 <code>n</code>刚好相反，为<strong>反向</strong>进行前一个搜寻动作。 例如<code>/vbird</code> 后，按下 <code>N</code>则表示<strong>向上</strong>搜寻 <code>vbird</code> 。</li></ul><h2 id="删除复制与粘贴">删除、复制与粘贴</h2><ul><li><code>x</code>, <code>X</code> 在一行字当中，<code>x</code>为向后删除一个字符 (相当于 <code>del</code> 按键)， <code>X</code>为向前删除一个字符(相当于 <code>backspace</code> 亦即是退格键)(<strong>常用</strong>)</li><li><code>nx</code> <code>n</code> 为数字，连续向后删除 n 个字符。</li><li><code>dd</code> 剪切游标所在的那一整行(<strong>常用</strong>)，用<code>p</code>/<code>P</code> 可以粘贴。</li><li><code>ndd</code> <code>n</code> 为数字。剪切光标所在的向下 n行，例如 <code>20dd</code> 则是剪切 20 行(<strong>常用</strong>)，用<code>p</code>/<code>P</code> 可以粘贴。</li><li><code>d1G</code> 删除光标所在到第一行的所有数据</li><li><code>dG</code> 删除光标所在到最后一行的所有数据</li><li><code>d$</code> 删除游标所在处，到该行的最后一个字符</li><li><code>d0</code> 那个是数字的 0，删除游标所在处，到该行的最前面一个字符</li><li><code>yy</code> 复制游标所在的那一行(<strong>常用</strong>)</li><li><code>nyy</code> <code>n</code> 为数字。复制光标所在的向下 n行，例如 <code>20yy</code> 则是复制 20 行(<strong>常用</strong>)</li><li><code>y1G</code> 复制游标所在行到第一行的所有数据</li><li><code>yG</code> 复制游标所在行到最后一行的所有数据</li><li><code>y0</code> 复制光标所在的那个字符到该行行首的所有数据</li><li><code>y$</code> 复制光标所在的那个字符到该行行尾的所有数据</li><li><code>p</code>, <code>P</code> <code>p</code>为将已复制的数据在光标下一行贴上，<code>P</code> 则为贴在游标上一行！(<strong>常用</strong>)</li><li><code>J</code> 将光标所在行与下一行的数据结合成同一行</li><li><code>c</code> 重复删除多个数据，例如 <code>10cj</code> 表示向下删除10 行</li><li><code>u</code> 复原前一个动作。(<strong>常用</strong>)</li><li><code>Ctrl + r</code> 重做上一个动作。(<strong>常用</strong>)</li></ul><h2 id="补充">补充</h2><table><thead><tr class="header"><th style="text-align: left;">进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">i, I</td><td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr class="even"><td style="text-align: left;">a, A</td><td>进入输入模式(Insert mode)： a为『从目前光标所在的下一个字符处开始输入』， A为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr class="odd"><td style="text-align: left;">o, O</td><td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o为在目前光标所在的下一行处输入新的一行； O为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr class="even"><td style="text-align: left;">r, R</td><td>进入取代模式(Replace mode)： r只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下ESC 为止；(常用)</td></tr><tr class="odd"><td style="text-align: left;">上面这些按键中，在 vi画面的左下角处会出现『--INSERT--』或『--REPLACE--』的字样。由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时，一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td><td></td></tr><tr class="even"><td style="text-align: left;">[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><table><thead><tr class="header"><th style="text-align: left;">指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr class="even"><td style="text-align: left;">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入，还是跟你对该档案的档案权限有关啊！</td></tr><tr class="odd"><td style="text-align: left;">:q</td><td>离开 vi (常用)</td></tr><tr class="even"><td style="text-align: left;">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr class="odd"><td style="text-align: left;">注意一下啊，那个惊叹号 (!) 在 vi当中，常常具有『强制』的意思～</td><td></td></tr><tr class="even"><td style="text-align: left;">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr class="odd"><td style="text-align: left;">ZZ</td><td>这是大写的 Z喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td></tr><tr class="even"><td style="text-align: left;">ZQ</td><td>不保存，强制退出。效果等同于 <strong>:q!</strong>。</td></tr><tr class="odd"><td style="text-align: left;">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr class="even"><td style="text-align: left;">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』这个档案内容加到游标所在行后面</td></tr><tr class="odd"><td style="text-align: left;">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr class="even"><td style="text-align: left;">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls/home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td></tr></tbody></table><table><thead><tr class="header"><th style="text-align: left;">vim 环境的变更</th><th></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr class="even"><td style="text-align: left;">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><h2 id="参考资料">参考资料</h2><p><a href="https://missing.csail.mit.edu/2020/editors/">Editors (Vim) ·Missing Semester (mit.edu)</a></p><p><a href="https://www.runoob.com/linux/linux-vim.html">Linux vi/vim |菜鸟教程 (runoob.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
    </categories>
    
    
    <tags>
      
      <tag>coding</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TEST</title>
    <link href="/posts/59964/"/>
    <url>/posts/59964/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/posts/59964/1.jpg" class="" title="测试图片1"><figure><img src="1.jpg" alt="测试图片2" /><figcaption aria-hidden="true">测试图片2</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
