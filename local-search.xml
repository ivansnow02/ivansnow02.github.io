<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>the best way for a student to make friends</title>
    <link href="/posts/42679/"/>
    <url>/posts/42679/</url>
    
    <content type="html"><![CDATA[<p>Friendship is an essential aspect of a student’s life that fosterspersonal growth and emotional well-being by providing support,encouragement, and companionship. However, making friends can bedaunting for some students, especially when seeking meaningfulconnections. Fortunately, there are some effective strategies that youcan use to make friends.</p><p>The first step is <strong>to be open and approachable</strong>. Forexample, a simple smile can break the ice between strangers. A friendlyattitude creates a comfortable atmosphere and makes others feelwelcomed. By being approachable, you signal to others that you are opento conversations and building connections.</p><p><strong>Participating actively in extracurricular activities andclubs</strong> is another proven way of making friends that enrichesyour academic and social life. By engaging in shared interests, you willbond with like-minded people and nurture new friendships.</p><p>It’s important to remember that <em>a friend without faults willnever be found</em>. <strong>Try to be patient and tolerant of diversityamong people</strong>. Do not judge people based on appearance,background, or opinions. Try to learn from others and respectdifferences.</p><p><em>Be slow in choosing a friend</em>. Building meaningfulconnections requires <strong>patience and persistence</strong>. Do notbe discouraged if friendships do not form immediately. Continue puttingyourself in social situations and engaging with others.</p><p><em>The only way to have a friend is to be one</em>. I believe thebest way for students to make friends is to become their best selves.Therefore, by following these strategies, you will not only form lastingbonds and relationships, but also form a whole new self.</p>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
    <tags>
      
      <tag>English</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离散数学复习</title>
    <link href="/posts/12732/"/>
    <url>/posts/12732/</url>
    
    <content type="html"><![CDATA[<p>思维导图在此：<ahref="https://ivansnow02.github.io/DiscreteMathMindMap.html">思维导图</a></p><h1 id="集合论">集合论</h1><h2 id="集合的基本概念">集合的基本概念</h2><h3 id="集合的定义">集合的定义</h3><ul><li>具有某种特定性质事物的全体，通常，用大写的英文字母<spanclass="math inline">\(A, B, C,……\)</span>表示集合</li></ul><h3 id="集合的元素">集合的元素</h3><ul><li>组成一个集合的那些对象或单元称为这个集合的元素，通常，用小写的英文字母<spanclass="math inline">\(a\)</span>,<spanclass="math inline">\(b\)</span>,<spanclass="math inline">\(c\)</span>,…，或者<spanclass="math inline">\(a_1\)</span>,<spanclass="math inline">\(a_2\)</span>,<spanclass="math inline">\(b_1\)</span>,<spanclass="math inline">\(b_2\)</span>…表示集合中的元素</li></ul><h3 id="属于">属于</h3><ul><li>设A是一个集合，a是集合A中的元素，记以<span class="math inline">\(a\in A\)</span>，读作<span class="math inline">\(a\)</span>属于<spanclass="math inline">\(A\)</span>；若<spanclass="math inline">\(a\)</span>不是集合<spanclass="math inline">\(A\)</span>中的元素，则记以<spanclass="math inline">\(a \notin A\)</span>，读作<spanclass="math inline">\(a\)</span>不属于<spanclass="math inline">\(A\)</span></li></ul><h3 id="有限集">有限集</h3><ul><li>包含有限个元素的集合，称为有限集或有穷集(finite set)</li></ul><h3 id="无限集">无限集</h3><ul><li>包含无限个元素的集合，称为无限集或无穷集(infinite set )</li></ul><h3 id="空集">空集</h3><ul><li>约定，存在一个没有任何元素的集合，称为空集(empty set) ，记为<spanclass="math inline">\(\varnothing\)</span>，有时也用<spanclass="math inline">\(\{\}\)</span>来表示</li></ul><h3 id="全集">全集</h3><ul><li><p>约定，所讨论的对象的全体称为全集(universal set)，记作<spanclass="math inline">\(E\)</span>或<spanclass="math inline">\(U\)</span>，我们所讨论的集合都是全集的子集</p></li><li><p><strong>全集是相对的</strong></p></li></ul><h3 id="集合的元素数">集合的元素数</h3><ul><li>设<span class="math inline">\(A\)</span>是有穷集合，<spanclass="math inline">\(A\)</span>中元素的个数称为集合<spanclass="math inline">\(A\)</span>的元素数，记为<spanclass="math inline">\(|A|\)</span>，<strong>特别，<spanclass="math inline">\(|\varnothing|=0\)</span></strong></li></ul><h3 id="集合的表示法">集合的表示法</h3><h4 id="列举法">列举法</h4><ul><li>将集合中的元素一一列举，或列出足够多的元素以反映集合中元素的特征</li></ul><h4 id="描述法">描述法</h4><ul><li>通过描述集合中元素的共同特征来表示集合</li></ul><h4 id="文氏图">文氏图</h4><ul><li>用一个大的矩形表示全集，在矩形内画一些圆或其它的几何图形，来表示集合，有时也用一些点来表示集合中的特定元素</li></ul><h3 id="集合的特征">集合的特征</h3><h4 id="确定性">确定性</h4><ul><li>任何一个对象，或者是这个集合的元素，或者不是，二者必居其一</li></ul><h4 id="互异性">互异性</h4><ul><li>集合中任何两个元素都是不同的，即集合中不允许出现重复的元素</li></ul><h4 id="无序性">无序性</h4><ul><li>集合与其中的元素的顺序无关</li></ul><h4 id="多样性">多样性*</h4><ul><li>集合中的元素可以是任意的对象，相互独立，不要求一定要具备明显的共同特征</li></ul><h2 id="集合间的关系">集合间的关系</h2><h3 id="集合相等">集合相等</h3><ul><li>当两个集合<span class="math inline">\(A\)</span>和<spanclass="math inline">\(B\)</span>的元素完全一样，即<spanclass="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>实际上是同一个集合时，则称集合<spanclass="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>相等，记以<spanclass="math inline">\(A=B\)</span></li></ul><h3 id="集合包含">集合包含</h3><h4 id="子集">子集</h4><ul><li>设<span class="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>是两个集合，若<spanclass="math inline">\(A\)</span>的元素都是<spanclass="math inline">\(B\)</span>的元素，则称<spanclass="math inline">\(A\)</span>是<spanclass="math inline">\(B\)</span>的子集(subset) ，也称<spanclass="math inline">\(B\)</span>包含<spanclass="math inline">\(A\)</span>，或<spanclass="math inline">\(A\)</span>包含于<spanclass="math inline">\(B\)</span>，记以<span class="math inline">\(A\subseteq B\)</span>，或<span class="math inline">\(B \supseteqA\)</span></li></ul><h4 id="真子集">真子集</h4><ul><li>若<span class="math inline">\(A \subseteq B\)</span>，且<spanclass="math inline">\(A \neq B\)</span>，则称<spanclass="math inline">\(A\)</span>是<spanclass="math inline">\(B\)</span>的真子集(proper subset)，也称<spanclass="math inline">\(B\)</span>真包含<spanclass="math inline">\(A\)</span>，或<spanclass="math inline">\(A\)</span>真包含于<spanclass="math inline">\(B\)</span>，记以<span class="math inline">\(A\subset B\)</span>，或<span class="math inline">\(B \supsetA\)</span></li></ul><h4 id="重要结论">重要结论</h4><ul><li>对任意集合<span class="math inline">\(A\)</span>, 有<spanclass="math inline">\(A ⊆ A\)</span></li><li><spanclass="math inline">\(\varnothing\)</span>是任意集合的子集，且空集是唯一的</li><li>对于任意两个集合<span class="math inline">\(A\)</span>、<spanclass="math inline">\(B\)</span>，<spanclass="math inline">\(A=B\)</span>当且仅当<spanclass="math inline">\(A⊆B\)</span>且<span class="math inline">\(B⊆A\)</span>。</li></ul><h3 id="幂集">幂集</h3><h4 id="定义">定义</h4><ul><li>设<span class="math inline">\(A\)</span>是集合，<spanclass="math inline">\(A\)</span>的所有子集为元素组成的集合称为<spanclass="math inline">\(A\)</span>的幂集，记以<spanclass="math inline">\(ρ(A)\)</span>或<spanclass="math inline">\(2^A\)</span>，<spanclass="math inline">\(ρ(A)=\{S|S ⊆ A\}\)</span></li></ul><h4 id="性质">性质</h4><ul><li>若A为有穷集，<span class="math inline">\(|A|=n\)</span>，则<spanclass="math inline">\(|2^A | = |ρ(A)|= C_n^0 + C_n^1 + … + C_n^n=2^n\)</span></li><li><span class="math inline">\(x∈ρ(A)\)</span>当且仅当<spanclass="math inline">\(x⊆A\)</span></li><li>设<span class="math inline">\(A\)</span>、<spanclass="math inline">\(B\)</span>是两个集合，<spanclass="math inline">\(A⊆B\)</span>当且仅当<spanclass="math inline">\(ρ(A)⊆ρ(B)\)</span></li></ul><h2 id="集合运算">　集合运算</h2><h3 id="集合的并集">集合的并集</h3><ul><li>设<span class="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>是两个集合。所有属于<spanclass="math inline">\(A\)</span>或者属于<spanclass="math inline">\(B\)</span>的元素组成的集合，称为<spanclass="math inline">\(A\)</span>和<spanclass="math inline">\(B\)</span>的并集，记以<spanclass="math inline">\(A∪B\)</span>。即<spanclass="math inline">\(A∪B=\{x|x∈A或x∈B\}\)</span></li></ul><h3 id="集合的交集">集合的交集</h3><ul><li>设<span class="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>是两个集合。由属于<spanclass="math inline">\(A\)</span>又属于<spanclass="math inline">\(B\)</span>的元素组成的集合，称为<spanclass="math inline">\(A\)</span>和<spanclass="math inline">\(B\)</span>的交集，记以<spanclass="math inline">\(A∩B\)</span>。即<spanclass="math inline">\(A∩B=\{x|x∈A且x∈B\}\)</span></li></ul><h3 id="并集和交集的推广">并集和交集的推广</h3><ul><li><p>设<span class="math inline">\(A_1\)</span>，<spanclass="math inline">\(A_2\)</span>，…，<spanclass="math inline">\(A_n\)</span>是<spanclass="math inline">\(n\)</span>个集合，则：<spanclass="math inline">\(A_1∪A_2∪…∪A_n\)</span>，简记为<spanclass="math inline">\(\bigcup\limits_{i=1}^nA_i\)</span></p></li><li><p><span class="math inline">\(A_1∩A_2∩…∩A_n\)</span>，简记为<spanclass="math inline">\(\bigcap\limits_{i=1}^n A_i\)</span></p></li></ul><h3 id="集合的补集">集合的补集</h3><ul><li><p>设<span class="math inline">\(A\)</span>是一个集合，全集<spanclass="math inline">\(E\)</span>与<spanclass="math inline">\(A\)</span>的差集称为<spanclass="math inline">\(A\)</span>的补集，记以<spanclass="math inline">\(\sim A\)</span>，即<spanclass="math inline">\(\sim A=E-A\)</span></p></li><li><p>特别， <span class="math inline">\(\sim\varnothing=E\)</span>，<span class="math inline">\(\sim E=\varnothing\)</span></p></li></ul><h3 id="集合的差集">集合的差集</h3><ul><li>设<span class="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>是两个集合。由属于集合<spanclass="math inline">\(A\)</span>而不属于集合<spanclass="math inline">\(B\)</span>的所有元素组成的集合，称为<spanclass="math inline">\(A\)</span>与<spanclass="math inline">\(B\)</span>的差集，记以<spanclass="math inline">\(A-B\)</span>。即<spanclass="math inline">\(A-B=\{x|x∈A且x ∉B\}\)</span></li></ul><h3 id="集合的对称差">集合的对称差</h3><ul><li>设<span class="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>是两个集合。则<spanclass="math inline">\(A\)</span>与<spanclass="math inline">\(B\)</span>的和(对称差),记以<spanclass="math inline">\(A⊕B\)</span>, 定义为<spanclass="math inline">\(A⊕B=(A-B)∪(B-A)\)</span>，即<spanclass="math inline">\(A \oplus B=\{x|(x \in A)且(x \notin B)或(x \inB)且(x \notin A)\}\)</span></li><li><span class="math inline">\(A\)</span>与<spanclass="math inline">\(B\)</span>的对称差还有一个等价的定义，即<spanclass="math inline">\(A⊕B=(A∪B)-(A∩B)\)</span></li></ul><h3 id="集合的运算律">集合的运算律</h3><h4 id="等幂律">等幂律</h4><ul><li><span class="math inline">\(A∩A=A\)</span></li><li><span class="math inline">\(A∪A=A\)</span></li></ul><h4 id="交换律">交换律</h4><ul><li><span class="math inline">\(A∩B=B∩A\)</span></li><li><span class="math inline">\(A∪B=B∪A\)</span></li></ul><h4 id="结合律">结合律</h4><ul><li><span class="math inline">\((A∩B)∩C=A∩(B∩C)\)</span></li><li><span class="math inline">\((A∪B)∪C=A∪(B∪C)\)</span></li></ul><h4 id="分配律">分配律</h4><ul><li><span class="math inline">\(A∩(B∪C)=(A∩B)∪(A∩C)\)</span></li><li><span class="math inline">\(A∪(B∩C)=(A∪B)∩(A∪C)\)</span></li></ul><h4 id="吸收律">吸收律</h4><ul><li><span class="math inline">\(A∩(A∪B)=A\)</span></li><li><span class="math inline">\(A∪(A∩B)=A\)</span></li></ul><h4 id="互补律">互补律</h4><ul><li><span class="math inline">\(\sim A∩A= \varnothing\)</span></li><li><span class="math inline">\(\sim A∪A=E\)</span></li></ul><h4 id="德摩根律">德摩根律</h4><ul><li><span class="math inline">\(\sim (A∩B)=\sim A ∪ \sim B\)</span></li><li><span class="math inline">\(\sim(A∪B)=\sim A ∩ \sim B\)</span></li></ul><h4 id="同一律">同一律</h4><ul><li><span class="math inline">\(E∩A=A\)</span></li><li><span class="math inline">\(\varnothing ∪A=A\)</span></li></ul><h4 id="零一律">零一律</h4><ul><li><p><spanclass="math inline">\(\varnothing∩A=\varnothing\)</span></p></li><li><p><span class="math inline">\(E∪A=E\)</span></p></li></ul><h4 id="双重否定律">双重否定律</h4><ul><li><span class="math inline">\(\sim (\sim A)=A\)</span></li></ul><h4 id="其他算律">其他算律</h4><ul><li><span class="math inline">\(A-B=A∩ \sim B\)</span></li><li><spanclass="math inline">\(A⊕B=(A-B)∪(B-A)=(A∪B)-(A∩B)\)</span></li><li><span class="math inline">\(A⊕A=\varnothing\)</span></li><li><span class="math inline">\(\sim\varnothing=E\)</span></li><li><span class="math inline">\(\sim E=\varnothing\)</span></li></ul><h2 id="有限集合的计数">有限集合的计数</h2><h3 id="容斥原理">容斥原理</h3><ul><li><span class="math inline">\(|A∪B|=|A|+|B|-|A∩B|\)</span></li><li><spanclass="math inline">\(|A∪B∪C|=|A|+|B|+|C|-|A∩B|-|A∩C|-|B∩C|+|A∩B∩C|\)</span></li><li>设<span class="math inline">\(A_1，A_2，…，A_n\)</span>是<spanclass="math inline">\(n\)</span>个集合，则：<spanclass="math inline">\(|\bigcup\limits_{i=1}^nA_i|=\sum\limits_{i=1}^n|A_i|-\sum\limits_{i&lt;j}^n|A_i\capA_j|+\sum\limits_{i&lt;j&lt;k}^n|A_i\cap A_j \capA_k|+...+(-1)^{n-1}|A_1 \cap A_2 \cap A_3 \cap ...\capA_n|\)</span>称为包含排斥原理，简称容斥原理</li></ul><h2 id="集合恒等式的证明">集合恒等式的证明</h2><h3 id="基本定义法">基本定义法</h3><h3 id="公式等价法">公式等价法</h3><h4 id="基本原则">基本原则</h4><ul><li>将集合运算表达式中其他运算符号转换为∩和∪；</li><li>将补运算作用到单一集合上；</li><li>左<span class="math inline">\(\implies\)</span>右，右<spanclass="math inline">\(\implies\)</span>左，左<spanclass="math inline">\(\implies\)</span>中间式，右<spanclass="math inline">\(\implies\)</span>中间式；</li><li>根据基本运算符号的定义和运算定律转换。</li></ul><h3 id="集合成员表法">集合成员表法*</h3><h1 id="关系">关系</h1><h2 id="序偶和笛卡尔积">序偶和笛卡尔积</h2><h3 id="序偶">序偶</h3><h4 id="定义-1">定义</h4><ul><li>对于有序<span class="math inline">\(n\)</span>元组，当<spanclass="math inline">\(n=2\)</span>时，我们将其称作有序二元组，也称作有序对,或序偶。</li></ul><h4 id="特点">特点</h4><ul><li>若<span class="math inline">\(a≠b\)</span>,则<spanclass="math inline">\((a,b)≠(b,a)\)</span></li><li>两个有序对<span class="math inline">\((a,b)\)</span>和<spanclass="math inline">\((c,d)\)</span>相等当且仅当<spanclass="math inline">\(a=c\)</span>，<spanclass="math inline">\(b=d\)</span></li></ul><h4 id="特征">特征</h4><ul><li>成对出现、具有一定的顺序</li></ul><h3 id="笛卡尔积">笛卡尔积</h3><h4 id="定义-2">定义</h4><ul><li>设<span class="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>是两个集合，所有有序对<spanclass="math inline">\((x, y)\)</span>做成的集合<spanclass="math inline">\((其中x∈A，y∈B)\)</span>，称为<spanclass="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>的笛卡儿积，记为<spanclass="math inline">\(A×B\)</span>，<spanclass="math inline">\(A×B=\{(x，y)|x∈A且y∈B\}\)</span></li><li>设<span class="math inline">\(A_1,A_2 , ...,A_n\)</span>是<spanclass="math inline">\(n\)</span>个集合，由所有有序<spanclass="math inline">\(n\)</span>元组(<spanclass="math inline">\(a_1,a_2,…,a_n\)</span>)组成的集合<spanclass="math inline">\((其中ai∈A_i，i=1,2, … ,n)\)</span>，称为<spanclass="math inline">\(A_1,A_2,...,A_n\)</span>的笛卡儿积，记以<spanclass="math inline">\(A_1×A_2 ×...×A_n\)</span>，<spanclass="math inline">\(A_1×A_2 ×...×A_n=\{(a_1,a_2 ,… ,a_n) |a_i∈A_i，i=1,2, … ,n \}\)</span></li></ul><h4 id="性质-1">性质</h4><ul><li><p><span class="math inline">\(|A×B|=|A|× |B|\)</span></p></li><li><p>对任意集合<span class="math inline">\(A\)</span>，有<spanclass="math inline">\(A×\varnothing=\varnothing\)</span>，<spanclass="math inline">\(\varnothing \times A=\varnothing\)</span></p></li><li><p>笛卡儿积运算<strong>不满足</strong>交换律，即<spanclass="math inline">\(A×B≠B×A\)</span></p></li><li><p>笛卡儿积运算<strong>不满足</strong>结合律，即<spanclass="math inline">\((A×B)×C≠A×(B×C)\)</span></p></li><li><p>笛卡儿积运算对并和交运算<strong>满足</strong>分配律， 即</p><ul><li><span class="math inline">\(A×(B∪C)=(A×B)∪(A×C)\)</span></li><li><span class="math inline">\((B∪C)×A=(B×A)∪(C×A)\)</span></li><li><span class="math inline">\(A×(B∩C)=(A×B)∩(A×C)\)</span></li><li><span class="math inline">\((B∩C)×A=(B×A)∩(C×A)\)</span></li></ul></li><li><p>设<span class="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>，<spanclass="math inline">\(C\)</span>，<spanclass="math inline">\(D\)</span>是集合，若<spanclass="math inline">\(A⊆C\)</span>且<spanclass="math inline">\(B⊆D\)</span>，则<span class="math inline">\(A×B ⊆C×D\)</span></p></li></ul><h2 id="二元关系">二元关系</h2><h3 id="定义-3">定义</h3><ul><li>给定任意集合<span class="math inline">\(A\)</span>和<spanclass="math inline">\(B\)</span>，若<spanclass="math inline">\(R⊆A×B\)</span>，则称<spanclass="math inline">\(R\)</span>为从<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>的二元关系，特别在<spanclass="math inline">\(A=B\)</span>时，称<spanclass="math inline">\(R\)</span>为<spanclass="math inline">\(A\)</span>上的二元关系</li></ul><h3 id="补充">补充</h3><ul><li><strong>关系是一个集合，是序偶的集合</strong></li><li><span class="math inline">\(R\)</span>是有序对的集合。若<spanclass="math inline">\((x,y)∈R\)</span>，则也表示为<spanclass="math inline">\(x R y\)</span>，即<spanclass="math inline">\((x,y)∈ R \iff x R y\)</span><ul><li>若<span class="math inline">\(R =\varnothing\)</span>，则称<spanclass="math inline">\(R\)</span>为<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>上<strong>空关系</strong></li><li>若<span class="math inline">\(R =A×B\)</span>，称<spanclass="math inline">\(R\)</span>为<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>上<strong>全域关系</strong></li><li>称<span class="math inline">\(R=\{(x,x)|x∈A\}\)</span>为<spanclass="math inline">\(A\)</span>上的<strong>恒等关系</strong>，记为<spanclass="math inline">\(I_A\)</span></li></ul></li><li>当集合<span class="math inline">\(A,B\)</span>都是有限集时，<spanclass="math inline">\(A×B\)</span>共有<spanclass="math inline">\(2^{|A|\cdot|B|}\)</span>个不同的子集， 即从<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>的不同关系共有<spanclass="math inline">\(2^{|A|\cdot|B|}\)</span>个</li></ul><h3 id="定义域值域和域">定义域、值域和域</h3><h4 id="定义-4">定义</h4><ul><li>令<span class="math inline">\(R \subseteq A \times B\)</span>，且<span class="math inline">\(\begin{cases} D (R) = \{ x | (∃y) (x R y )\}\\R (R) = \{ y | (∃x) (x R y ) \}\\F(R) =D(R)∪R(R)\end{cases}\)</span>则称<spanclass="math inline">\(D(R)\)</span>、<spanclass="math inline">\(R(R)\)</span>和<spanclass="math inline">\(F(R)\)</span>分别是二元关系<spanclass="math inline">\(R\)</span>的定义域、值域和域，显然<spanclass="math inline">\(D(R) ⊆ A\)</span>，<spanclass="math inline">\(R(R) ⊆ B\)</span></li></ul><h3 id="关系矩阵与关系图">关系矩阵与关系图</h3><h4 id="关系矩阵">关系矩阵</h4><ul><li>给定集合<span class="math inline">\(A=\{a_1,a_2,···,a_m\}\)</span>和<span class="math inline">\(B=\{b_1,b_2,···,b_n\}\)</span>，且<span class="math inline">\(R⊆A×B\)</span>，若<spanclass="math inline">\(r_{ij}=\begin{cases} 1 ,&amp; {a_i R b_j}\\0,&amp; 否则 \end{cases}\)</span> 则称矩阵<spanclass="math inline">\(M_R=(r _{i j})\)</span>为<spanclass="math inline">\(R\)</span>的关系矩阵</li></ul><h4 id="关系图">关系图</h4><ul><li>给定集合<span class="math inline">\(A=\{a_1,a_2,···,a_m\}\)</span>和<span class="math inline">\(A\)</span>上的关系<spanclass="math inline">\(R\)</span>，且<spanclass="math inline">\(R⊆A×A\)</span>，若：以<spanclass="math inline">\(A\)</span>中的元素为结点；对<spanclass="math inline">\(R\)</span>中的元素<span class="math inline">\((a_i,a_j )\)</span>, 以<spanclass="math inline">\(a_i\)</span>为起点,以<spanclass="math inline">\(a_j\)</span>为终点,作有向边所构成的图，则称该图为<spanclass="math inline">\(R\)</span>的关系图</li></ul><h2 id="关系运算">关系运算</h2><h3 id="关系的并交补差">关系的并、交、补、差</h3><ul><li>关系是序偶(有序对)的集合，因此可以对关系进行运算。 若<spanclass="math inline">\(R, S⊆A×B\)</span>，则<spanclass="math inline">\(R∪S\)</span>，<span class="math inline">\(R∩S\)</span>，<span class="math inline">\(\sim R\)</span>，<spanclass="math inline">\(R-S⊆A×B\)</span></li></ul><h3 id="关系的复合">关系的复合</h3><h4 id="定义-5">定义</h4><ul><li>设<span class="math inline">\(R\)</span>是从集合<spanclass="math inline">\(X\)</span>到<spanclass="math inline">\(Y\)</span>的关系，<spanclass="math inline">\(S\)</span>是从<spanclass="math inline">\(Y\)</span>到<spanclass="math inline">\(Z\)</span>的关系，把<spanclass="math inline">\(X\)</span>到<spanclass="math inline">\(Z\)</span>的关系定义为<spanclass="math inline">\(R\circ S\)</span>。称<spanclass="math inline">\(R\circ S\)</span>是关系<spanclass="math inline">\(R\)</span>和<spanclass="math inline">\(S\)</span>的合成关系或复合关系，<spanclass="math inline">\(R\circ S=\{(x,z)|∃x∈X, ∃z∈Z, 至少存在一个y∈Y有(x ,y)∈R且(y , z)∈S\}\)</span></li></ul><h4 id="定理">定理</h4><ul><li><p>已知集合<span class="math inline">\(X,Y,Z,W\)</span>，关系<spanclass="math inline">\(R_1,R_2,R_3,R_4\)</span>如下<spanclass="math inline">\(X\stackrel {R_1}\longrightarrow Y \stackrel{R_2R_3}\longrightarrow Z \stackrel {R_4}\longrightarrowW\)</span>，则有：</p><ul><li><spanclass="math inline">\(𝑅_1∘(𝑅_2∪𝑅_3)=(𝑅_1∘𝑅_2)∪(𝑅_ 1∘𝑅_3)\)</span></li><li><spanclass="math inline">\(R_1∘(R_2∩R_3)⊆(R_1∘R_2)∩(R_1∘R_3)\)</span></li><li><spanclass="math inline">\((𝑅_2∪𝑅_3)∘𝑅_4=(𝑅_2∘𝑅_4)∪(𝑅_3∘𝑅_4)\)</span></li><li><spanclass="math inline">\((𝑅_2∩𝑅_3)∘𝑅_4⊆(𝑅_2∘𝑅_4)∩(𝑅_3∘𝑅_4)\)</span></li></ul></li><li><p>已知集合<span class="math inline">\(X, Y, Z,W\)</span>，关系<span class="math inline">\(R_1, R_2,R_3\)</span>如下<span class="math inline">\(X\stackrel{R_1}\longrightarrow Y \stackrel {R_2}\longrightarrow Z \stackrel{R_3}\longrightarrow W\)</span>，则有：<span class="math inline">\((R_1\circ R_2)\circ R_3=R_1\circ (R_2 \circ R_3)\)</span><strong>结合律</strong></p></li><li><p><span class="math inline">\(R\circ R\circ R \circ\dots\circR=R^{(n)}\)</span></p></li><li><p><span class="math inline">\(R^{(0)}=I_X=\{(x,x)|x\inX\}\)</span></p></li></ul><h3 id="逆关系">逆关系</h3><h4 id="定义-6">定义</h4><ul><li>若<span class="math inline">\(R⊆A×B\)</span>，则关系<spanclass="math inline">\(\overline R =\{(y,x)|(x,y)∈ R\}\)</span>是集合<span class="math inline">\(B\)</span>到<spanclass="math inline">\(A\)</span>的关系，<spanclass="math inline">\(\overline R\)</span>称为关系<spanclass="math inline">\(R\)</span>的逆关系</li></ul><h4 id="定理-1">定理</h4><ul><li><span class="math inline">\(R_1, R_2, R\)</span>为<spanclass="math inline">\(X\)</span>到<spanclass="math inline">\(Y\)</span>的二元关系，则<ul><li><p><span class="math inline">\(\overline{R_1∪ R_2} =\overline{R_1}∪\overline{R_2}\)</span></p></li><li><p><span class="math inline">\(\overline{R_1 \cap R_2}=\overline{R_1} \cap \overline {R_2}\)</span></p></li><li><p><span class="math inline">\(\overline{X \times Y} = Y \timesX\)</span></p></li><li><p><span class="math inline">\(\overline{\sim R}=\sim\overline{R}\)</span></p></li><li><p><spanclass="math inline">\(\overline{R_1-R_2}=\overline{R_1}-\overline{R_2}\)</span></p></li><li><p><span class="math inline">\(S \subseteq R \iff\overline{S}\subseteq\overline{R}\)</span></p></li></ul></li><li>已知集合<span class="math inline">\(X, Y, Z\)</span>，关系<spanclass="math inline">\(R, S\)</span>如下，<span class="math inline">\(X\stackrel {R}\longrightarrow Y \stackrel {S}\longrightarrowZ\)</span>，则有：<span class="math inline">\(\overline{R\circS}=\overline{S}\circ\overline{R}\)</span></li></ul><h4 id="注意">注意</h4><ul><li>将<span class="math inline">\(R\)</span>的关系矩阵转置即得<spanclass="math inline">\(\overline R\)</span>的关系矩阵，即<spanclass="math inline">\(R\)</span>和<span class="math inline">\(\overlineR\)</span>的关系矩阵互为转置矩阵</li><li><span class="math inline">\(\overlineR\)</span>的前域与后域正好是<spanclass="math inline">\(R\)</span>的后域和前域，即<spanclass="math inline">\(domR=ran\overline R\)</span>，<spanclass="math inline">\(dom\overline R=ranR\)</span></li><li><span class="math inline">\(|R|=|\overline R|\)</span></li></ul><h2 id="关系性质">关系性质</h2><h3 id="自反性">自反性</h3><ul><li>令<span class="math inline">\(R⊆A×A\)</span>，若对<spanclass="math inline">\(A\)</span>中每个<spanclass="math inline">\(x\)</span>，都有<spanclass="math inline">\(xRx\)</span>，则称<spanclass="math inline">\(R\)</span>是自反的，即<spanclass="math inline">\(A上关系R是自反的\iff∀x(x∈A→xRx)\)</span></li><li>该定义表明了，在自反的关系<spanclass="math inline">\(R\)</span>中，除其他有序对外，必须包括由每个<spanclass="math inline">\(x∈A\)</span>所组成的元素相同的有序对</li></ul><h3 id="反自反性">反自反性</h3><ul><li>令<span class="math inline">\(R⊆A×A\)</span>，若对于<spanclass="math inline">\(A\)</span>中每个<spanclass="math inline">\(x\)</span>，有<span class="math inline">\((x,x)∉R\)</span>，则称<spanclass="math inline">\(R\)</span>是反自反的，即<spanclass="math inline">\(A上关系R是反自反的\iff∀x (x∈A→(x,x)∉R)\)</span></li><li>该定义表明了，一个反自反的关系<spanclass="math inline">\(R\)</span>中，不应包括有任何相同元素的有序对</li><li>应该指出，任何一个不是自反的关系，未必是反自反的；反之，任何一个不是反自反的关系，未必是自反的。这就是说，<strong>存在既不是自反的也不是反自反的二元关系</strong></li></ul><h3 id="对称性">对称性</h3><ul><li>令<span class="math inline">\(R⊆A×A\)</span>，对于<spanclass="math inline">\(A\)</span>中每个<spanclass="math inline">\(x\)</span>和<spanclass="math inline">\(y\)</span>，若<spanclass="math inline">\(xRy\)</span>，则<spanclass="math inline">\(yRx\)</span>，称<spanclass="math inline">\(R\)</span>是对称的，即<spanclass="math inline">\(在A上关系R是对称的\iff(∀x)(∀y)(x,y∈A且xRy→yRx)\)</span></li><li>该定义表明了，在表示对称的关系<spanclass="math inline">\(R\)</span>的有序对集合中，若有有序对<spanclass="math inline">\((x, y)\)</span>，则必定还会有有序对<spanclass="math inline">\((y, x)\)</span></li></ul><h3 id="反对称性">反对称性</h3><ul><li>令<span class="math inline">\(R⊆A×A\)</span>，对于<spanclass="math inline">\(A\)</span>中每个<spanclass="math inline">\(x\)</span>和<spanclass="math inline">\(y\)</span>，若<spanclass="math inline">\(xRy\)</span>且<spanclass="math inline">\(yRx\)</span>，则<spanclass="math inline">\(x=y\)</span>，称<spanclass="math inline">\(R\)</span>是反对称的，即<spanclass="math inline">\(A上关系R是反对称的 \iff(∀x)(∀y)(x,y∈A且xRy且yRx→x=y)\)</span></li><li>该定义表明了，在表示反对称关系<spanclass="math inline">\(R\)</span>的有序对集合中，若存在有序对<spanclass="math inline">\((x, y)\)</span>和<span class="math inline">\((y,x)\)</span>，则必定是<spanclass="math inline">\(x=y\)</span>。或者说，在<spanclass="math inline">\(R\)</span>中若有有序对<spanclass="math inline">\((x, y)\)</span>，则除非<spanclass="math inline">\(x=y\)</span>，否则必定不会出现<spanclass="math inline">\((y, x)\)</span></li></ul><h3 id="传递性">传递性</h3><ul><li>令<span class="math inline">\(R⊆A×A\)</span>，对于<spanclass="math inline">\(A\)</span>中每个<span class="math inline">\(x, y,z\)</span>，若<span class="math inline">\(xRy且yRz\)</span>，则<spanclass="math inline">\(xRz\)</span>，称<spanclass="math inline">\(R\)</span>是传递的，即<spanclass="math inline">\(A上关系R是传递的 \iff(∀x)(∀y)(∀z)(x,y,z∈A且xRy且yRz→xRz)\)</span></li><li>该定义表明了，在表示可传递关系<spanclass="math inline">\(R\)</span>的有序对集合中，若有有序对<spanclass="math inline">\((x, y)\)</span>和<span class="math inline">\((y,z)\)</span>，则必有有序对<span class="math inline">\((x,z)\)</span></li></ul><h3 id="结论">结论</h3><ul><li>关系<span class="math inline">\(R\)</span>是自反的<spanclass="math inline">\(\implies\)</span> <spanclass="math inline">\(R\)</span>不是反自反的</li><li>关系<span class="math inline">\(R\)</span>是自反的<spanclass="math inline">\(\iff\)</span>关系图中每个结点都有环</li><li>关系<span class="math inline">\(R\)</span>是反自反的<spanclass="math inline">\(\iff\)</span>关系图中每个结点都无环</li><li>关系<span class="math inline">\(R\)</span>是自反的<spanclass="math inline">\(\iff\)</span>关系矩阵的主对角线上全为1</li><li>关系<span class="math inline">\(R\)</span>是反自反的<spanclass="math inline">\(\iff\)</span>关系矩阵的主对角线上全为0</li><li>关系<span class="math inline">\(R\)</span>是对称的<spanclass="math inline">\(\iff\)</span>关系图中任何一对结点之间，要么有方向相反的两条边，要么无任何边</li><li>关系<span class="math inline">\(R\)</span>是反对称的<spanclass="math inline">\(\iff\)</span>关系图中任何一对结点之间，至多有一条边</li><li>关系<span class="math inline">\(R\)</span>是对称的<spanclass="math inline">\(\iff\)</span> <spanclass="math inline">\(R\)</span>的关系矩阵为对称矩阵</li><li>关系<span class="math inline">\(R\)</span>是反对称的<spanclass="math inline">\(\iff\)</span> <spanclass="math inline">\(R\)</span>的关系系矩阵满足<spanclass="math inline">\(r_{ij}\cdotr_{ji}＝0，i,j=1,2,…,n，i≠j\)</span></li><li><strong>非空集合上的空关系</strong>是反自反的，对称的，反对称的和传递的，但不是自反的。<strong>空集合上的空关系</strong>则是自反的，反自反的，对称的，反对称的和传递的</li><li><strong>非空集合上的全域关系</strong>是自反的，对称的和传递的，但不是反自反的和反对称的</li><li>设<span class="math inline">\(R⊆A×A\)</span>，若<spanclass="math inline">\(R\)</span>是反自反的和传递的，则<spanclass="math inline">\(R\)</span>是反对称的</li></ul><h2 id="闭包运算">闭包运算</h2><h3 id="自反闭包">自反闭包</h3><ul><li>设<span class="math inline">\(R\)</span>是<spanclass="math inline">\(A\)</span>上的二元关系，若<spanclass="math inline">\(R&#39;\)</span>是<spanclass="math inline">\(R\)</span>的自反闭包,记作<spanclass="math inline">\(r(R)\)</span>，则：<ul><li><span class="math inline">\(R&#39;\)</span>是自反的</li><li><span class="math inline">\(R⊆R&#39;\)</span></li><li>对任意的自反关系<spanclass="math inline">\(R&#39;&#39;\)</span>，<spanclass="math inline">\(R⊆R&#39;&#39;\)</span>，则必有<spanclass="math inline">\(R&#39;⊆R&#39;&#39;\)</span></li></ul></li></ul><h3 id="对称闭包">对称闭包</h3><ul><li>设<span class="math inline">\(R\)</span>是<spanclass="math inline">\(A\)</span>上的二元关系，若<spanclass="math inline">\(R&#39;\)</span>是<spanclass="math inline">\(R\)</span>的对称闭包,记作<spanclass="math inline">\(s(R)\)</span>，则：<ul><li><span class="math inline">\(R&#39;\)</span>是对称的</li><li><span class="math inline">\(R⊆R&#39;\)</span></li><li>对任意的对称关系<spanclass="math inline">\(R&#39;&#39;\)</span>，<spanclass="math inline">\(R⊆R&#39;&#39;\)</span>，则必有<spanclass="math inline">\(R&#39;⊆R&#39;&#39;\)</span></li></ul></li></ul><h3 id="传递闭包">传递闭包</h3><ul><li><p>设<span class="math inline">\(R\)</span>是<spanclass="math inline">\(A\)</span>上的二元关系，若<spanclass="math inline">\(R&#39;\)</span>是<spanclass="math inline">\(R\)</span>的传递闭包,记作<spanclass="math inline">\(t(R)\)</span>，则：</p><ul><li><span class="math inline">\(R&#39;\)</span>是传递的</li><li><span class="math inline">\(R⊆R&#39;\)</span></li><li>对任意的传递关系<spanclass="math inline">\(R&#39;&#39;\)</span>，<spanclass="math inline">\(R⊆R&#39;&#39;\)</span>，则必有<spanclass="math inline">\(R&#39;⊆R&#39;&#39;\)</span></li></ul></li></ul><h3 id="定理-2">定理</h3><ul><li>R是 X 上的二元关系,则：<ul><li><span class="math inline">\(r(R)=R∪\{(x,x)|x∈X\}=R∪I_x\)</span></li><li><span class="math inline">\(s(R) = R∪ \overline{R}\)</span></li><li><span class="math inline">\(t(R)=R∪ R^{(2)}∪ R^{(3)}...∪R^{(n)}\)</span>，<span class="math inline">\(n\)</span>为集合<spanclass="math inline">\(X\)</span>的元素的个数</li><li><span class="math inline">\(R\)</span>是自反的<spanclass="math inline">\(\iff\)</span> <spanclass="math inline">\(r(R)\)</span></li><li><span class="math inline">\(R\)</span>是对称的<spanclass="math inline">\(\iff\)</span> <spanclass="math inline">\(s(R)=R\)</span></li><li><span class="math inline">\(R\)</span>是传递的<spanclass="math inline">\(\iff\)</span> <spanclass="math inline">\(t(R)\)</span></li></ul></li></ul><h2 id="等价关系">等价关系</h2><h3 id="定义-7">定义</h3><ul><li>设<span class="math inline">\(R\)</span>是集合<spanclass="math inline">\(X\)</span>上的二元关系，如果<spanclass="math inline">\(R\)</span>是自反的、对称的、传递的，那么称<spanclass="math inline">\(R\)</span>是等价关系</li></ul><h3 id="划分">划分</h3><ul><li>设集合<span class="math inline">\(A=\{S_1, S_2 , …,S_m\}\)</span>,<span class="math inline">\(S_i\)</span>是<spanclass="math inline">\(S\)</span>的非空子集, 如果称<spanclass="math inline">\(A\)</span>是<spanclass="math inline">\(S\)</span>的一个划分，称<spanclass="math inline">\(S_i\)</span>为划分的块，则：<ul><li><span class="math inline">\(S_i\)</span>之间是不相交的</li><li><span class="math inline">\(S_1∪S_2∪…∪S_m = S\)</span></li></ul></li></ul><h3 id="等价类">等价类</h3><h4 id="定义-8">定义</h4><ul><li><span class="math inline">\(R\)</span>是集合<spanclass="math inline">\(S\)</span>上的等价关系, 对任一<spanclass="math inline">\(x\in S\)</span>，均可构造一个<spanclass="math inline">\(S\)</span>的非空子集<spanclass="math inline">\([x]_R= \{ y | y\in S 且 xRy\}\)</span>，也可记为<span class="math inline">\([x]\)</span>，叫做<spanclass="math inline">\(x\)</span>关于<spanclass="math inline">\(R\)</span>的等价类:</li></ul><h4 id="性质-2">性质</h4><ul><li><span class="math inline">\(x\in[x]\)</span></li><li>若<span class="math inline">\(y\in[x]\)</span>, 则<spanclass="math inline">\([y]=[x]\)</span></li><li>若<span class="math inline">\(y\in[x]\)</span>, 则<spanclass="math inline">\([y]∩[x]=\varnothing\)</span></li></ul><h4 id="定理-3">定理</h4><ul><li>集合<span class="math inline">\(S\)</span>上的一个等价关系<spanclass="math inline">\(R\)</span>生成的等价类集合对应<spanclass="math inline">\(S\)</span>的一个划分</li><li>集合<span class="math inline">\(S\)</span>上的一个等价关系<spanclass="math inline">\(R\)</span>生成的等价类集合对应<spanclass="math inline">\(S\)</span>的一个划分。此划分称为集合<spanclass="math inline">\(S\)</span>关于<spanclass="math inline">\(R\)</span>的商集，记为<spanclass="math inline">\(S/R\)</span></li><li>集合<span class="math inline">\(S\)</span>上的一个划分可产生<spanclass="math inline">\(S\)</span>上的一个等价关系</li></ul><h2 id="偏序关系">偏序关系</h2><h3 id="定义-9">定义</h3><ul><li>设<span class="math inline">\(R\)</span>是集合<spanclass="math inline">\(A\)</span>中的二元关系，如果<spanclass="math inline">\(R\)</span>是自反的、反对称的和可传递的，则称<spanclass="math inline">\(R\)</span>是<spanclass="math inline">\(A\)</span>中的偏序关系。</li><li>通常用符号“<spanclass="math inline">\(≼\)</span>”来标记偏序关系<spanclass="math inline">\(R\)</span></li></ul><h3 id="偏序集">偏序集</h3><ul><li>在偏序集合<span class="math inline">\((A ,≼)\)</span>中，如果有元素<spanclass="math inline">\(x,y∈A\)</span>,且<span class="math inline">\(x≼y\)</span>(或者写为<span class="math inline">\((x,y)∈≼\)</span>)和<spanclass="math inline">\(x≠y\)</span>,同时不存在其它任何元素<spanclass="math inline">\(z∈A\)</span>，能使<span class="math inline">\(x≼z\)</span>和<span class="math inline">\(z≼ y\)</span>,则称元素<spanclass="math inline">\(y\)</span>盖住<spanclass="math inline">\(x\)</span>，若元素<spanclass="math inline">\(y\)</span>盖住<spanclass="math inline">\(x\)</span>，则可以将<spanclass="math inline">\(x,y\)</span>间的关系用图形表示，即：哈斯图</li></ul><h3 id="哈斯图">哈斯图</h3><ul><li>用小圆圈表示<span class="math inline">\(A\)</span>中的元素</li><li>若<span class="math inline">\(x≼y\)</span>且<spanclass="math inline">\(x≠y\)</span>, 则<spanclass="math inline">\(x\)</span>在<spanclass="math inline">\(y\)</span>的下方</li><li>若<span class="math inline">\(x≼y\)</span>且<spanclass="math inline">\(x≠y\)</span>, 并且<spanclass="math inline">\(A\)</span>中不存在另外的元素<spanclass="math inline">\(z\)</span>, 满足<spanclass="math inline">\(x≼z\)</span>,<spanclass="math inline">\(z≼y\)</span>, 则在<spanclass="math inline">\(x\)</span>与<spanclass="math inline">\(y\)</span>之间画一直线</li></ul><h3 id="拟序关系">拟序关系</h3><ul><li>设<span class="math inline">\(R\)</span>是集合<spanclass="math inline">\(A\)</span>中的反自反和传递的二元关系，则称<spanclass="math inline">\(R\)</span>是<spanclass="math inline">\(A\)</span>中的拟序关系 (“<spanclass="math inline">\(≺\)</span>”)</li></ul><h3 id="全序和全序集">全序和全序集</h3><ul><li>设<span class="math inline">\(≼\)</span>是<spanclass="math inline">\(A\)</span>中的偏序关系，若对任意的<spanclass="math inline">\(x,y∈A\)</span>，必有<span class="math inline">\(x≼ y\)</span>或<span class="math inline">\(y ≼ x\)</span>，即<spanclass="math inline">\(x\)</span>和<spanclass="math inline">\(y\)</span>可比较，则称<spanclass="math inline">\(≼\)</span>是<spanclass="math inline">\(A\)</span>中的线性次序关系或全序关系，又称全序或线性序。相应的偏序集<spanclass="math inline">\((A,≼)\)</span>称为线性序集或全序集</li><li>显然，任一全序集也是偏序集，其哈斯图为一条链，但是任一偏序集不一定是全序集合</li></ul><h3 id="最大小元素">最大（小）元素</h3><ul><li>设<span class="math inline">\(( X, ≼ )\)</span>是偏序集，<spanclass="math inline">\(Y\)</span>是<spanclass="math inline">\(X\)</span>的子集。若存在元素<spanclass="math inline">\(y∈ Y\)</span>,对于每一个<spanclass="math inline">\(y’ ∈ Y\)</span>，<ul><li>若有<span class="math inline">\(y’ ≼ y\)</span>，则称<spanclass="math inline">\(y\)</span>是集合<spanclass="math inline">\(Y\)</span>的最大元素</li><li>若有<span class="math inline">\(y ≼y’\)</span>，则称<spanclass="math inline">\(y\)</span>是集合<spanclass="math inline">\(Y\)</span>的最小元素</li></ul></li></ul><h3 id="性质-3">性质</h3><ul><li>设<span class="math inline">\(( X, ≼ )\)</span>是偏序集，<spanclass="math inline">\(Y\)</span>是<spanclass="math inline">\(X\)</span>的子集，如果<spanclass="math inline">\(Y\)</span>有最大（最小）元素，则必定是唯一的</li></ul><h3 id="极大小元素">极大（小）元素</h3><ul><li>设<span class="math inline">\(( X, ≼)\)</span>是偏序集，<spanclass="math inline">\(Y\)</span>是<spanclass="math inline">\(X\)</span>的子集，若<span class="math inline">\(y∈ Y\)</span>，且不存在<span class="math inline">\(y’ ∈ Y\)</span>，<spanclass="math inline">\(y≠ y’\)</span>，<ul><li>若有<span class="math inline">\(y ≼ y’\)</span>，则称<spanclass="math inline">\(y\)</span>是<spanclass="math inline">\(Y\)</span>的极大元素</li><li>若有<span class="math inline">\(y’ ≼ y\)</span>，则称<spanclass="math inline">\(y\)</span>是<spanclass="math inline">\(Y\)</span>的极小元素</li></ul></li></ul><h3 id="上下界">上（下）界</h3><ul><li>设<span class="math inline">\(( X, ≼ )\)</span>是偏序集，<spanclass="math inline">\(Y\subseteq X\)</span>，若<spanclass="math inline">\(x ∈ X\)</span>，使得对任意<spanclass="math inline">\(y’ ∈ Y\)</span>,<ul><li>若有<span class="math inline">\(y’≼x\)</span>，则称<spanclass="math inline">\(x\)</span>是<spanclass="math inline">\(Y\)</span>的上界</li><li>若有<span class="math inline">\(x ≼ y’\)</span>，则称<spanclass="math inline">\(x\)</span>是<spanclass="math inline">\(Y\)</span>的下界</li></ul></li></ul><h3 id="上下确界">上（下）确界</h3><ul><li>设<span class="math inline">\(( X, ≼ )\)</span>是偏序集，<spanclass="math inline">\(Y\)</span>是<spanclass="math inline">\(X\)</span>的子集。<ul><li><span class="math inline">\(x\)</span>是<spanclass="math inline">\(Y\)</span>的上界，若对<spanclass="math inline">\(Y\)</span>的任一上界<spanclass="math inline">\(x’\)</span>，都有<span class="math inline">\(x≼x’\)</span>，则称<span class="math inline">\(x\)</span>是<spanclass="math inline">\(Y\)</span>的上确界，记作<spanclass="math inline">\(LUB\)</span> <spanclass="math inline">\(Y\)</span></li><li><span class="math inline">\(x\)</span>是<spanclass="math inline">\(Y\)</span>的下界，若对于<spanclass="math inline">\(Y\)</span>的任一下界<spanclass="math inline">\(x’\)</span>，均有<span class="math inline">\(x’≼x\)</span>，则称<span class="math inline">\(x\)</span>是<spanclass="math inline">\(Y\)</span>的下确界,记作<spanclass="math inline">\(GLB\)</span> <spanclass="math inline">\(Y\)</span></li></ul></li></ul><h1 id="函数">函数</h1><h2 id="函数及其分类">函数及其分类</h2><h3 id="函数的定义">函数的定义</h3><ul><li>设<span class="math inline">\(f\)</span>是集合<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>的关系 若称<spanclass="math inline">\(f\)</span>是集合<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>的函数或映射，记作<spanclass="math inline">\(f: A→B\)</span> 或 <span class="math inline">\(A →B\)</span>。 当<spanclass="math inline">\((a,b)∈f\)</span>时，通常记为<spanclass="math inline">\(b=f(a)\)</span>，<spanclass="math inline">\(b\)</span>称为<spanclass="math inline">\(a\)</span>在<spanclass="math inline">\(f\)</span>下的像，称<spanclass="math inline">\(a\)</span>为<spanclass="math inline">\(b\)</span>的原像。则<spanclass="math inline">\(f\)</span>满足下列两个条件：<ul><li>对每个<span class="math inline">\(a∈A\)</span>，必存在<spanclass="math inline">\(b∈B\)</span>，使得<spanclass="math inline">\((a,b)∈f\)</span>——<strong>存在性条件</strong></li><li>对每个<span class="math inline">\(a∈A\)</span>，只存在一个<spanclass="math inline">\(b∈B\)</span>，使得<spanclass="math inline">\((a,b)∈f\)</span>——<strong>唯一性条件</strong></li></ul></li><li>即：值域为函数的像集合</li></ul><h3 id="函数相等">函数相等</h3><ul><li>设<span class="math inline">\(f:X→Y\)</span>，<spanclass="math inline">\(g:Z→W\)</span>，如果<spanclass="math inline">\(f\)</span>和<spanclass="math inline">\(g\)</span>具有相同的定义域和值域，即<spanclass="math inline">\(X=Z\)</span>和<spanclass="math inline">\(Y=W\)</span>，并且对于所有的<spanclass="math inline">\(x∈X\)</span>和<spanclass="math inline">\(x∈Z\)</span>，都有<spanclass="math inline">\(f(x)=g(x)\)</span>，则称函数<spanclass="math inline">\(f\)</span>和<spanclass="math inline">\(g\)</span>相等，并记作<spanclass="math inline">\(f=g\)</span></li></ul><h3 id="函数个数">函数个数</h3><ul><li>设<span class="math inline">\(A\)</span>，<spanclass="math inline">\(B\)</span>是非空有限集合，则从<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>共有<spanclass="math inline">\(|B|^{|A|}\)</span> 个不同的函数</li><li>因为函数是一种特殊的关系，所以一个函数确定一个关系；但一个关系不一定确定一个函数</li></ul><h3 id="函数的分类">函数的分类</h3><ul><li>设<span class="math inline">\(f: A→B\)</span>是一个函数：<ul><li>对任意的<span class="math inline">\(a_1\)</span>和<spanclass="math inline">\(a_2∈A\)</span>，若<spanclass="math inline">\(a_1≠a_2\)</span>，均有<spanclass="math inline">\(f(a_1)≠f(a_2)\)</span>，则称<spanclass="math inline">\(f\)</span>为<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>的<strong>单射函数</strong>或<strong>一对一函数</strong>；否则，称<spanclass="math inline">\(f\)</span>为<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>的<strong>多对一函数</strong>。</li><li>如果对任意的<span class="math inline">\(b∈B\)</span>，均有<spanclass="math inline">\(a∈A\)</span>，使<spanclass="math inline">\(b=f(a)\)</span>，即<spanclass="math inline">\(C_f=B\)</span>，则<spanclass="math inline">\(f\)</span>为<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>的<strong>满射函数</strong>；否则，称<spanclass="math inline">\(f\)</span>为<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>的<strong>内射函数</strong>。</li><li>如果<span class="math inline">\(f\)</span>既是<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>的<strong>单射</strong>，又是<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>的<strong>满射</strong>，则称<spanclass="math inline">\(f\)</span>为<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>的<strong>双射函数</strong>或<strong>一一对应函数</strong>。特殊地，在一一对应函数<spanclass="math inline">\(f: A→B\)</span>中，若<spanclass="math inline">\(A=B\)</span>，则此函数叫做<spanclass="math inline">\(A\)</span>的变换。</li></ul></li></ul><h3 id="函数分类结论">函数分类结论</h3><ul><li>设A，B为有限集合，f是从A到B的函数，则：<ul><li><span class="math inline">\(f\)</span>是单射的必要条件为<spanclass="math inline">\(|A|≤|B|\)</span></li><li><span class="math inline">\(f\)</span>是满射的必要条件为<spanclass="math inline">\(|B|≤|A|\)</span></li><li><span class="math inline">\(f\)</span>是双射的必要条件为<spanclass="math inline">\(|A|＝|B|\)</span></li></ul></li></ul><h3 id="特殊函数">特殊函数</h3><ul><li>设<span class="math inline">\(f\)</span>是一个函数，若对任意的<spanclass="math inline">\(a∈A\)</span>，均有<spanclass="math inline">\(f(a)=b\)</span>，<spanclass="math inline">\(b∈B\)</span>，则称<spanclass="math inline">\(f\)</span>是从<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>的<strong>常值函数</strong>或<strong>常函数</strong></li><li>设<span class="math inline">\(f\)</span>是一个函数，若对任意的<spanclass="math inline">\(a∈A\)</span>，均有<spanclass="math inline">\(f(a)=a\)</span>，则称<spanclass="math inline">\(f\)</span>是<spanclass="math inline">\(A\)</span>上的<strong>恒等函数</strong></li><li>设<span class="math inline">\(f:R→R\)</span>是一个函数，其中<spanclass="math inline">\(R\)</span>为实数集，<ul><li>对任意<span class="math inline">\(a,b∈R\)</span>，若<spanclass="math inline">\(a&lt;b\)</span>，必有<spanclass="math inline">\(f(a)≤f(b)\)</span>，则称<spanclass="math inline">\(f\)</span>为单调递增函数</li><li>对任意<span class="math inline">\(a,b∈R\)</span>，若<spanclass="math inline">\(a&lt;b\)</span>，必有<spanclass="math inline">\(f(a)&lt;f(b)\)</span>，则称<spanclass="math inline">\(f\)</span>为严格单调递增函数</li></ul></li><li>设<span class="math inline">\(U\)</span>是全集，且<spanclass="math inline">\(A⊆U\)</span>，函数<span class="math inline">\(\Psi_A:U\to \{0,1\}\)</span>定义为: <spanclass="math inline">\(\Psi_A=\begin{cases} 1,&amp; a \in A\\ 0,&amp; a\notin A \end{cases}\)</span> 则称<spanclass="math inline">\(\Psi_A\)</span>是集合<spanclass="math inline">\(A\)</span>的特征函数</li></ul><h2 id="复合函数与逆函数">复合函数与逆函数</h2><h3 id="复合函数">复合函数</h3><h4 id="复合函数定义">复合函数定义</h4><ul><li>函数的合成运算可定义如下：设<span class="math inline">\(f :X→Y\)</span>, <span class="math inline">\(g :Y→Z\)</span>是两个函数，于是合成函数记为<spanclass="math inline">\(g\circ f : X→Z\)</span> <spanclass="math inline">\(\\g\circf=\{(x,z)|x∈X且z∈Z且存在y∈Y且y=f(x)且z=g(y)\}\)</span> 通常称为函数<spanclass="math inline">\(f\)</span>和<spanclass="math inline">\(g\)</span>的合成，确切的说，<spanclass="math inline">\(g\circ f\)</span>称为<spanclass="math inline">\(f\)</span>和<spanclass="math inline">\(g\)</span>左合成，从<spanclass="math inline">\(f\)</span>和<spanclass="math inline">\(g\)</span>求得<span class="math inline">\(g\circf\)</span>的运算“<spanclass="math inline">\(\circ\)</span>”称为左合成运算关系的合成运算为<span class="math inline">\(f\circg\)</span>，函数的合成运算为<span class="math inline">\(g\circf\)</span></li></ul><h4 id="复合函数定理">复合函数定理</h4><ul><li>函数的合成运算是可结合的</li><li>设<span class="math inline">\(f\)</span>和<spanclass="math inline">\(g\)</span>是函数，并且有合成函数<spanclass="math inline">\(g\circ f\)</span>,则<ul><li>如果<span class="math inline">\(f\)</span>和<spanclass="math inline">\(g\)</span>都是满射函数，则<spanclass="math inline">\(g \circ f\)</span>也是满射函数</li><li>如果<span class="math inline">\(f\)</span>和<spanclass="math inline">\(g\)</span>都是单射函数，则<spanclass="math inline">\(g\circ f\)</span>也是单射函数</li><li>如果<span class="math inline">\(f\)</span>和<spanclass="math inline">\(g\)</span>都是双射函数，则<spanclass="math inline">\(g\circ f\)</span>也是双射函数</li></ul></li></ul><h3 id="逆函数">逆函数</h3><h4 id="逆函数定义">逆函数定义</h4><ul><li>设<span class="math inline">\(f : A→B\)</span>是一个双射函数 ,称<span class="math inline">\(f^{-1} : B→A\)</span>是<spanclass="math inline">\(f\)</span>的逆函数</li><li>在关系部分，曾定义了从集合<spanclass="math inline">\(X\)</span>到<spanclass="math inline">\(Y\)</span>的关系<spanclass="math inline">\(R\)</span>的逆关系，但是对于函数来说，交换序偶中的成员次序并<strong>不一定</strong>能保证得到的仍然是个函数</li><li>设<spanclass="math inline">\(f:A→B\)</span>是一一对应的函数，则<spanclass="math inline">\(f\)</span>的逆关系 称为它的逆函数，记成<spanclass="math inline">\(f^{-1}: B→A\)</span>。这时称函数<spanclass="math inline">\(f\)</span>是可逆的</li></ul><h4 id="逆函数的定理">逆函数的定理</h4><ul><li>函数<span class="math inline">\(f : A→B\)</span>，若存在逆函数<spanclass="math inline">\(f^{-1} : B→A\)</span>，则必须满足：<ul><li>对任意的<span class="math inline">\(a∈A\)</span>，必有唯一的<spanclass="math inline">\(b∈B\)</span>与之对应；</li><li>对任意的<span class="math inline">\(b∈B\)</span>，必有唯一的<spanclass="math inline">\(a∈A\)</span>与之对应；</li></ul></li></ul><h1 id="代数系统">代数系统</h1><h2 id="代数系统的基本概念">代数系统的基本概念</h2><h3 id="二元运算">二元运算</h3><h4 id="定义-10">定义</h4><ul><li>设<span class="math inline">\(A, B, C\)</span>是非空集合，从<spanclass="math inline">\(A×B\)</span>到<spanclass="math inline">\(C\)</span>的一个函数<span class="math inline">\(f：A×B→C\)</span>称为一个<span class="math inline">\(A×B\)</span>到<spanclass="math inline">\(C\)</span>的二元代数运算，简称二元运算</li><li>一个二元运算就是一个特殊的函数 ，该函数能够对<spanclass="math inline">\(a\in A\)</span>和<span class="math inline">\(b\inB\)</span>进行运算，得到<spanclass="math inline">\(C\)</span>中的一个元素<spanclass="math inline">\(c\)</span> ， 即 <span class="math inline">\(\circ(a, b)＝c\)</span>。 中缀方法表示为：<span class="math inline">\(a \circb＝c\)</span></li></ul><h3 id="特点-1">特点</h3><h4 id="封闭性">封闭性</h4><ul><li>如果“<span class="math inline">\(*\)</span>”是<spanclass="math inline">\(A×A\)</span>到<spanclass="math inline">\(A\)</span>的二元运算，则称运算“<spanclass="math inline">\(*\)</span>”对集合<spanclass="math inline">\(A\)</span>是封闭的，或者称“<spanclass="math inline">\(*\)</span>”是<spanclass="math inline">\(A\)</span>上的二元运算</li><li>设“<span class="math inline">\(*\)</span>”是一个<spanclass="math inline">\(A_1×A_2×…×A_n\)</span>到<spanclass="math inline">\(A\)</span>的<spanclass="math inline">\(n\)</span>元代数运算，如果<spanclass="math inline">\(A_1＝A_2＝…＝A_n＝A\)</span>，则称代数运算“<spanclass="math inline">\(*\)</span>”对集合<spanclass="math inline">\(A\)</span>是封闭的，或者称“<spanclass="math inline">\(*\)</span>”是<spanclass="math inline">\(A\)</span>上的<spanclass="math inline">\(n\)</span>元代数运算</li></ul><h3 id="代数系统的定义">代数系统的定义</h3><ul><li>设<span class="math inline">\(A\)</span>是非空集合，<spanclass="math inline">\(*\)</span>是定义在<spanclass="math inline">\(A\)</span>上<spanclass="math inline">\(k\)</span>元封闭运算，称集合<spanclass="math inline">\(A\)</span>和<spanclass="math inline">\(*\)</span>所组成的系统称为代数系统，简称代数，记为<spanclass="math inline">\((A, *)\)</span></li><li>当<spanclass="math inline">\(A\)</span>是有限集合时，该代数系统称为有限代数系统，否则称为无限代数系统</li><li>注意：判断集合<spanclass="math inline">\(A\)</span>和其上的代数运算是否是代数系统，关键是判断两点：<ul><li>集合<span class="math inline">\(A\)</span>非空</li><li>这些运算关于<spanclass="math inline">\(A\)</span>是否满足封闭性</li></ul></li></ul><h3 id="同类型代数系统">同类型代数系统</h3><ul><li>设<span class="math inline">\((A, *)\)</span>和<spanclass="math inline">\((B, \circ )\)</span>是两个代数系统，若“<spanclass="math inline">\(\circ\)</span>”和“<spanclass="math inline">\(*\)</span>”都是<spanclass="math inline">\(k\)</span>元运算，<span class="math inline">\(i =1, 2, …, m\)</span>，则称这两个代数同类型</li></ul><h2 id="运算规律">运算规律</h2><h3 id="结合律-1">结合律</h3><ul><li>设<span class="math inline">\((A,*)\)</span>是二元代数系统，若对任意<span class="math inline">\(a, b,c∈A\)</span>，都有 <span class="math inline">\((a*b)*c＝a*(b*c)\)</span>则称“<span class="math inline">\(*\)</span>”在<spanclass="math inline">\(A\)</span>上是可结合的，或称满足结合律</li></ul><h3 id="交换律-1">交换律</h3><ul><li>设<span class="math inline">\((A,*)\)</span>是二元代数系统，若对任意<span class="math inline">\(a,b∈A\)</span>，都有 <span class="math inline">\(a*b＝b*a\)</span>则称“<span class="math inline">\(*\)</span>”在<spanclass="math inline">\(A\)</span>上是可交换的，或称“<spanclass="math inline">\(*\)</span>”满足交换律</li></ul><h3 id="消去律">消去律</h3><ul><li>设<span class="math inline">\((A,*)\)</span>是二元代数系统，元素<spanclass="math inline">\(a∈A\)</span>，<ul><li>对任意<span class="math inline">\(x, y∈A\)</span>，都有如果<spanclass="math inline">\(a*x = a*y\)</span>，那<spanclass="math inline">\(x = y\)</span>，则称<spanclass="math inline">\(a\)</span>在<spanclass="math inline">\(A\)</span>中关于“<spanclass="math inline">\(*\)</span>”是左可消去元</li><li>对任意<span class="math inline">\(x, y∈A\)</span>，都有如果<spanclass="math inline">\(x*a = y*a\)</span>，那么<spanclass="math inline">\(x = y\)</span>，则称<spanclass="math inline">\(a\)</span>在<spanclass="math inline">\(A\)</span>中关于“<spanclass="math inline">\(*\)</span>”是右可消去元</li><li>如果<span class="math inline">\(a\)</span>既是<spanclass="math inline">\(A\)</span>左可消去元又是右可消去元，则称<spanclass="math inline">\(a\)</span>是<spanclass="math inline">\(A\)</span>的可消去元</li><li>若<spanclass="math inline">\(A\)</span>中所有元素都是可消去元，则称“<spanclass="math inline">\(*\)</span>”在<spanclass="math inline">\(A\)</span>上可消去，或称“<spanclass="math inline">\(*\)</span>”满足消去律</li></ul></li></ul><h3 id="幂等律">幂等律</h3><ul><li>设<span class="math inline">\((A,*)\)</span>是二元代数系统，若元素<spanclass="math inline">\(a∈A\)</span>，满足<spanclass="math inline">\(a*a=a\)</span>则称<spanclass="math inline">\(a\)</span>是<spanclass="math inline">\(A\)</span>中关于“<spanclass="math inline">\(*\)</span>”的一个幂等元，简称<spanclass="math inline">\(a\)</span>为幂等元。若<spanclass="math inline">\(A\)</span>中的每一个元素都是幂等元，则称“<spanclass="math inline">\(*\)</span>”在<spanclass="math inline">\(A\)</span>中是幂等的，或称“<spanclass="math inline">\(*\)</span>”满足幂等律</li></ul><h3 id="幂">幂</h3><ul><li>设“<span class="math inline">\(*\)</span>”是集合<spanclass="math inline">\(A\)</span>上可结合的二元运算，<spanclass="math inline">\(a∈A\)</span>，则<spanclass="math inline">\(a*a∈A，a*a*a∈A，…，\)</span>由此，可以归纳定义<spanclass="math inline">\(a\)</span>的正整数幂方： <spanclass="math inline">\(a^1 = a，a^2 = a*a，a^3 = a^2*a，… ， a^n =a^{n-1}*a，…\)</span></li><li>对任意正整数<span class="math inline">\(n\)</span>，<spanclass="math inline">\(m\)</span>，有以下等式：<spanclass="math inline">\(a^n * a^m = a^{n+m}， (a^n)^m =a^{nm}\)</span></li></ul><h3 id="分配律-1">分配律</h3><ul><li>设“<span class="math inline">\(*\)</span>”、“<spanclass="math inline">\(\circ\)</span>”是集合A上的二元运算，<spanclass="math inline">\((A,*, \circ)\)</span>是一个代数系统， 对任意<spanclass="math inline">\(a,b,c\in A\)</span>，<ul><li><span class="math inline">\(a\circ (b*c)=(a\circ b)*(a\circc)\)</span>， 则称运算“<spanclass="math inline">\(\circ\)</span>”对“<spanclass="math inline">\(*\)</span>”在<spanclass="math inline">\(A\)</span>上满足左分配律(或第一分配律)</li><li><span class="math inline">\((b*c) \circ a=(b\circ a)*(c\circa)\)</span>， 则称运算“<spanclass="math inline">\(\circ\)</span>”对“<spanclass="math inline">\(*\)</span>”在<spanclass="math inline">\(A\)</span>上满足右分配律(或第二分配律)</li><li>如果“<span class="math inline">\(\circ\)</span>”对“<spanclass="math inline">\(*\)</span>”既满足左分配律又满足右分配律，则称“<spanclass="math inline">\(\circ\)</span>”对“<spanclass="math inline">\(*\)</span>”在<spanclass="math inline">\(A\)</span>上满足分配律</li></ul></li></ul><h3 id="吸收律-1">吸收律</h3><ul><li>设“<span class="math inline">\(*\)</span>”、“<spanclass="math inline">\(\circ\)</span>”是集合<spanclass="math inline">\(A\)</span>上的二元运算，<spanclass="math inline">\((A,*, \circ)\)</span>是一个代数系统，如果对任意<span class="math inline">\(x,y∈A\)</span>，都有<span class="math inline">\(x *(x \circ y) = x，x\circ(x*y) = x\)</span> 则称“<spanclass="math inline">\(*\)</span>”和“<spanclass="math inline">\(\circ\)</span>”满足吸收律</li></ul><h2 id="特殊元">特殊元</h2><h3 id="特殊元的定义">特殊元的定义</h3><ul><li>在代数系统中，有些元素有特殊性质，叫特殊元</li></ul><h3 id="单位元">单位元</h3><ul><li>设<span class="math inline">\((A, *)\)</span>是二元代数系统，<ul><li>若存在<span class="math inline">\(e∈A\)</span>，对任意<spanclass="math inline">\(a∈A\)</span>，都有 <span class="math inline">\(a*e = e* a = a\)</span>，则称<spanclass="math inline">\(e\)</span>是<spanclass="math inline">\(A\)</span>中关于运算“<spanclass="math inline">\(*\)</span>”的一个单位元</li><li>若存在<span class="math inline">\(e_l∈A\)</span>，使得对任意<spanclass="math inline">\(a∈A\)</span>，都有 <span class="math inline">\(e_l*a = a\)</span>，则称<span class="math inline">\(e_l\)</span>是<spanclass="math inline">\(A\)</span>中关于运算“<spanclass="math inline">\(*\)</span>”的一个左单位元</li><li>若存在<span class="math inline">\(e_r∈A\)</span>，使得对任意<spanclass="math inline">\(a∈A\)</span>，都有 <span class="math inline">\(a*e_r = a\)</span>，则称<span class="math inline">\(e_r\)</span>是<spanclass="math inline">\(A\)</span>中关于运算“<spanclass="math inline">\(*\)</span>”的一个右单位元</li></ul></li></ul><h3 id="零元">零元</h3><ul><li>设<span class="math inline">\((A, *)\)</span>是一个二元代数系统，<ul><li>若存在<span class="math inline">\(θ∈A\)</span>，使得对任意<spanclass="math inline">\(a∈A\)</span>，都有<span class="math inline">\(a *θ= θ* a =θ\)</span>，则称<span class="math inline">\(θ\)</span>是<spanclass="math inline">\(A\)</span>中关于运算“<spanclass="math inline">\(*\)</span>”的一个零元</li><li>若存在<span class="math inline">\(θ_l∈A\)</span>，使得对任意<spanclass="math inline">\(a∈A\)</span>，都有<span class="math inline">\(θ_l*a = θ_l\)</span>，则称<span class="math inline">\(θ_l\)</span>是<spanclass="math inline">\(A\)</span>中关于运算“<spanclass="math inline">\(*\)</span>”的一个左零元</li><li>若存在<span class="math inline">\(θ_r∈A\)</span>，使得对任意<spanclass="math inline">\(a∈A\)</span>，都有<span class="math inline">\(a*θ_r = θ_r\)</span>，则称<span class="math inline">\(θ_r\)</span>是<spanclass="math inline">\(A\)</span>中关于运算“<spanclass="math inline">\(*\)</span>”的一个右零元。</li></ul></li></ul><h3 id="逆元">逆元</h3><ul><li>设<span class="math inline">\((A, *)\)</span>是二元代数系统，<spanclass="math inline">\(e\)</span>是幺元，<spanclass="math inline">\(a∈A\)</span>，若存在一个元素<spanclass="math inline">\(b∈A\)</span>，<ul><li>使得：<span class="math inline">\(a *b = b* a =e\)</span>，则称<span class="math inline">\(a\)</span>可逆，并称<spanclass="math inline">\(b\)</span>是<spanclass="math inline">\(a\)</span>的一个逆元，记为<spanclass="math inline">\(a^{-1}\)</span></li><li>使得：<span class="math inline">\(b*a = e\)</span>，则称<spanclass="math inline">\(a\)</span>左可逆，并称<spanclass="math inline">\(b\)</span>是<spanclass="math inline">\(a\)</span>的一个左逆元，记为<spanclass="math inline">\(a_l^{-1}\)</span></li><li>使得：<span class="math inline">\(a*b = e\)</span>，则称<spanclass="math inline">\(a\)</span>右可逆，并称<spanclass="math inline">\(b\)</span>是<spanclass="math inline">\(a\)</span>的一个右逆元，记为<spanclass="math inline">\(a_r^{-1}\)</span></li></ul></li></ul><h3 id="定理-4">定理</h3><ul><li>设<span class="math inline">\((A, *)\)</span>是一个代数系统，“<spanclass="math inline">\(*\)</span>” 满足结合律，<spanclass="math inline">\(a∈A\)</span>，<spanclass="math inline">\(a\)</span>可逆，则<spanclass="math inline">\(a\)</span>是可消去元</li><li>设<span class="math inline">\((A, *)\)</span>是二元代数系统，<ul><li>如果<span class="math inline">\((A,*)\)</span>存在单位元，则单位元唯一</li><li>如果<span class="math inline">\((A,*)\)</span>存在单位元，则该单位元一定是左、右单位元</li><li>如果<span class="math inline">\((A,*)\)</span>存在左、右单位元，则该左、右单位元相等，且是单位元。</li></ul></li><li>设<span class="math inline">\((A, *)\)</span>是二元代数系统，<ul><li>如果<span class="math inline">\((A,*)\)</span>存在零元，则零元唯一</li><li>如果<span class="math inline">\((A,*)\)</span>存在零元，则该零元一定是左、右零元</li><li>如果<span class="math inline">\((A,*)\)</span>存在左、右零元，则该左、右零元相等，且是零元。</li></ul></li><li>设<span class="math inline">\((A, *)\)</span>是二元代数系统，“<spanclass="math inline">\(*\)</span>”满足结合律且设<spanclass="math inline">\(e\)</span>是单位元，则对任意<spanclass="math inline">\(a∈A\)</span>，<ul><li>如果<span class="math inline">\(a\)</span>存在逆元，则逆元唯一</li><li>如果<spanclass="math inline">\(a\)</span>存在逆元，则该逆元一定是左、右逆元</li><li>如果<spanclass="math inline">\(a\)</span>存在左、右逆元，则该左、右逆元相等，且是逆元。</li></ul></li><li>设<span class="math inline">\((A, *)\)</span>是二元代数系统，“<spanclass="math inline">\(*\)</span>”满足结合律，<spanclass="math inline">\(a, b∈A\)</span>，<ul><li>如果<span class="math inline">\(a, b\)</span>分别有逆元<spanclass="math inline">\(a^{-1}, b^{-1}\)</span>，则<spanclass="math inline">\((a*b)^{-1} = b^{-1}*a^{-1}\)</span></li><li>如果<spanclass="math inline">\(a\)</span>是左（或右）可逆的元素，则<spanclass="math inline">\(a\)</span>是左（或右）可消去的元素</li><li>如果<span class="math inline">\(a\)</span>是可逆的元素，则<spanclass="math inline">\(a\)</span>是可消去的元素</li></ul></li></ul><h3 id="同构">同构</h3><h4 id="同构的定义">同构的定义</h4><ul><li>在现实社会中，存在着很多代数系统，但仔细分析这些众多的代数系统发现，有些代数系统，他们之间表面上似乎不相同，但他们本质上是“相同”的</li></ul><h4 id="同构的条件">同构的条件</h4><ul><li>必须是同型代数系统</li><li>两个集合的元素个数应相等</li><li>运算定义法则相同，即对应元素运算后的结果也对应</li></ul><h3 id="同态">同态</h3><h4 id="同态的定义">同态的定义</h4><ul><li>设<span class="math inline">\((A, *)\)</span>和<spanclass="math inline">\((B, \circ)\)</span>为两个二元代数系统，<spanclass="math inline">\(g\)</span>是<spanclass="math inline">\(A\)</span>到<spanclass="math inline">\(B\)</span>的函数。对任意<spanclass="math inline">\(x, y∈A\)</span>，都有<spanclass="math inline">\(g(x*y) = g(x) \circ g(y)\)</span>，则称<spanclass="math inline">\(g\)</span>是从<span class="math inline">\((A,*)\)</span>到<span class="math inline">\((B,\circ)\)</span>的<strong>同态映射</strong>，称<spanclass="math inline">\(g(A)\)</span>为<strong>同态像</strong>，其中<spanclass="math inline">\(g(A) = \{g(x) |x∈A\}\)</span>。如果存在一个从<spanclass="math inline">\((A,*)\)</span>到<span class="math inline">\((B,\circ )\)</span>的同态映射，则称<span class="math inline">\((A,*)\)</span>与<span class="math inline">\((B, \circ)\)</span>同态，记为<span class="math inline">\((A,*)∽(B, \circ)\)</span>。当<span class="math inline">\((A, *)= (B, \circ)\)</span>时，称其同态为<strong>自同态</strong></li><li>当同态映射<spanclass="math inline">\(g\)</span>分别是<strong>单射</strong>、<strong>满射</strong>、<strong>双射</strong>时，分别称<spanclass="math inline">\(g\)</span>是<strong>单一同态映射</strong>、<strong>满同态映射</strong>、<strong>同构映射</strong></li><li>如果存在一个从<span class="math inline">\((A, *)\)</span>到<spanclass="math inline">\((B, \circ)\)</span>的<strong>同构映射</strong>（单一同态映射、满同态映射），则称代数系统<spanclass="math inline">\((A,*)\)</span>与<span class="math inline">\((B,\circ )\)</span><strong>同构</strong>（单一同态、满同态）。 用<spanclass="math inline">\((A, *)≌(B, \circ )\)</span>表示<spanclass="math inline">\((A,*)\)</span>与<span class="math inline">\((B,\circ )\)</span>同构</li></ul><h1 id="命题逻辑">命题逻辑</h1><h2 id="命题与命题联结词">命题与命题联结词</h2><h3 id="命题">命题</h3><ul><li>具有真假意义的<strong>陈述句</strong>称为命题</li><li>命题可以取一个“值”，称为真值</li><li>真值只有“真”和“假”两种，分别用“<spanclass="math inline">\(Ｔ\)</span>”(或“<spanclass="math inline">\(１\)</span>”)和“<spanclass="math inline">\(Ｆ\)</span>”(或“<spanclass="math inline">\(０\)</span>)表示</li></ul><h3 id="命题的分类">命题的分类</h3><ul><li>原子命题(简单命题)：不能再分解为更为简单命题的命题</li><li>复合命题：可以分解为原子命题的命题，这些原子命题之间通过如“或者”、“并且”、“不”、“如果...则...”、“当且仅当”等这样的关联词和标点符号复合而构成一个复合命题。（优先级：<strong>否定→合取→析取→蕴涵→等价</strong>）</li></ul><h3 id="命题联结词">命题联结词</h3><h4 id="否定neg">否定<span class="math inline">\(\neg\)</span></h4><ul><li>设<span class="math inline">\(P\)</span>是任一命题，复合命题“非<spanclass="math inline">\(P\)</span>”(或“<spanclass="math inline">\(P\)</span>的否定”)称为<spanclass="math inline">\(P\)</span>的否定式(Negation)，记作<spanclass="math inline">\(\neg P\)</span>，“<spanclass="math inline">\(\neg\)</span>”为否定联结词</li></ul><h4 id="合取wedge">合取<span class="math inline">\(\wedge\)</span></h4><ul><li>设<span class="math inline">\(P\)</span>、<spanclass="math inline">\(Q\)</span>是任两个命题，复合命题“<spanclass="math inline">\(P并且Q\)</span>”(或“<spanclass="math inline">\(P和Q\)</span>”)称为<spanclass="math inline">\(P\)</span>与<spanclass="math inline">\(Q\)</span>的合取式(Conjunction)，记作<spanclass="math inline">\(P∧Q\)</span>，“<spanclass="math inline">\(∧\)</span>”为合取联结词</li></ul><h4 id="析取vee">析取<span class="math inline">\(\vee\)</span></h4><ul><li>设<span class="math inline">\(P\)</span>、<spanclass="math inline">\(Q\)</span>是任两个命题，复合命题“<spanclass="math inline">\(P或者Q\)</span>”称为<spanclass="math inline">\(P\)</span>与<spanclass="math inline">\(Q\)</span>的析取式(Disjunction)，记作<spanclass="math inline">\(P∨Q\)</span>，“<spanclass="math inline">\(∨\)</span>”为析取联结词</li></ul><h4 id="蕴涵">蕴涵<span class="math inline">\(→\)</span></h4><ul><li>设<span class="math inline">\(P\)</span>、<spanclass="math inline">\(Q\)</span>是任两个命题，复合命题“<spanclass="math inline">\(如果P，则Q\)</span>”称为<spanclass="math inline">\(P\)</span>与<spanclass="math inline">\(Q\)</span>的蕴涵式(Implication)，记作<spanclass="math inline">\(P→Q\)</span>，“<spanclass="math inline">\(→\)</span>”称为蕴涵联结词，<spanclass="math inline">\(P\)</span>称为蕴涵式的前件，<spanclass="math inline">\(Q\)</span>称为后件</li></ul><h4 id="等价leftrightarrow">等价<spanclass="math inline">\(\leftrightarrow\)</span></h4><ul><li>设<spanclass="math inline">\(P、Q\)</span>是任两个命题，复合命题“<spanclass="math inline">\(P当且仅当Q\)</span>”称为<spanclass="math inline">\(P\)</span>与<spanclass="math inline">\(Q\)</span>的等价式(Equivalence)，记作<spanclass="math inline">\(P\leftrightarrow Q\)</span>，“<spanclass="math inline">\(\leftrightarrow\)</span>”称为等价联结词</li></ul><h4 id="说明">说明</h4><ul><li>联结词与自然语言之间的对应并非一一对应：<ul><li>合取联结词“<spanclass="math inline">\(∧\)</span>”对应自然语言的“既…又…”、“不仅…而且…”、“虽然…但是…”、“并且”、“和”、“与”等</li><li>蕴涵联结词“<span class="math inline">\(→\)</span>”,“<spanclass="math inline">\(P→Q\)</span>”对应自然语言中的“如P则Q” ,“只要P就Q”,“P仅当Q”,“只有Q才P”,“除非Q否则<spanclass="math inline">\(\neg\)</span> P”等</li><li>等价联结词“<spanclass="math inline">\(↔\)</span>”对应了自然语言中的“等价”、“当且仅当”、“充分必要”等</li><li>析取联结词“<spanclass="math inline">\(\vee\)</span>”对应的是相容（可兼）的或</li><li>否定联结词“<spanclass="math inline">\(\neg\)</span>”是自然语言中的“非”、“不”和“没有”等</li></ul></li><li>当前件<span class="math inline">\(P\)</span>为假时，不管<spanclass="math inline">\(Q\)</span>的真假如何，则<spanclass="math inline">\(P→Q\)</span>都为真。此时称为“<strong>善意推定</strong>”</li><li>复合命题的真值<strong>只取决于</strong>构成他们的各原子命题的真值，而与它们的内容、含义无关，与联结次所连接的两原子命题之间是否有关系无关</li></ul><h2 id="命题公式与符号化">命题公式与符号化</h2><h3 id="命题公式的定义">命题公式的定义</h3><ul><li>一个特定的命题是一个<strong>常值命题</strong>，它不是具有值“T”(“1”)，就是具有值“F”(“0”)</li><li>一个任意的没有赋予具体内容的原子命题称为<strong>命题变量</strong>(或<strong>命题变元</strong>)，该命题变量无具体的真值，它的变域是集合<spanclass="math inline">\(\{T，F\}\)</span>(或<spanclass="math inline">\(\{0，1\}\)</span>)</li><li>当原子命题是命题变元时，此复合命题也即为命题变元的“函数”，且该“函数”的值仍为“真”或“假”值，这样的函数可形象地称为“<strong>真值函数</strong>”,或称为<strong>命题公式</strong>，此命题公式<strong>没有确切真值</strong></li></ul><h3 id="公式的解释">公式的解释</h3><h4 id="定义-11">定义</h4><ul><li>设<spanclass="math inline">\(P_1、P_2、…、P_n\)</span>是出现在公式<spanclass="math inline">\(G\)</span>中的所有命题变元，指定<spanclass="math inline">\(P_1、P_2、…、P_n\)</span>一组真值，则这组真值称为<spanclass="math inline">\(G\)</span>的一个解释,常记为<spanclass="math inline">\(I\)</span></li></ul><h4 id="性质-4">性质</h4><ul><li>一般来说，若有<spanclass="math inline">\(ｎ\)</span>个命题变元，则应有<spanclass="math inline">\(2^n\)</span>个不同的解释</li><li>如果公式<span class="math inline">\(G\)</span>在解释<spanclass="math inline">\(I\)</span>下是真的，则称<spanclass="math inline">\(I\)</span>满足<spanclass="math inline">\(G\)</span>；如果<spanclass="math inline">\(G\)</span>在解释<spanclass="math inline">\(I\)</span>下是假的，则称<spanclass="math inline">\(I\)</span>弄假<spanclass="math inline">\(G\)</span></li></ul><h3 id="真值表">真值表</h3><h4 id="定义-12">定义</h4><ul><li>将公式<spanclass="math inline">\(G\)</span>在其所有可能解释下的真值情况列成的表，称为<spanclass="math inline">\(G\)</span>的真值表</li></ul><h2 id="公式的等价性">公式的等价性</h2><h3 id="基本等价式">基本等价式</h3><h4 id="交换律-2">交换律</h4><ul><li><span class="math inline">\(P∧Q\iff Q∧P\)</span></li><li><span class="math inline">\(P∨Q\iff Q∨P\)</span></li><li><span class="math inline">\(P\leftrightarrow Q\iff Q\leftrightarrowP\)</span></li></ul><h4 id="结合律-2">结合律</h4><ul><li><span class="math inline">\((P∧Q)∧R\iff P∧(Q∧R)\)</span></li><li><span class="math inline">\((P∨Q)∨R\iff P∨(Q∨R)\)</span></li><li><span class="math inline">\((P\leftrightarrow Q)\leftrightarrowR\iff P\leftrightarrow (Q\leftrightarrow R)\)</span></li></ul><h4 id="分配律-2">分配律</h4><ul><li><span class="math inline">\(P∧(Q∨R)\iff (P∧Q)∨(P∧R)\)</span></li><li><span class="math inline">\(P∨(Q∧R)\iff(P∨R)∧(P∨R)\)</span></li></ul><h4 id="否定深入">否定深入</h4><ul><li><span class="math inline">\(\neg \neg P \iff P\)</span></li><li><span class="math inline">\(\neg (P∧Q) \iff \neg P∨ \negQ\)</span></li><li><span class="math inline">\(\neg (P\vee Q) \iff \neg P\wedge \negQ\)</span></li><li><span class="math inline">\(\neg (P → Q)\iff P ∧ \negQ\)</span></li><li><span class="math inline">\(\neg(P \leftrightarrow Q) \iff \neg P\leftrightarrow Q \iff P \leftrightarrow \neg Q\)</span></li></ul><h4 id="联结词化归">联结词化归</h4><ul><li><span class="math inline">\(P∧Q\iff \neg（\neg P∨\negQ）\)</span></li><li><span class="math inline">\(P∨Q\iff \neg （\neg P∧\negQ）\)</span></li><li><span class="math inline">\(P→Q\iff \neg P∨Q\)</span></li><li><span class="math inline">\(P \leftrightarrow Q \iff (P→Q)∧(Q→P)\iff (\neg P∨Q) ∧(\neg Q∨P) \iff (P ∧ Q) ∨(\neg P ∧ \negQ)\)</span></li></ul><h3 id="命题与集合的关系">命题与集合的关系</h3><ul><li>将<spanclass="math inline">\(G，H\)</span>理解为某总体论域上的子集合，而规定<spanclass="math inline">\(G∧H\)</span>为两集合的公共部分（交集），<spanclass="math inline">\(G∨H\)</span>为两集合的全部（并集），<spanclass="math inline">\(\neg G\)</span>为总体论域（如矩形域）中<spanclass="math inline">\(G\)</span>的补集，将命题中的真值“1”理解为集合中的总体论域（全集），将命题中的真值“0”理解为集合中的空集</li></ul><h2 id="永真式永假式与蕴含式">永真式、永假式与蕴含式</h2><h3 id="定义-13">定义</h3><ul><li>公式G称为永真式，如果在它的所有解释之下都为“真”</li><li>公式G称为永假式，如果在它的所有解释之下都为“假”</li><li>公式G称为可满足的，如果它不是永假的</li></ul><h3 id="公式等价">公式等价</h3><h4 id="定义-14">定义</h4><ul><li>设G、H是公式，如果在任意解释I下，G与H的真值相同，则称公式G、H是等价的，记作<spanclass="math inline">\(G\iff H\)</span></li></ul><h4 id="定理-5">定理</h4><ul><li><span class="math inline">\(G\iffH\)</span>等价的充分必要条件为<span class="math inline">\(G\impliesH\)</span>且<span class="math inline">\(H\implies G\)</span></li><li>公式G、H等价的充分必要条件是公式<span class="math inline">\(G\iffH\)</span>是永真公式</li></ul><h4 id="性质-5">性质</h4><ul><li>由于“<spanclass="math inline">\(\iff\)</span>”不是一个联结词，而是一种关系，为此，这种关系具有如下三个性质：<ul><li>自反性 G=G</li><li>对称性 若G=H，则H=G</li><li>传递性 若G=H，H=S，则G=S</li></ul></li></ul><h2 id="命题逻辑推理">命题逻辑推理</h2><h3 id="基本蕴含式">基本蕴含式</h3><ul><li><span class="math inline">\((P \to Q) \land (Q \to R) \implies P \toR\)</span> (<strong>假言三段论</strong>)</li></ul><h3 id="定理-6">定理</h3><ul><li>若前提集合为<span class="math inline">\(\{ H_1，H_2，…，H_m\}\)</span>, 结论为<span class="math inline">\(P→ Q\)</span> ，则<spanclass="math inline">\(\{ H_1，H_2，…，H_m \}\implies P\toQ\)</span>等价于<spanclass="math inline">\(\{H_1，H_2，…，H_m，P\}\implies Q\)</span>(<strong>CP规则</strong>)</li></ul><h3 id="推理规则">推理规则</h3><ul><li><span class="math inline">\(P \to Q, Q \to R \vdash P \toR\)</span></li></ul><h3 id="公式蕴涵的证明方法">公式蕴涵的证明方法</h3><ul><li>真值表法</li><li>证<span class="math inline">\(G \to H\)</span>是恒真公式</li><li>利用一些基本等价式及蕴涵式进行推导</li><li>任取真值I，若I满足G，往证I满足H</li><li>反证法，设结论假，往证前提假</li></ul><h3 id="三个基本推理规则">三个基本推理规则</h3><ul><li>P规则(前提引入规则)：前提总是可用</li><li>T规则(推理引入规则)：推理中允许使用推理规则，所得结果在后面的推理中可用</li><li>CP规则(附加前提引入规则) ：证明<span class="math inline">\(P\toQ\)</span>时可将P作为附加前提引入</li></ul><h2 id="范式">范式</h2><h3 id="定义-15">定义</h3><h4 id="合取式">合取式</h4><ul><li>在一公式中，仅由命题变元及其否定构成的合取，称该公式为合取式</li><li>其中每个命题变元或其否定，称为合取项</li></ul><h4 id="析取式">析取式</h4><ul><li>在一公式中，仅由命题变元及其否定构成的析取，称该公式为析取式</li><li>其中每个命题变元或其否定，称为析取项</li></ul><h4 id="析取范式">析取范式</h4><ul><li>一个命题公式A称为析取范式可表示为：多个合取式的析取</li></ul><h4 id="合取范式">合取范式</h4><ul><li>一个命题公式A称为合取范式可表示为：多个析取式的合取</li></ul><h3 id="定理-7">定理</h3><ul><li>合取式为永假式的充要条件是：它同时含有某个命题变元及其否定</li><li>析取式为永真式的充要条件是：它同时含有某个命题变元及其否定</li><li>对于任何一命题公式，都存在与其等价的析取范式和合取范式</li></ul><h3 id="范式的应用">范式的应用</h3><ul><li>公式A为永假式的充要条件是其析取范式中每个简单合取式至少包含一个命题变元及其否定</li><li>公式A为永真式的充要条件是其合取范式中每个简单析取式至少包含一个命题变元及其否定</li></ul><h3 id="公式的主范式">公式的主范式</h3><h4 id="最小项">最小项</h4><ul><li>在含有n个命题变元的合取式中，若每个命题变元与其否定不同时存在，而二者之一出现一次且仅出现一次，则称该合取式为最小项</li><li>n个命题变元共形成<spanclass="math inline">\(2^n\)</span>个最小项</li><li>任意两个不同的最小项的合取式是永假的：<spanclass="math inline">\(m_i∧m_j\iff F,i≠j\)</span></li><li>所有最小项之析取为永真：<spanclass="math inline">\(\bigvee\limits_{i=1}^n m_i \iff T\)</span></li><li>每个最小项只有一个真值组合为真</li></ul><h4 id="最大项">最大项</h4><ul><li>在n个命题变元的析取式中，若每个命题变元与其否定不同时存在，而二者之一必出现一次且仅出现一次，则称该析取式为最大项</li><li>任何两个不同最大项之析取是永真的，即：<spanclass="math inline">\(M_i∨M_j\implies T,i≠j\)</span></li><li>所有最大项之合取为永假，即：<spanclass="math inline">\(\bigwedge\limits_{i=1}^n M_i \iff F\)</span></li><li>每个最大项只有一个真值组合为假，且其真值0位于主对角线上</li></ul><h4 id="主析取范式">主析取范式</h4><ul><li>在给定公式的析取范式中，若其合取式都是最小项，则称该范式为主析取范式</li><li>任意含n个命题变元的非永假命题公式A，都存在与其等价的主析取范式</li><li>任意含n个命题变元的非永假命题公式，其主析取范式是惟一的</li></ul><h4 id="主合取范式">主合取范式</h4><ul><li>在给定公式的合取范式中，若其所有简单析取式都是最大项，称该范式为主合取范式</li><li>任意含有n个命题变元的非永真命题公式A，都存在与其等价的主合取范式</li><li>任意含n个命题变元的非永真命题公式A，其主合取范式是唯一的</li></ul><h4 id="求法">求法</h4><ul><li>公式化归法</li><li>真值表法</li></ul><h4id="主析取范式与主合取范式之间的关系">主析取范式与主合取范式之间的关系</h4><ul><li>由于主范式是由最小项或最大项构成，由其定义，可知两者有下列关系：<spanclass="math inline">\(\neg m_i\iff M_i, \neg M_i\iff m_i\)</span></li><li>因此，主析取范式和主合取范式有着“互补”关系，即由公式的主析取范式可以求出其主合取范式</li></ul><h4 id="主范式的应用">主范式的应用</h4><ul><li>根据主范式的定义和定理，可以判定含n个命题变元的公式，其关键是先求出给定公式的主范式Ａ；其次按下列条件判定之：<ul><li>若<span class="math inline">\(A\iffＴ\)</span>，或A可化为与其等价的、含<spanclass="math inline">\(2^n\)</span>个最小项的主析取范式，则A为永真式</li><li>若<span class="math inline">\(A\iffＦ\)</span>，或A可化为与其等价的、含<spanclass="math inline">\(2^n\)</span>个最大项的主合取范式，则A为永假式</li><li>若A不与Ｔ或者Ｆ等价，且又不含<spanclass="math inline">\(2^n\)</span>个最小项或最大项，则A为可满足的</li></ul></li><li>由于任一公式的主范式是唯一的，所以将给定的公式求出其主范式，若主范式相同，则给定两公式是等价的</li></ul><h2 id="推理规则-1">推理规则</h2><h3 id="implies与to的不同">“<spanclass="math inline">\(\implies\)</span>”与“<spanclass="math inline">\(\to\)</span>”的不同</h3><ul><li>“<span class="math inline">\(→\)</span>”仅是一般的蕴涵联结词，<spanclass="math inline">\(G→H\)</span>的结果仍是一个公式，而“<spanclass="math inline">\(\implies\)</span>”却描述了两个公式G，H之间的一种逻辑蕴涵关系，<spanclass="math inline">\(G\implies H\)</span>的“结果”，是非命题公式</li><li>用计算机来判断<span class="math inline">\(G\impliesH\)</span>是办不到的。然而计算机却可“计算”公式<spanclass="math inline">\(G→H\)</span>是否为永真公式</li></ul><h1 id="谓词逻辑">谓词逻辑</h1><h2 id="谓词逻辑基本概念">谓词逻辑基本概念</h2><h3 id="谓词">谓词</h3><h4 id="定义-16">定义</h4><ul><li>用以刻划客体的性质或客体之间的关系即是谓词</li></ul><h4 id="简单命题函数">简单命题函数</h4><ul><li>由一个谓词和一些客体变元组成的表达式. <spanclass="math inline">\(A(x_1，x_2,…,x_n)\)</span>称n元命题函数或n元原子谓词公式，n元谓词就是有n 个客体变元的命题函数</li></ul><h4 id="复合命题函数">复合命题函数</h4><ul><li>由一个或 n个简单命题函数以及联结词组成的表达式</li></ul><h4 id="结论-1">结论</h4><ul><li>谓词中个体词的顺序是十分重要的，不能随意变更。如命题<spanclass="math inline">\(F(b, c)\)</span>为“真”，但命题<spanclass="math inline">\(F(c, b)\)</span>为“假”</li><li>一元谓词用以描述某一个个体的某种特性，而n元谓词则用以描述n个个体之间的关系</li><li>0元谓词(不含个体词的)实际上就是一般的命题</li><li>具体命题的谓词表示形式和n元命题函数(n元谓词)是不同的，前者是有真值的，而后者不是命题，它的真值是不确定的。如上例中S(a)是有真值的，但S(x)却没有真值</li><li>一个n元谓词不是一个命题，但将n元谓词中的个体变元都用个体域中具体的个体取代后，就成为一个命题。而且，个体变元在不同的个体域中取不同的值对是否成为命题及命题的真值有很大的影响</li></ul><h3 id="客体">客体</h3><ul><li>客体变元在哪些范围内取值（称客体），对是否成为命题及命题的真值都有影响</li><li>在命题函数中，命题变元的论述范围称作<strong>个体域</strong>，个体域可以是有限的，也可以是无限的，把各种个体域综合在一起作为论述范围的域称为<strong>全总客体域</strong></li></ul><h3 id="量词">量词</h3><h4 id="全称量词forall">全称量词<spanclass="math inline">\(\forall\)</span></h4><ul><li><span class="math inline">\(\forall\)</span>称为全称量词，“对所有的”,“每一个”, “对任一个”</li></ul><h4 id="存在量词exists">存在量词<spanclass="math inline">\(\exists\)</span></h4><ul><li><spanclass="math inline">\(\exists\)</span>称为存在量词,“存在一个”，“有一个”，“对于一些”</li></ul><h4 id="特性谓词">特性谓词</h4><ul><li>限定客体变元变化范围的谓词</li></ul><h4 id="注意-1">注意</h4><ul><li>由量词确定的表达式，都与个体域有关</li><li>用全总个体域，对每个的客体变元变化范围，用特性谓词加以限制，一般地：<ul><li>对全称量词，特性谓词常作条件的前提条件</li><li>对存在量词，特性谓词常作合取项</li></ul></li></ul><h3 id="谓词逻辑符号化的两条规则">谓词逻辑符号化的两条规则</h3><ul><li>统一个体域为全总个体域，而对每一个句子中个体变量的变化范围用一元特性谓词刻划之。这种特性谓词在加入到命题函数中时必定遵循如下原则：<ul><li>对于全称量词(<span class="math inline">\(\forallx\)</span>)，刻划其对应个体域的特性谓词作为蕴涵式之<strong>前件</strong>加入</li><li>对于存在量词(<span class="math inline">\(\existsx\)</span>)，刻划其对应个体域的特性谓词作为合取式之<strong>合取项</strong>加入</li></ul></li></ul><h2 id="谓词公式翻译">谓词公式翻译</h2><h3 id="谓词演算的逻辑公式">谓词演算的逻辑公式</h3><ul><li>原子谓词公式是逻辑公式，如Q，A(x)，A(x,y)，...</li><li>若<span class="math inline">\(A\)</span>是逻辑公式,则<spanclass="math inline">\(\neg A\)</span>也是逻辑公式</li><li>若A,B是逻辑公式，则<span class="math inline">\(A∧B\)</span>，<spanclass="math inline">\(A∨B\)</span>，<spanclass="math inline">\(A→B\)</span>，<spanclass="math inline">\(A\leftrightarrow B\)</span> 也是逻辑公式</li><li>若A是逻辑公式，x是A中出现的任何变元，则<spanclass="math inline">\(\forall xA\)</span>和<spanclass="math inline">\(\exists xA\)</span>也是逻辑公式</li></ul><h2 id="约束变元与自由变元">约束变元与自由变元</h2><h3 id="约束部分">约束部分</h3><ul><li>在谓词公式中,形如<span class="math inline">\(\forall x P(x)\)</span>，<span class="math inline">\(\exists xP(x)\)</span>的部分,称为谓词公式的<strong>x约束部分</strong><ul><li><span class="math inline">\(\forall\exists\)</span>后的x叫量词的<strong>指导变元</strong>或<strong>作用变元</strong></li><li>P(x)叫做相应量词的<strong>作用域</strong>或<strong>辖域</strong></li></ul></li></ul><h3 id="约束出现">约束出现</h3><ul><li>在作用域中x的一切出现，称为 x在公式中的<strong>约束出现</strong><ul><li>所有约束出现的变元叫做<strong>约束变元</strong></li><li>不受约束的变元为<strong>自由变元</strong></li></ul></li></ul><h3 id="n-k元谓词和有关命题">n-k元谓词和有关命题</h3><ul><li><spanclass="math inline">\(P(x_1,x_2,...,x_n)\)</span>是n元谓词，有n个独立的自由变元。若对其中k个变元进行约束，则称为<strong>n-k元谓词</strong>。若没有自由变量出现，则该式就成为<strong>有关命题</strong></li></ul><p>###　变元换名规则</p><ul><li>换名范围:量词中的指导变元和作用域中出现的该变元.公式中其余部分不变</li><li>要换成作用域中没有出现的变元名称</li></ul><h3 id="变元代入规则">变元代入规则</h3><ul><li>对该自由变元每一处进行代入</li><li>代入的变元与原公式中所有变元名称不能相同</li></ul><h2 id="谓词演算的等价式和蕴含式">谓词演算的等价式和蕴含式</h2><h3 id="基本概念">基本概念</h3><h4 id="等价">等价</h4><ul><li>任意给定两个谓词公式A和B , E 为它们共同的个体域, 若对A和B的任一组变元进行赋值, 所得命题真值相同,则称 A 和 B 在 E 上是等价的,记为<span class="math inline">\(A\iff B\)</span></li></ul><h4 id="永真的有效的">永真的(有效的)</h4><ul><li>给定任意谓词公式A，其个体域为E对于A的所有赋值A都真，则称A在E上是永真的(有效的)</li></ul><h4 id="可满足的">可满足的</h4><ul><li>一谓词公式A ，若至少在一种赋值下为真，则称A在E 上是可满足的</li></ul><h3 id="命题公式的推广">命题公式的推广</h3><ul><li>当用谓词演算中的公式代替命题演算中永真式的变元时，所得公式为<strong>有效公式</strong><ul><li><span class="math inline">\(∀𝑥(𝑃(𝑥)→𝑄(𝑥))\iff∀𝑥(¬𝑃(𝑥)∨𝑄(𝑥))\)</span></li></ul></li><li>量词与否定联结词<spanclass="math inline">\(\neg\)</span>间的关系：量词前的否定,是否定被量化了的<strong>整个命题</strong><ul><li><span class="math inline">\(¬∀𝑥𝑃(𝑥)\iff ∃𝑥¬𝑃(𝑥)\)</span></li><li><span class="math inline">\(¬∃𝑥𝑃(𝑥)\iff ∀𝑥¬𝑃(𝑥)\)</span></li></ul></li><li>量词作用域的扩张与收缩<ul><li><span class="math inline">\(∀𝑥(𝐴(𝑥)∨𝐵)\iff ∀𝑥𝐴(𝑥)∨𝐵\)</span></li><li><span class="math inline">\(∀𝑥(𝐴(𝑥)∧𝐵)\iff ∀𝑥𝐴(𝑥)∧𝐵\)</span></li><li><span class="math inline">\(∀𝑥(𝐴(𝑥)→𝐵)\iff ∃𝑥𝐴(𝑥)→𝐵\)</span></li><li><span class="math inline">\(∀𝑥(𝐵→𝐴(𝑥))\iff 𝐵→∀𝑥𝐴(𝑥)\)</span></li><li><span class="math inline">\(∃𝑥(𝐴(𝑥)∨𝐵)\iff ∃𝑥𝐴(𝑥)∨𝐵\)</span></li><li><span class="math inline">\(∃𝑥(𝐴(𝑥)∧𝐵)\iff ∃𝑥𝐴(𝑥)∧𝐵\)</span></li><li><span class="math inline">\(∃𝑥𝐴(𝑥)→𝐵\iff ∀𝑥(𝐴(𝑥)→𝐵)\)</span></li><li><span class="math inline">\(∃𝑥(𝐵→𝐴(𝑥))\iff 𝐵→∃𝑥𝐴(𝑥)\)</span></li></ul></li><li>量词分配律<ul><li><span class="math inline">\(∀𝑥(𝐴(𝑥)∧𝐵(𝑥))\iff∀𝑥𝐴(𝑥)∧∀𝑥𝐵(𝑥)\)</span></li><li><span class="math inline">\(∃𝑥(𝐴(𝑥)∨𝐵(𝑥))\iff∃𝑥𝐴(𝑥)∨∃𝑥𝐵(𝑥)\)</span></li></ul></li><li>蕴含式<ul><li><span class="math inline">\(∀𝑥𝐴(𝑥)∨∀𝑥𝐵(𝑥)\implies∀𝑥(𝐴(𝑥)∨𝐵(𝑥))\)</span></li><li><span class="math inline">\(∃𝑥(𝐴(𝑥)∧𝐵(𝑥))\implies∃𝑥𝐴(𝑥)∧∃𝑥𝐵(𝑥)\)</span></li></ul></li><li>含多个变元的等价式和蕴含式<ul><li><span class="math inline">\(∀𝑥∀𝑦𝑃(𝑥,𝑦)\iff ∀𝑦∀𝑥𝑃(𝑥,𝑦)\)</span></li><li><span class="math inline">\(∀𝑥∀𝑦𝑃(𝑥,𝑦)\implies∃𝑦∀𝑥𝑃(𝑥,𝑦)\)</span></li><li><span class="math inline">\(∀𝑦∀𝑥𝑃(𝑥,𝑦)\implies∃𝑥∀𝑦𝑃(𝑥,𝑦)\)</span></li><li><span class="math inline">\(∃𝑦∀𝑥𝑃(𝑥,𝑦)\implies∀𝑥∃𝑦𝑃(𝑥,𝑦)\)</span></li><li><span class="math inline">\(∃𝑥∀𝑦𝑃(𝑥,𝑦)\implies∀𝑦∃𝑥𝑃(𝑥,𝑦)\)</span></li><li><span class="math inline">\(∀𝑥∃𝑦𝑃(𝑥,𝑦)\implies∃𝑦∃𝑥𝑃(𝑥,𝑦)\)</span></li><li><span class="math inline">\(∀𝑦∃𝑥𝑃(𝑥,𝑦)\implies∃𝑥∃𝑦𝑃(𝑥,𝑦)\)</span></li><li><span class="math inline">\(∃𝑥∃𝑦𝑃(𝑥,𝑦)\iff ∃𝑦∃𝑥𝑃(𝑥,𝑦)\)</span></li></ul></li></ul><h2 id="谓词逻辑的推理理论">谓词逻辑的推理理论</h2><h3 id="规则">规则</h3><ul><li>设 A(x)是谓词公式<ul><li>全称移去规则 US (全称指定)：<spanclass="math inline">\(∀𝑥𝐴(𝑥)⇒𝐴(𝑐)\)</span>，c 是论域中某个任意客体</li><li>全称附加规则 UG (全称推广)：<spanclass="math inline">\(𝐴(𝑐)⇒∀𝑥𝐴(𝑥)\)</span>，每个 c, A(c)为真</li><li>存在移去规则 ES (存在指定)：<spanclass="math inline">\(∃𝑥𝐴(𝑥)⇒𝐴(𝑐)\)</span>，c是论域中使A(c)为真的客体</li><li>存在附加规则 EG (存在推广)：<spanclass="math inline">\(𝐴(𝑐)⇒∃𝑥𝐴(𝑥)\)</span>，c是论域中使A(c)为真的客体</li></ul></li></ul><h3 id="谓词演算的综合推理方法">谓词演算的综合推理方法</h3><ul><li>推导过程中可以引用命题演算中的P规则 和T规则</li><li>如果结论是以蕴涵形式(或析取形式)给出，我们还可以使用CP规则</li><li>若需消去量词，可以引用US规则和ES规则</li><li>当所要求的结论可能被定量时，此时可引用UG规则和EG规则将其量词加入</li><li>证明时可采用如命题演算中的直接证明方法和间接证明方法</li><li>在推导过程中，对消去量词的公式或公式中不含量词的子公式，完全可以引用命题演算中的基本等价公式和基本蕴涵公式</li><li>在推导过程中，对含有量词的公式可以引用谓词中的基本等价公式和基本蕴涵公式</li></ul><h1 id="图的基本概念">图的基本概念</h1><h2 id="图与子图">图与子图</h2><h3 id="图的定义">图的定义</h3><ul><li>图G是由非空集合<spanclass="math inline">\(V=\{v_1,v_2,…,v_n\}\)</span>，以及边的集合<spanclass="math inline">\(E=\{l_1,l_2,…,l_m\}\)</span>所组合，其中每条边可用一个结点对表示，即：<spanclass="math inline">\(l_i=(v_{i1},v_{i2}),i=1,2,…,m\)</span>，这样的图G可用<spanclass="math inline">\(G=(V，E)\)</span>表示</li></ul><h3 id="图的基本概念-1">图的基本概念</h3><h4 id="有向图">有向图</h4><ul><li>图中的所有边均为有向边，有向边<spanclass="math inline">\(l_k=&lt;v_i,v_j&gt;\)</span>, <spanclass="math inline">\(v_i\)</span>为起点，<spanclass="math inline">\(v_j\)</span>为终点，箭头指向终点</li></ul><h4 id="无向图">无向图</h4><ul><li>图中的所有边均为无向边</li></ul><h4 id="邻接与环">邻接与环</h4><ul><li>多条边关联于同一个结点，则这些边称为邻接的</li><li>构成边的一对结点之间称为邻接的</li><li>若一条边由相同的结点构成，则称为环<spanclass="math inline">\((v_i,v_i)\)</span></li></ul><h4 id="零图与平凡图">零图与平凡图</h4><ul><li>仅含一些孤立点的图称为零图</li><li>特别，仅含一个孤立点的零图称为平凡图</li></ul><h4 id="多重图与线图">多重图与线图</h4><ul><li>有相同端点（起终点）的两条无（有）向边叫做<strong>重边</strong></li><li>含重边的图称为多重图</li><li>非多重图称为线图</li><li>不含自环和重边的图称为简单图（无自环的线图）</li></ul><h4 id="完全图">完全图</h4><ul><li>每对结点间都有一条无向边（一对方向相反的有向边）的简单图，称为无（有）向完全图</li><li>设G是含有n个顶点和m条边的无（有）向完全图<spanclass="math inline">\(m=n(n-1)/2,m=n(n-1)\)</span></li></ul><h4 id="赋权图">赋权图</h4><ul><li>赋权图G是一个三重组<span class="math inline">\((V, E,g)\)</span>，其中V是结点集合，E是边的集合</li></ul><h4 id="子图与补图">子图与补图</h4><ul><li>若<span class="math inline">\(V’\subseteq V, E’\subseteq E\)</span>,则称<span class="math inline">\(G’=(V’,E’)\)</span>是<spanclass="math inline">\(G=(V,E)\)</span>的<strong>子图</strong></li><li><span class="math inline">\(E’\subseteqE\)</span>之子图叫做<strong>真子图</strong></li><li><spanclass="math inline">\(V’=V\)</span>之子图叫做<strong>生成子图</strong></li><li>设<span class="math inline">\(V’\subseteq V\)</span>且$V’≠<spanclass="math inline">\(，以\)</span>V’<spanclass="math inline">\(为结点集，以两个端点均在\)</span>V<spanclass="math inline">\(’中的边的全体为边集的G的子图，称为\)</span>V’<spanclass="math inline">\(导出的G的子图，简称\)</span>V’$的<strong>导出子图</strong></li><li>图<span class="math inline">\(G’=(V’, E’)\)</span>是图<spanclass="math inline">\(G=(V, E)\)</span>的子图。若G有子图<spanclass="math inline">\(G’’=(V’’, E’’)\)</span>,其中<spanclass="math inline">\(E’’=E-E’\)</span>，<spanclass="math inline">\(V’’\)</span>是仅含<spanclass="math inline">\(E’’\)</span>中的边关联的结点和不在<spanclass="math inline">\(G’\)</span>中的<spanclass="math inline">\(G\)</span>的孤立点的集合，则称<spanclass="math inline">\(G’’\)</span>是<spanclass="math inline">\(G’\)</span>关于<spanclass="math inline">\(G\)</span>的**补图*8</li><li>若称图<span class="math inline">\(G\)</span>和<spanclass="math inline">\(G’\)</span>互为补图，则两图<spanclass="math inline">\(G=(V, E)、G’=(V, E’)\)</span>满足：<ul><li><span class="math inline">\(E∩E’=\varnothing\)</span></li><li><span class="math inline">\((V, E∪E’)\)</span>是完全图</li></ul></li></ul><h4 id="节点的次数">节点的次数</h4><ul><li>结点的(全)度数d(v)：与结点v相关联的边数</li><li>在有向图中，度数又分为：<ul><li>引入度数<spanclass="math inline">\(d^-(v)\)</span>：以v为终点的边数</li><li>引出度数<spanclass="math inline">\(d^+(v)\)</span>：以v为起点的边数</li></ul></li><li><span class="math inline">\(d(v) = d^-(v)+ d^+(v)\)</span></li><li>次数为奇（偶）数的结点称为奇（偶）结点</li><li>图中若有奇结点，则必有偶数个奇结点</li><li>图中所有结点次数之和必为偶数，为图中边数的两倍</li></ul><h4 id="握手定理">握手定理</h4><ul><li>(n, m)图中，结点的总次数为：<spanclass="math inline">\(\sum\limits_{i=1}^nd(v_i)=2m\)</span></li></ul><h3 id="图的同构">图的同构</h3><h4 id="定义-17">定义</h4><ul><li>图<span class="math inline">\(G=(V, E)\)</span>与<spanclass="math inline">\(G’=(V’, E’)\)</span>，如果存在双射函数<spanclass="math inline">\(ƒ:V→V’\)</span>, 使得边也一一对应，则称<spanclass="math inline">\(G\)</span>与<spanclass="math inline">\(G’\)</span>同构</li></ul><h4 id="同构的必要条件">同构的必要条件</h4><ul><li>结点数目相同</li><li>边数相同</li><li>度数相同的结点数相同</li></ul><h2 id="通路回路与连通性">通路、回路与连通性</h2><h3 id="通路">通路</h3><h4 id="定义-18">定义</h4><ul><li>(有向)图中k条(首尾)相连的边<spanclass="math inline">\((v_{i0},v_{i1}),(v_{i1},v_{i2}),…,(v_{ik-1},v_{ik})\)</span>,记成<spanclass="math inline">\((v_{i0},v_{i1},v_{i2}, …,v_{ik})\)</span>，其中：<spanclass="math inline">\(v_{i0}\)</span>：起点，<spanclass="math inline">\(v_{ik}\)</span>：终点，<spanclass="math inline">\(k\)</span>：通路长度</li></ul><h4 id="简单通路">简单通路</h4><ul><li>边不同之通路</li></ul><h4 id="基本通路">基本通路</h4><ul><li>结点不同之通路</li></ul><h4 id="可达">可达</h4><ul><li>从结点u到结点v有通路，称u到v可达</li></ul><h4 id="短程线">短程线</h4><ul><li>两点间最短的通路</li></ul><h4 id="距离duv">距离d(u,v)</h4><ul><li>从u到v的短程线的长度(不可达则为无限)</li></ul><h3 id="回路">回路</h3><h4 id="定义-19">定义</h4><ul><li><spanclass="math inline">\(v_{i0}=v_{ik}\)</span>之通路，即“起点=终点”之通路</li></ul><h4 id="简单回路">简单回路</h4><ul><li>边不同之回路</li></ul><h4 id="基本回路">基本回路</h4><ul><li>结点不同之回路</li></ul><h3 id="结论-2">结论</h3><ul><li>任一通路删去所有回路必得基本通路</li><li>任一回路删去其中间回路必得基本回路</li></ul><h3 id="定理-8">定理</h3><ul><li>一个(n,m)有向图中任何基本通路长度都小于n，而任何基本回路长度都不大于n</li></ul><h3 id="连通性">连通性</h3><h4 id="无向连通图">无向连通图</h4><ul><li>任两点间均是可达的无向图</li></ul><h4 id="有向连通图">有向连通图</h4><ul><li>去掉边的方向后是无向连通图之有向图</li></ul><h4 id="强连通图">强连通图</h4><ul><li>任两点间均互相可达之有向图</li></ul><h4 id="单向连通图">单向连通图</h4><ul><li>任两点间至少有一向可达之有向图</li></ul><h4 id="弱连通图">弱连通图</h4><ul><li>有向连通图</li></ul><h2 id="图的矩阵表示法">图的矩阵表示法</h2><h3 id="有向图的邻接矩阵">有向图的邻接矩阵</h3><h4 id="定义-20">定义</h4><ul><li>对图 <span class="math inline">\(G=(\{v_1,v_2, …, v_n\},E)\)</span>,其邻接矩阵<span class="math inline">\(A\)</span>如下构成： <spanclass="math inline">\(A=(a_{ij})_{n\times n},a_{ij}=\begin{cases}1 &amp;v_i与v_j邻接\\0 &amp; v_i不与v_j邻接\end{cases}\)</span></li></ul><h4 id="矩阵中的信息">矩阵中的信息</h4><ul><li>结点<span class="math inline">\(v_i\)</span>的次数<ul><li>引出次数：<span class="math inline">\(d^+(v_i)=\sum\limits_{k=1}^na_{ik}\)</span></li><li>引出次数：<span class="math inline">\(d^-(v_i)=\sum\limits_{k=1}^na_{ki}\)</span></li></ul></li><li><span class="math inline">\(A^l\)</span><ul><li>令 <span class="math inline">\(C=A^l, c_{ij}\)</span> 是<spanclass="math inline">\(v_i\)</span>到<spanclass="math inline">\(v_j\)</span>的长度为<spanclass="math inline">\(l\)</span>的通路数目</li></ul></li></ul><h3 id="可达性矩阵">可达性矩阵</h3><ul><li><span class="math inline">\(R_n=A+A^2+…+A^n\)</span> ——反映任两点间的通路数目</li><li>可达性矩阵P —— 将<spanclass="math inline">\(R_n\)</span>中的非零值改为1——反映任两点间是否可达</li><li>P也可如下计算：$P=A (+) A^{(2)} (+) … (+) A^{(n)} $</li></ul><h3 id="无向图的矩阵表示">无向图的矩阵表示</h3><h4 id="无向图的邻接矩阵">无向图的邻接矩阵</h4><ul><li>无向图的邻接矩阵与有向图的类似，并且是对称的</li><li>结点的次数只要计算行(或列)之和即可，但对角线上的1要计算2次</li><li>矩阵<span class="math inline">\(R_n\)</span>及P的计算方法也相同</li></ul><h3 id="多重图的邻接矩阵">多重图的邻接矩阵</h3><ul><li>1改为重边的数目</li></ul><h3 id="有权图的邻接矩阵">有权图的邻接矩阵</h3><ul><li>1改为权值</li></ul><h3 id="矩阵与图的连通性">矩阵与图的连通性</h3><ul><li>无向图G是连通的<spanclass="math inline">\(\iff\)</span>G的可达性矩阵P除对角元外均为1</li><li>有向图G是强连通的<spanclass="math inline">\(\iff\)</span>G的可达性矩阵P除对角元外均为1</li><li>有向图G是单向连通的<span class="math inline">\(\iff P(+)P^T\)</span>(P的转置)除对角元外均为1</li><li>有向图G是弱连通的<span class="math inline">\(\iffA(+)A^T\)</span>图的可达性矩阵P除对角元外均为1 （A是G的邻接矩阵）</li></ul><h1 id="特殊图">特殊图</h1><h2 id="欧拉图及其应用">欧拉图及其应用</h2><h3 id="欧拉回路">欧拉回路</h3><ul><li>通过图中每条边一次之回路</li><li>欧拉回路是经过图中所有边的回路中长度最短的回路，即为通过图中所有边的简单回路</li></ul><h3 id="欧拉图">欧拉图</h3><ul><li>有欧拉回路之图</li></ul><h3 id="欧拉通路">欧拉通路</h3><ul><li>通过图中每条边一次之通路(非回路)</li><li>欧拉通路是经过图中所有边的通路中长度最短的通路，即为通过图中所有边的简单通路</li></ul><h3 id="定理-9">定理</h3><ul><li>无向连通图G是欧拉图<spanclass="math inline">\(\iff\)</span>G的所有结点的次数都是偶数</li><li>无向连通图中结点u、v之间有欧拉通路<spanclass="math inline">\(\iff\)</span>图中u、v的次数是奇数，其余结点的次数均为偶数</li><li>无向连通图G是欧拉图的充分必要条件是G的每个结点均具有偶次数</li></ul><h3 id="应用">应用</h3><ul><li>一笔画问题</li><li>蚂蚁比赛问题</li><li>邮递员问题</li><li>洒水车</li></ul><h2 id="哈密顿图及其应用">哈密顿图及其应用</h2><h3 id="哈密顿回路">哈密顿回路</h3><ul><li>通过图中每个结点一次之回路</li><li>是经过图中所有结点的回路中长度最短的回路，即为通过图中所有结点的基本回路</li></ul><h3 id="哈密顿图">哈密顿图</h3><ul><li>有哈密顿回路之图</li></ul><h3 id="哈密顿通路">哈密顿通路</h3><ul><li>通过图中每个结点一次之通路(非回路)</li><li>是经过图中所有结点的通路中长度最短的通路，即为通过图中所有结点的基本通路</li></ul><h3 id="定理-10">定理</h3><ul><li>设无向图<spanclass="math inline">\(G=(V,E)\)</span>是哈密顿图，<spanclass="math inline">\(\varnothing \subseteq V_1 \subseteq V\)</span>，则<span class="math inline">\(\omega(G-V_1)\leq|V_1|\)</span>（<strong>必要</strong>）</li><li>设无向图<span class="math inline">\(G = (V,E)\)</span>中存在哈密顿通路，则对<spanclass="math inline">\(V\)</span>的任意非空子集<spanclass="math inline">\(V_1\)</span>，都有<spanclass="math inline">\(ω(G-V_1) ≤ |V_1| + 1\)</span></li><li>设<span class="math inline">\(G = (V,E)\)</span>是具有n个结点的简单无向图。如果对任意两个不相邻的结点<spanclass="math inline">\(u, v∈V\)</span>，均有<spanclass="math inline">\(d(u)+d(v)≥n-1\)</span>则G中存在哈密顿通路</li><li>设<span class="math inline">\(G = (V,E)\)</span>是具有n个结点的简单无向图：<ul><li>如果对任意两个不相邻的结点<span class="math inline">\(u,v∈V\)</span>，均有<spanclass="math inline">\(d(u)+d(v)≥n\)</span>则G中存在哈密顿回路</li><li><span class="math inline">\(n≥3\)</span>，如果对任意<spanclass="math inline">\(v∈V\)</span>，均有<spanclass="math inline">\(d(v)≥ n/2\)</span>，则G是哈密顿图</li></ul></li><li>设<span class="math inline">\(G=(V, E)\)</span>是有<spanclass="math inline">\(n(n≥2)\)</span>个结点的一些简单有向图。如果忽略G中边的方向所得的无向图中含生成子图<spanclass="math inline">\(K_n\)</span>，则有向图G中存在哈密顿通路</li><li>设<span class="math inline">\(G=(V,E)\)</span>是有向图，<spanclass="math inline">\(|V|\geq2\)</span>，如果任意两个不同结点次数之和<span class="math inline">\(\geq|V|-1\)</span>，则G存在哈密顿通路(判断有向图是否是哈密顿图不要求)</li></ul><h3 id="哈密顿图的应用">哈密顿图的应用</h3><ul><li>考试安排问题</li><li>推销员问题</li></ul><h2 id="树">树</h2><h3 id="树-1">树</h3><ul><li>不含回路的简单连通无向图</li></ul><h3 id="叶">叶</h3><ul><li>树中次数为1的结点</li></ul><h3 id="森林">森林</h3><ul><li>每个连通分支是树的无向图</li></ul><h3 id="树枝">树枝</h3><ul><li>无向树（林）中的边</li></ul><h3 id="树的性质">树的性质</h3><ul><li>设无向图<span class="math inline">\(G = (V,E)，|V| = n，|E| =m\)</span>，下列各命题是等价的<ul><li>G连通而不含回路(即G是树)</li><li>G中无回路，且<span class="math inline">\(m = n-1\)</span></li><li>G是连通的，且<span class="math inline">\(m = n-1\)</span></li><li>G中无回路，但在G中任二结点之间增加一条新边，就得到惟一的一条基本回路</li><li>G是连通的，但删除G中任一条边后，便不连通(<spanclass="math inline">\(n≥2\)</span>)</li><li>G中每一对结点之间有惟一一条基本通路(<spanclass="math inline">\(n≥2\)</span>)</li></ul></li></ul><h3 id="定理-11">定理</h3><ul><li>任意非平凡树<span class="math inline">\(T = (n, m)\)</span>都至少有两片叶</li></ul><h3 id="生成树">生成树</h3><h4 id="定义-21">定义</h4><ul><li>给定图<span class="math inline">\(G = (V,E)\)</span>，若G的某个生成子图是树，则称之为G的生成树(SpanningTree)，记为TG。生成树TG中的边称为树枝(Branch)</li></ul><h4 id="定理-12">定理</h4><ul><li>一个图<span class="math inline">\(G = (V, E)\)</span>存在生成树<spanclass="math inline">\(T _G = (V,E_T)\)</span>的充分必要条件是G是连通的</li></ul><h4 id="破圈法与避圈法">破圈法与避圈法</h4><ul><li><strong>破圈法算法</strong> 求连通图<span class="math inline">\(G =(V,E)\)</span>的生成树的破圈法：每次删除回路中的一条边，其删除的边的总数为<spanclass="math inline">\(m-n+1\)</span></li><li><strong>避圈法算法</strong> 求连通图<span class="math inline">\(G =(V,E)\)</span>的生成树的避圈法：每次选取G中一条与已选取的边不构成回路的边，选取的边的总数为<spanclass="math inline">\(n-1\)</span></li></ul><h4 id="最小生成树">最小生成树</h4><ul><li>设<span class="math inline">\(G = (V,E)\)</span>是连通的赋权图，T是G的一棵生成树，T的每个树枝所赋权值之和称为T的权(Weight)，记为<spanclass="math inline">\(W(T)\)</span>。G中具有最小权的生成树称为G的最小生成树(MinimalSpanning Tree)</li></ul><h4 id="kruskal算法">Kruskal算法</h4><ul><li>(1)在G中选取最小权边<spanclass="math inline">\(e_1\)</span>，置<span class="math inline">\(i =1\)</span></li><li>(2)当<span class="math inline">\(i =n-1\)</span>时，结束，否则转(3)</li><li>(3)设已选取的边为<span class="math inline">\(e_1, e_2, …,e_i\)</span>，在G中选取不同于<span class="math inline">\(e_1, e_2, …,e_i\)</span>的边<span class="math inline">\(e_{i+1}\)</span>，使<spanclass="math inline">\(\{e_1, e_2, …, e_i,e_{i+1}\}\)</span>中无回路且<spanclass="math inline">\(e_{i+1}\)</span>是满足此条件的最小权边</li><li>(4)置<span class="math inline">\(i = i+1\)</span>，转(2)</li></ul><h4 id="prim算法">Prim算法</h4><ul><li>(1)在G中任选取一个结点<spanclass="math inline">\(v_1\)</span>，置<span class="math inline">\(V_T ={v_1}, E_T = \varnothing，k = 1\)</span></li><li>(2)在<span class="math inline">\(V-V_T\)</span>中选取与某个<spanclass="math inline">\(v_i∈V_T\)</span>邻接的结点<spanclass="math inline">\(v_j\)</span>，使得边<spanclass="math inline">\((v_i, v_j)\)</span>的权最小，置<spanclass="math inline">\(V_T = V_T∪{v_j}, E_T = E_T∪{(v_i, v_j)}，k =k+1\)</span></li><li>(3)重复(2)，直到<span class="math inline">\(k = |V|\)</span></li></ul><h3 id="有向树">有向树</h3><h4 id="定义-22">定义</h4><ul><li>一个有向图，若略去所有有向边的方向所得到的无向图是一棵树，则这个有向图称为有向树(DirectedTree)</li></ul><h4 id="外向树">外向树</h4><ul><li>T仅有一个结点的引入次数为0，该结点为T的<strong>根</strong></li><li>T的其他结点的入度均为1</li><li>T有一些结点的出度为0，该结点为T的<strong>叶</strong></li><li>由外向树的根到结点<spanclass="math inline">\(v_i\)</span>的通路长度称为结点<spanclass="math inline">\(v_i\)</span>的<strong>级</strong></li><li>若从结点<span class="math inline">\(v_i\)</span>到<spanclass="math inline">\(v_j\)</span>可达，则称<spanclass="math inline">\(v_i\)</span>是<spanclass="math inline">\(v_j\)</span>的<strong>祖先</strong>(Ancestor)，<spanclass="math inline">\(v_j\)</span>是<spanclass="math inline">\(v_i\)</span>的<strong>后代</strong>(Descendant)</li><li>若<span class="math inline">\(&lt;v_i,v_j&gt;\)</span>是根树中的有向边，则称<spanclass="math inline">\(v_i\)</span>是<spanclass="math inline">\(v_j\)</span>的<strong>父亲</strong>(Father)，<spanclass="math inline">\(v_j\)</span>是<spanclass="math inline">\(v_i\)</span>的<strong>儿子</strong>(Son)</li><li>如果两个结点是同一个结点的儿子，则称这两个结点是<strong>兄弟</strong>(Brother)</li><li>若每个分支点至多有k个儿子，则称T为<strong>k元树</strong>(k-aryTree)</li><li>若每个分支点都恰有k个儿子，则称T为<strong>k元完全树</strong>(k-aryComplete Tree)</li><li>若k元树T是有序的，则称T为<strong>k元有序树</strong>(k-ary OrderedTree)</li><li>若k元完全树T是有序的，则称T为<strong>k元有序完全树</strong>(k-aryOrdered Complete Tree)</li></ul><h4 id="内向树">内向树</h4><ul><li>T仅有一个结点的引出次数为0，该结点为T的<strong>根</strong></li><li>T的其他结点的引出次数均为1</li><li>T有一些结点的引入次数为0，该结点为T的<strong>叶</strong></li></ul><h4 id="有序树">有序树</h4><ul><li>如果在外向树中规定了每一层上结点的次序，这样的根树称为有序树</li><li>一般地，在有序树中同一层中结点的次序为从左至右。有时也可以用边的次序来代替结点的次序</li></ul><h4 id="二元树的遍历">二元树的遍历</h4><ul><li>二元树的<strong>先根次序遍历算法</strong>：<ul><li>访问根</li><li>按先根次序遍历根的左子树</li><li>按先根次序遍历根的右子树</li></ul></li><li>二元树的<strong>中根次序遍历算法</strong>:<ul><li>按中根次序遍历根的左子树</li><li>访问根</li><li>按中根次序遍历根的右子树</li></ul></li><li>二元树的<strong>后根次序遍历算法</strong>：<ul><li>按后根次序遍历根的左子树</li><li>按后根次序遍历根的右子树</li><li>访问根</li></ul></li></ul><h4 id="根树转化为二元树算法">根树转化为二元树算法</h4><ul><li>从根开始，保留每个父亲同其最左边儿子的连线，撤销与别的儿子的连线</li><li>兄弟间用从左向右的有向边连接</li><li>按如下方法确定二元树中结点的左儿子和右儿子：直接位于给定结点下面的结点，作为左儿子，对于同一水平线上与给定结点右邻的结点，作为右儿子，依此类推</li><li><strong>转化的要点</strong>：弟弟结点变右儿子结点</li></ul><h2 id="二分图">二分图</h2><h3 id="定义-23">定义</h3><ul><li>若无向图<span class="math inline">\(G = (V,E)\)</span>的结点集V能够划分为两个子集<span class="math inline">\(V_1,V_2\)</span>，满足<span class="math inline">\(V_1∩V_2 =\varnothing\)</span>，且<span class="math inline">\(V_1∪V_2 =V\)</span>，使得G中任意一条边的两个结点，一个属于<spanclass="math inline">\(V_1\)</span>，另一个属于<spanclass="math inline">\(V_2\)</span>，则称G为二分图(Bigraph)。<spanclass="math inline">\(V_1\)</span>和<spanclass="math inline">\(V_2\)</span>称为<strong>互补结点子集</strong>，二分图可记为<spanclass="math inline">\(G = (V_1, V_2)\)</span></li><li>二分图没有自回路</li><li>平凡图和零图可看成特殊的二分图</li></ul><h3 id="完全二分图">完全二分图</h3><ul><li>在二分图<span class="math inline">\(G = (V_1,V_2)\)</span>中，若<spanclass="math inline">\(V_1\)</span>中的每个结点与<spanclass="math inline">\(V_2\)</span>中的每个结点都有且仅有一条边相关联，则称二分图G为完全二分图(CompleteBigraph)，记为<span class="math inline">\(K_{m,n}\)</span>，其中，<spanclass="math inline">\(m = |V_1|，n = |V_2|\)</span></li></ul><h3 id="二分图的判定">二分图的判定</h3><ul><li>无向图<span class="math inline">\(G = (V,E)\)</span>为二分图的<strong>充分必要条件</strong>是G的所有回路的长度均为偶数</li><li><strong>无向图G不是二分图的充分必要条件是G中存在长度为奇数的回路</strong></li></ul><h3 id="匹配">匹配</h3><ul><li>在二分图<span class="math inline">\(G = (V_1, V_2)\)</span>中，<spanclass="math inline">\(V_1 = \{v_1, v_2, …,v_q\}\)</span>，若存在E的子集<span class="math inline">\(E’= \{(v_1,v_1’)，(v_2, v_2’)，…，(v_q, v_q’)，其中v_1’, v_2’, …, v_q’是V_2中的q个不同的结点\}\)</span>，则称G的子图<spanclass="math inline">\(G’ = (V_1, E’, V_2)\)</span>为从<spanclass="math inline">\(V_1\)</span>到<spanclass="math inline">\(V_2\)</span>的一个<strong>完全匹配</strong>(CompleteMatching)，简称匹配</li></ul><h2 id="平面图">平面图</h2><h3 id="定义-24">定义</h3><ul><li>如果能把一个无向图G的所有结点和边画在平面上，使得任何两边除公共结点外没有其他交叉点，则称G为平面图(PlaneGraph)，否则称G为非平面图(NonplanarGraph)。<strong>当且仅当一个图的每个连通分支都是平面图时，这个图是平面图</strong></li></ul><h3 id="判断图是否是可平面图的方法">判断图是否是可平面图的方法</h3><h4 id="观察法">观察法</h4><h4 id="欧拉公式">欧拉公式</h4><ul><li>在平面图G的一个平面表示中，<ul><li>由边所包围的其内部不包含图的结点和边的区域，称为G的<strong>一个面</strong>(Surface)</li><li>包围该面的诸边所构成的回路称为这个面的<strong>边界</strong>(Bound)</li><li>面r的边界的长度称为该面的<strong>次数</strong>(Degree)，记为<spanclass="math inline">\(D(r)\)</span></li><li>区域面积有限的面称为<strong>有限面</strong>(FiniteSurface)，区域面积无限的面称为<strong>无限面</strong>(InfiniteSurface)</li><li>平面图有且仅有一个无限面</li></ul></li><li>平面图中所有面的次数之和等于边数的二倍</li><li>设<span class="math inline">\(G = (V,E)\)</span>是连通平面图，若它有<spanclass="math inline">\(n\)</span>个结点、<spanclass="math inline">\(m\)</span>条边和<spanclass="math inline">\(r\)</span>个面，则有<spanclass="math inline">\(n-m+r = 2\)</span></li><li>设设G是一个<spanclass="math inline">\((n,m)\)</span>简单连通平面图，若<spanclass="math inline">\(m＞1\)</span>，则有<spanclass="math inline">\(m≤3n-6\)</span></li><li>一个简单连通图，若不满足<spanclass="math inline">\(m≤3n-6\)</span>，则一定是非平面图</li></ul><h4 id="库拉托夫斯基定理">库拉托夫斯基定理</h4><ul><li>一个图是平面图的<strong>充分必要条件</strong>是它的任何子图都不可能收缩为<spanclass="math inline">\(K_5\)</span>或<spanclass="math inline">\(K_{3,3}\)</span></li><li>一个图是非平面图的充分必要条件是它存在一个能收缩为<spanclass="math inline">\(K_5\)</span>或<spanclass="math inline">\(K_{3,3}\)</span>的子图</li><li>我们将<span class="math inline">\(K_5\)</span>和<spanclass="math inline">\(K_{3,3}\)</span>称为<strong>库拉托夫斯基图</strong>(KuratowskiGraph)</li></ul><h3 id="平面图的应用">平面图的应用</h3><ul><li>公共事业问题</li></ul>]]></content>
    
    
    <categories>
      
      <category>Math</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Math</tag>
      
      <tag>Discrete Mathematics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis的数据类型</title>
    <link href="/posts/14492/"/>
    <url>/posts/14492/</url>
    
    <content type="html"><![CDATA[<p>Redis 支持五种数据类型：</p><ul><li>string</li><li>hash</li><li>list</li><li>set</li><li>zset</li></ul><h2 id="string">String</h2><p>string 是最基本的类型。string 二进制安全，即可以包含任何数据。</p><p>string 一个键最大能存储512MB。</p><p>string类型的数据结构存储方式有三种<code>int</code>、<code>raw</code>、<code>embstr</code>：</p><h3 id="int">int</h3><p>Redis中规定假如存储的是<strong>整数型值</strong>，比如<code>set num 123</code>这样的类型，就会使用<code>int</code>的存储方式进行存储，在<code>redisObject</code>的<code>ptr属性</code>中就会保存该值。<img src="/posts/14492/int-1682306725947-10.png" class="" title="int"></p><h3 id="sds">SDS</h3><p>假如存储的<strong>字符串是一个字符串值并且长度大于32个字节</strong>就会使用SDS（simple dynamicstring）方式进行存储，并且<code>encoding</code>设置为<code>raw</code>；若是<strong>字符串长度小于等于32个字节</strong>就会将<code>encoding</code>改为<code>embstr</code>来保存字符串。</p><p>SDS称为<strong>简单动态字符串</strong>，对于SDS中的定义在Redis的源码中有的三个属性<code>int len</code>、<code>int free</code>、<code>char buf[]</code>。</p><p><code>len</code>保存了字符串的长度，<code>free</code>表示<code>buf数组</code>中未使用的字节数量，<code>buf数组</code>则是保存字符串的每一个字符元素。</p><p>因此当你在Redis中存储一个字符串<code>"Hello_World"</code>时，SDS的形式的<code>redisObject</code>结构图如下图所示： <img src="/posts/14492/SDS.png" class="" title="SDS"></p><h2 id="hash">Hash</h2><p>Redis hash 是一个<strong>键值(key=&gt;value)对集合</strong>。</p><p>Redis hash 是一个 string 类型的 field 和 value的<strong>映射表</strong>，hash 特别适合用于存储对象。</p><p>每个 hash 可以存储 <span class="math inline">\(2^{32} -1\)</span>键值对。</p><p>Hash对象的实现方式有两种分别是<code>ziplist</code>、<code>hashtable</code>，其中<code>hashtable</code>的存储方式<code>key</code>是String类型的，<code>value</code>也是以<code>key value</code>的形式进行存储。</p><h3 id="ziplist">ziplist</h3><p>压缩列表（ziplist）是<strong>一组连续内存块组成的顺序的数据结构</strong>，压缩列表能够节省空间，压缩列表中使用多个节点来存储数据。</p><p>压缩列表是列表键和哈希键底层实现的原理之一，<strong>压缩列表并不是以某种压缩算法进行压缩存储数据，而是它表示一组连续的内存空间的使用，节省空间</strong>，压缩列表的内存结构图如下：<img src="/posts/14492/ziplist.png" class="" title="ziplist"></p><p>其中：</p><ol type="1"><li><code>zlbytes</code>：4个字节的大小，记录压缩列表占用内存的字节数。</li><li><code>zltail</code>：4个字节大小，记录表尾节点距离起始地址的偏移量，用于快速定位到尾节点的地址。</li><li><code>zllen</code>：2个字节的大小，记录压缩列表中的节点数。</li><li><code>entry</code>：表示列表中的每一个节点。</li><li><code>zlend</code>：表示压缩列表的特殊结束符号<code>'0xFF'</code></li></ol><p>每一个<code>entry</code>节点又有三部分组成，分别是<code>previous_entry_length</code>、<code>encoding</code>、<code>content</code>。</p><ol type="1"><li><code>previous_entry_length</code>表示前一个节点<code>entry</code>的长度，可用于计算前一个节点的其实地址，因为他们的地址是连续的。</li><li><code>encoding</code>：这里保存的是<code>content</code>的内容类型和长度。</li><li><code>content</code>：<code>content</code>保存的是每一个节点的内容。<img src="/posts/14492/entry.png" class="" title="entry"></li></ol><h3 id="hashtable">hashtable</h3><p>hashtable是<strong>一种字典类型的数据结构</strong>，用于存储键值对，其中键是字符串类型，值可以是字符串、列表、集合或有序集合。hashtable的<strong>底层实现是一个数组，每个数组元素是一个链表，用于解决哈希冲突</strong>。当hashtable中的键值对数量变化时，会进行扩展或收缩操作，重新分配数组的大小和哈希值。hashtable是哈希键和集合键的底层实现之一，当这些键的元素数量和长度较大时，Redis会使用 hashtable 作为其存储方式。</p><h2 id="list">List</h2><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部或者尾部。</p><p>列表最多可存储 <span class="math inline">\(2^{32} - 1\)</span>元素。</p><p>Redis中的列表在3.2之前的版本是使用<code>ziplist</code>和<code>linkedlist</code>进行实现的。在3.2之后的版本就是引入了<code>quicklist</code>。</p><h3 id="linkedlist">linkedlist</h3><p>linkedlist是一个双向链表，他和普通的链表一样都是由指向前后节点的指针。插入、修改、更新的时间复杂度是O(1)，查询的时间复杂度是 O(n)。其特性为</p><ol type="1"><li>每一个节点都有指向前一个节点和后一个节点的指针。</li><li>头节点和尾节点的<code>prev</code>和<code>next</code>指针指向为<code>null</code>，所以链表是无环的。</li><li>链表有自己长度的信息，获取长度的时间复杂度为 O(1)。</li></ol><img src="/posts/14492/linkedlist.png" class="" title="linkedlist"><h3 id="quicklist">quicklist</h3><p>quicklist 实际上是 zipList 和 linkedList 的混合体，它将 linkedList按段切分，每一段使用 zipList 来紧凑存储，多个 zipList之间使用双向指针串接起来。</p><ol type="1"><li><code>prev</code>、<code>next</code>指向该节点的前后节点。</li><li><code>zl</code>指向该节点对应的 ziplist 结构。</li><li><code>sz</code>代表整个 ziplist 结构的大小。</li><li><code>encoding</code>代表采用的编码方式：<code>1</code>代表是原生的，<code>2</code>代表使用<code>LZF</code>进行压缩。</li><li><code>container</code>为 quickListNode节点<code>zl</code>指向的容器类型：<code>1</code>代表<code>none</code>，<code>2</code>代表使用<code>ziplist</code>存储数据。</li><li><code>recompress</code>代表这个节点之前是否是压缩节点，若是，则在使用压缩节点前先进行解压缩，使用后需要重新压缩，此外为<code>1</code>，代表是压缩节点。</li><li><code>attempted_compress</code>测试时使用。</li><li><code>extra</code>为预留。</li></ol><img src="/posts/14492/quicklist.png" class="" title="quicklist"><h2 id="set">Set</h2><p>Redis 的 Set 是 string 类型的无序集合。</p><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><p>集合中最大的成员数为 <span class="math inline">\(2^{32} -1\)</span>。</p><p>Redis 中列表和集合都可以用来存储字符串，但是 <strong>Set是不可重复的集合，而 List 列表可以存储相同的字符串</strong>。</p><p>Set 的底层实现是<code>hashtable</code>和<code>intset</code>。</p><h3 id="intset">intset</h3><p>inset也叫做<strong>整数集合</strong>，用于保存整数值的数据结构类型，它可以保存<code>int16_t</code>、<code>int32_t</code>或者<code>int64_t</code> 的整数值。</p><p>在整数集合中，有三个属性值<code>encoding、length、contents[]</code>，分别表示编码方式、整数集合的长度、以及元素内容，<code>length</code>就是记录<code>contents</code>里面的大小。</p><p>在整数集合新增元素的时候，若是超出了原集合的长度大小，就会对集合进行升级，具体的升级过程如下：</p><ol type="1"><li>首先扩展底层数组的大小，并且数组的类型为新元素的类型。</li><li>然后将原来的数组中的元素转为新元素的类型，并放到扩展后数组对应的位置。</li><li>整数集合升级后就不会再降级，编码会一直保持升级后的状态。</li></ol><img src="/posts/14492/intset.png" class="" title="intset"><h2 id="zset">Zset</h2><p>Redis zset 和 set 一样也是 string类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个 double 类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>zset 的成员是唯一的,但分数（score）却可以重复。</p><p>zset 的底层实现是<code>ziplist</code>和<code>skiplist</code>。</p><h3 id="skipset">skipset</h3><p>skiplist也叫做<strong>跳跃表</strong>，跳跃表是一种有序的数据结构，它通过每一个节点维持多个指向其它节点的指针，从而达到快速访问的目的。</p><p>skiplist 由如下几个特点：</p><ol type="1"><li>有很多层组成，由上到下节点数逐渐密集，最上层的节点最稀疏，跨度也最大。</li><li>每一层都是一个有序链表，只扫包含两个节点，头节点和尾节点。</li><li>每一层的每一个每一个节点都含有指向同一层下一个节点和下一层同一个位置节点的指针。</li><li>如果一个节点在某一层出现，那么该以下的所有链表同一个位置都会出现该节点。</li></ol><img src="/posts/14492/skiplist.png" class="" title="skiplist">]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>coding</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM的学习</title>
    <link href="/posts/60968/"/>
    <url>/posts/60968/</url>
    
    <content type="html"><![CDATA[<figure><img src="vim键位.gif" alt="vim键位" /><figcaption aria-hidden="true">vim键位</figcaption></figure><h2 id="vim的哲学">Vim的哲学</h2><p>在编程时，您大部分时间都花在阅读/编辑上，而不是写作上。因此，Vim是一个模态编辑器：它有不同的插入文本和操作文本的模式。Vim是可编程的（使用 Vimscript 以及 Python 等其他语言），并且 Vim的界面本身就是一种编程语言：击键（具有助记名称）是命令，并且这些命令是可组合的。Vim避免使用鼠标，因为它太慢了；Vim甚至避免使用箭头键，因为它需要太多的移动。</p><p>最终结果是一个可以匹配您思考速度的编辑器。</p><h2 id="模态编辑">模态编辑</h2><p>Vim有多种运行模式</p><figure><img src="vim工作模式.png" alt="vim运行模式" /><figcaption aria-hidden="true">vim运行模式</figcaption></figure><ul><li><code>Normal</code> 用于在文件中移动并进行编辑</li><li><code>Insert</code> 用于插入文本，按 <code>i</code> 键</li><li><code>Replace</code> 用于替换文本，按 <code>R</code> 键</li><li><code>Visual</code> 用于选择文本块，可视模式为 <code>v</code>键，可视行模式为<code>V</code> 键，可视块模式为<code>&lt;C-v&gt;</code>键</li><li><code>Command-line</code> 用于运行命令，按 <code>:</code> 键</li></ul><p>击键在不同的操作模式下具有不同的含义。例如，字母 <code>x</code>在插入模式下只会插入一个文字字符 'x'，但在普通模式下，它会删除光标下的字符，而在可视模式下，它会删除选择的字符。</p><h2 id="缓冲区选项卡和窗口">缓冲区，选项卡和窗口</h2><p>Vim 维护一组打开的文件，称为"缓冲区"。一个 Vim会话有许多选项卡，每个选项卡都有许多窗口( 拆分窗格)。每个窗口显示一个缓冲区。与您熟悉的其他程序( 如网络浏览器)不同，缓冲区和窗口之间不存在一对一的对应关系，窗户只是视图。一个给定的缓冲区可以在多个窗口中打开，甚至在同一个选项卡中。这非常方便，例如，同时查看文件的两个不同部分。</p><p>默认情况下，Vim 打开一个选项卡，其中包含一个窗口。</p><h2 id="底线命令模式">底线命令模式</h2><p>命令模式可以通过在普通模式下输入<code>:</code>来进入。按下<code>:</code>后，光标会跳到屏幕底部的命令行，你可以在那里输入不同的命令。这种模式有很多功能，包括：</p><ul><li><code>:q</code> 退出（关闭窗口）</li><li><code>:w</code> 保存（“写入”）</li><li><code>:wq</code> 保存并退出</li><li><code>:e</code> {文件名} 打开文件进行编辑</li><li><code>:ls</code> 显示打开的缓冲区</li><li><code>:help</code> {主题} 打开帮助</li><li><code>:help :w</code> 打开:w命令的帮助</li><li><code>:help w</code> 打开w移动的帮助</li></ul><p>例如，如果你想打开一个名为<code>test.txt</code>的文件，你可以在命令模式下输入<code>:e test.txt</code>，然后按回车键。如果你想保存当前文件，你可以输入<code>:w</code>，然后按回车键。如果你想查看Vim的基本用法，你可以输入<code>:help</code>，然后按回车键。</p><h2 id="移动">移动</h2><ul><li><code>h</code> 或 向左箭头键 <code>←</code>光标向左移动一个字符</li><li><code>j</code> 或 向下箭头键 <code>↓</code>光标向下移动一个字符</li><li><code>k</code> 或 向上箭头键 <code>↑</code>光标向上移动一个字符</li><li><code>l</code> 或 向右箭头键 <code>→</code>光标向右移动一个字符</li><li><code>Ctrl + f</code> 屏幕向下移动<strong>一页</strong>，相当于<code>Page Down</code> 按键 (<strong>常用</strong>)</li><li><code>Ctrl + b</code> 屏幕向上移动一页，相当于 <code>Page Up</code>按键 (<strong>常用</strong>)</li><li><code>Ctrl + d</code> 屏幕向下移动<strong>半页</strong></li><li><code>Ctrl + u</code> 屏幕向上移动<strong>半页</strong></li><li><code>+</code> 光标移动到<strong>非空格符</strong>的下一行</li><li><code>-</code> 光标移动到<strong>非空格符</strong>的上一行</li><li><code>n&lt;space&gt;</code> 那个 <code>n</code> 表示数字，例如 20。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如<code>20&lt;space&gt;</code> 则光标会向后面移动 20 个字符距离。</li><li><code>0</code> 或功能键<code>Home</code>移动到这一行的<strong>最前面</strong>字符处 (<strong>常用</strong>)</li><li><code>$</code> 或功能键<code>End</code>移动到这一行的<strong>最后面</strong>字符处(<strong>常用</strong>)</li><li><code>H</code>光标移动到这个屏幕的<strong>最上方</strong>那一行的第一个字符</li><li><code>M</code>光标移动到这个屏幕的<strong>中央</strong>那一行的第一个字符</li><li><code>L</code>光标移动到这个屏幕的<strong>最下方</strong>那一行的第一个字符</li><li><code>G</code> 移动到这个档案的最后一行(<strong>常用</strong>)</li><li><code>nG</code> <code>n</code> 为数字。移动到这个档案的第 n 行。例如<code>20G</code> 则会移动到这个档案的第 20 行(可配合:<code>set nu</code>)</li><li><code>gg</code> 移动到这个档案的第一行，相当于 <code>1G</code>(<strong>常用</strong>)</li><li><code>n&lt;Enter&gt;</code> <code>n</code> 为数字。光标向下移动 n行(<strong>常用</strong>)</li></ul><h2 id="搜索替换">搜索替换</h2><ul><li><code>/word</code> 向光标之下寻找一个名称为 <code>word</code>的字符串。例如要在档案内搜寻 <code>vbird</code> 这个字符串，就输入<code>/vbird</code> 即可！ (<strong>常用</strong>)</li><li><code>?word</code> 向光标之上寻找一个字符串名称为 <code>word</code>的字符串。</li><li><code>n</code> 这个 <code>n</code>是英文按键。代表<strong>重复</strong>前一个搜寻的动作。举例来说，如果刚刚我们执行 <code>/vbird</code> 去向下搜寻 <code>vbird</code>这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 <code>vbird</code>的字符串。如果是执行 <code>?vbird</code> 的话，那么按下 n则会向上继续搜寻名称为 <code>vbird</code> 的字符串！</li><li><code>N</code> 这个 <code>N</code> 是英文按键。与 <code>n</code>刚好相反，为<strong>反向</strong>进行前一个搜寻动作。 例如<code>/vbird</code> 后，按下 <code>N</code>则表示<strong>向上</strong>搜寻 <code>vbird</code> 。</li></ul><h2 id="删除复制与粘贴">删除、复制与粘贴</h2><ul><li><code>x</code>, <code>X</code> 在一行字当中，<code>x</code>为向后删除一个字符 (相当于 <code>del</code> 按键)， <code>X</code>为向前删除一个字符(相当于 <code>backspace</code> 亦即是退格键)(<strong>常用</strong>)</li><li><code>nx</code> <code>n</code> 为数字，连续向后删除 n 个字符。</li><li><code>dd</code> 剪切游标所在的那一整行(<strong>常用</strong>)，用<code>p</code>/<code>P</code> 可以粘贴。</li><li><code>ndd</code> <code>n</code> 为数字。剪切光标所在的向下 n行，例如 <code>20dd</code> 则是剪切 20 行(<strong>常用</strong>)，用<code>p</code>/<code>P</code> 可以粘贴。</li><li><code>d1G</code> 删除光标所在到第一行的所有数据</li><li><code>dG</code> 删除光标所在到最后一行的所有数据</li><li><code>d$</code> 删除游标所在处，到该行的最后一个字符</li><li><code>d0</code> 那个是数字的 0，删除游标所在处，到该行的最前面一个字符</li><li><code>yy</code> 复制游标所在的那一行(<strong>常用</strong>)</li><li><code>nyy</code> <code>n</code> 为数字。复制光标所在的向下 n行，例如 <code>20yy</code> 则是复制 20 行(<strong>常用</strong>)</li><li><code>y1G</code> 复制游标所在行到第一行的所有数据</li><li><code>yG</code> 复制游标所在行到最后一行的所有数据</li><li><code>y0</code> 复制光标所在的那个字符到该行行首的所有数据</li><li><code>y$</code> 复制光标所在的那个字符到该行行尾的所有数据</li><li><code>p</code>, <code>P</code> <code>p</code>为将已复制的数据在光标下一行贴上，<code>P</code> 则为贴在游标上一行！(<strong>常用</strong>)</li><li><code>J</code> 将光标所在行与下一行的数据结合成同一行</li><li><code>c</code> 重复删除多个数据，例如 <code>10cj</code> 表示向下删除10 行</li><li><code>u</code> 复原前一个动作。(<strong>常用</strong>)</li><li><code>Ctrl + r</code> 重做上一个动作。(<strong>常用</strong>)</li></ul><h2 id="补充">补充</h2><table><thead><tr class="header"><th style="text-align: left;">进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">i, I</td><td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr class="even"><td style="text-align: left;">a, A</td><td>进入输入模式(Insert mode)： a为『从目前光标所在的下一个字符处开始输入』， A为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr class="odd"><td style="text-align: left;">o, O</td><td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o为在目前光标所在的下一行处输入新的一行； O为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr class="even"><td style="text-align: left;">r, R</td><td>进入取代模式(Replace mode)： r只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下ESC 为止；(常用)</td></tr><tr class="odd"><td style="text-align: left;">上面这些按键中，在 vi画面的左下角处会出现『--INSERT--』或『--REPLACE--』的字样。由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时，一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td><td></td></tr><tr class="even"><td style="text-align: left;">[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><table><thead><tr class="header"><th style="text-align: left;">指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr class="even"><td style="text-align: left;">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入，还是跟你对该档案的档案权限有关啊！</td></tr><tr class="odd"><td style="text-align: left;">:q</td><td>离开 vi (常用)</td></tr><tr class="even"><td style="text-align: left;">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr class="odd"><td style="text-align: left;">注意一下啊，那个惊叹号 (!) 在 vi当中，常常具有『强制』的意思～</td><td></td></tr><tr class="even"><td style="text-align: left;">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr class="odd"><td style="text-align: left;">ZZ</td><td>这是大写的 Z喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td></tr><tr class="even"><td style="text-align: left;">ZQ</td><td>不保存，强制退出。效果等同于 <strong>:q!</strong>。</td></tr><tr class="odd"><td style="text-align: left;">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr class="even"><td style="text-align: left;">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』这个档案内容加到游标所在行后面</td></tr><tr class="odd"><td style="text-align: left;">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr class="even"><td style="text-align: left;">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls/home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td></tr></tbody></table><table><thead><tr class="header"><th style="text-align: left;">vim 环境的变更</th><th></th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr class="even"><td style="text-align: left;">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><h2 id="参考资料">参考资料</h2><p><a href="https://missing.csail.mit.edu/2020/editors/">Editors (Vim) ·Missing Semester (mit.edu)</a></p><p><a href="https://www.runoob.com/linux/linux-vim.html">Linux vi/vim |菜鸟教程 (runoob.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
    </categories>
    
    
    <tags>
      
      <tag>coding</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TEST</title>
    <link href="/posts/59964/"/>
    <url>/posts/59964/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/posts/59964/1.jpg" class="" title="测试图片1"><figure><img src="1.jpg" alt="测试图片2" /><figcaption aria-hidden="true">测试图片2</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
