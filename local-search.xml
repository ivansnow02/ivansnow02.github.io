<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>VIM的学习</title>
    <link href="/posts/60968/"/>
    <url>/posts/60968/</url>
    
    <content type="html"><![CDATA[<p><img src="/posts/60968/vim%E9%94%AE%E4%BD%8D.gif" alt="vim键位"></p><h2 id="Vim的哲学"><a href="#Vim的哲学" class="headerlink" title="Vim的哲学"></a>Vim的哲学</h2><p>在编程时，您大部分时间都花在阅读&#x2F;编辑上，而不是写作上。因此，Vim 是一个模态编辑器：它有不同的插入文本和操作文本的模式。Vim 是可编程的（使用 Vimscript 以及 Python 等其他语言），并且 Vim 的界面本身就是一种编程语言：击键（具有助记名称）是命令，并且这些命令是可组合的。Vim 避免使用鼠标，因为它太慢了；Vim 甚至避免使用箭头键，因为它需要太多的移动。</p><p>最终结果是一个可以匹配您思考速度的编辑器。</p><h2 id="模态编辑"><a href="#模态编辑" class="headerlink" title="模态编辑"></a>模态编辑</h2><p>Vim有多种运行模式</p><p><img src="/posts/60968/vim%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F.png" alt="vim运行模式"></p><ul><li><code>Normal</code> 用于在文件中移动并进行编辑</li><li><code>Insert</code> 用于插入文本，按 <code>i</code> 键</li><li><code>Replace</code> 用于替换文本，按 <code>R</code> 键</li><li><code>Visual</code> 用于选择文本块，可视模式为 <code>v</code> 键，可视行模式为<code>V</code> 键，可视块模式为<code>&lt;C-v&gt;</code> 键</li><li><code>Command-line</code> 用于运行命令，按 <code>:</code> 键</li></ul><p>击键在不同的操作模式下具有不同的含义。例如，字母 <code>x</code> 在插入模式下只会插入一个文字字符 ‘x’ ，但在普通模式下，它会删除光标下的字符，而在可视模式下，它会删除选择的字符。</p><h2 id="缓冲区，选项卡和窗口"><a href="#缓冲区，选项卡和窗口" class="headerlink" title="缓冲区，选项卡和窗口"></a>缓冲区，选项卡和窗口</h2><p>Vim 维护一组打开的文件，称为”缓冲区”。一个 Vim 会话有许多选项卡，每个选项卡都有许多窗口( 拆分窗格) 。每个窗口显示一个缓冲区。与您熟悉的其他程序( 如网络浏览器) 不同，缓冲区和窗口之间不存在一对一的对应关系，窗户只是视图。一个给定的缓冲区可以在多个窗口中打开，甚至在同一个选项卡中。这非常方便，例如，同时查看文件的两个不同部分。</p><p>默认情况下，Vim 打开一个选项卡，其中包含一个窗口。</p><h2 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h2><p>命令模式可以通过在普通模式下输入<code>:</code>来进入。按下<code>:</code>后，光标会跳到屏幕底部的命令行，你可以在那里输入不同的命令。这种模式有很多功能，包括：</p><ul><li><code>:q</code> 退出（关闭窗口）</li><li><code>:w</code> 保存（“写入”）</li><li><code>:wq</code> 保存并退出</li><li><code>:e</code> {文件名} 打开文件进行编辑</li><li><code>:ls</code> 显示打开的缓冲区</li><li><code>:help</code> {主题} 打开帮助</li><li><code>:help :w</code> 打开:w命令的帮助</li><li><code>:help w</code> 打开w移动的帮助</li></ul><p>例如，如果你想打开一个名为<code>test.txt</code>的文件，你可以在命令模式下输入<code>:e test.txt</code>，然后按回车键。如果你想保存当前文件，你可以输入<code>:w</code>，然后按回车键。如果你想查看Vim的基本用法，你可以输入<code>:help</code>，然后按回车键。</p><h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><ul><li><code>h</code> 或 向左箭头键 <code>←</code> 光标向左移动一个字符</li><li><code>j</code> 或 向下箭头键 <code>↓</code> 光标向下移动一个字符</li><li><code>k</code> 或 向上箭头键 <code>↑</code> 光标向上移动一个字符</li><li><code>l</code> 或 向右箭头键 <code>→</code> 光标向右移动一个字符</li><li><code>Ctrl + f</code> 屏幕向下移动<strong>一页</strong>，相当于 <code>Page Down</code> 按键 (<strong>常用</strong>)</li><li><code>Ctrl + b</code> 屏幕向上移动一页，相当于 <code>Page Up</code> 按键 (<strong>常用</strong>)</li><li><code>Ctrl + d</code> 屏幕向下移动<strong>半页</strong></li><li><code>Ctrl + u</code> 屏幕向上移动<strong>半页</strong></li><li><code>+</code> 光标移动到<strong>非空格符</strong>的下一行</li><li><code>-</code> 光标移动到<strong>非空格符</strong>的上一行</li><li><code>n&lt;space&gt;</code> 那个 <code>n</code> 表示数字，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 <code>20&lt;space&gt;</code> 则光标会向后面移动 20 个字符距离。</li><li><code>0</code> 或功能键<code>Home</code> 移动到这一行的<strong>最前面</strong>字符处 (<strong>常用</strong>)</li><li><code>$</code> 或功能键<code>End</code> 移动到这一行的<strong>最后面</strong>字符处(<strong>常用</strong>)</li><li><code>H</code> 光标移动到这个屏幕的<strong>最上方</strong>那一行的第一个字符</li><li><code>M</code> 光标移动到这个屏幕的<strong>中央</strong>那一行的第一个字符</li><li><code>L</code> 光标移动到这个屏幕的<strong>最下方</strong>那一行的第一个字符</li><li><code>G</code> 移动到这个档案的最后一行(<strong>常用</strong>)</li><li><code>nG</code> <code>n</code> 为数字。移动到这个档案的第 n 行。例如 <code>20G</code> 则会移动到这个档案的第 20 行(可配合 :<code>set nu</code>)</li><li><code>gg</code> 移动到这个档案的第一行，相当于 <code>1G</code>  (<strong>常用</strong>)</li><li><code>n&lt;Enter&gt;</code> <code>n</code> 为数字。光标向下移动 n 行(<strong>常用</strong>)</li></ul><h2 id="搜索替换"><a href="#搜索替换" class="headerlink" title="搜索替换"></a>搜索替换</h2><ul><li><code>/word</code>  向光标之下寻找一个名称为 <code>word</code> 的字符串。例如要在档案内搜寻 <code>vbird</code> 这个字符串，就输入 <code>/vbird</code> 即可！ (<strong>常用</strong>)</li><li><code>?word</code> 向光标之上寻找一个字符串名称为 <code>word</code> 的字符串。</li><li><code>n</code> 这个 <code>n</code> 是英文按键。代表<strong>重复</strong>前一个搜寻的动作。举例来说， 如果刚刚我们执行 <code>/vbird</code> 去向下搜寻 <code>vbird</code> 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 <code>vbird</code> 的字符串。如果是执行 <code>?vbird</code> 的话，那么按下 n 则会向上继续搜寻名称为 <code>vbird</code> 的字符串！</li><li><code>N</code> 这个 <code>N</code> 是英文按键。与 <code>n</code> 刚好相反，为<strong>反向</strong>进行前一个搜寻动作。 例如 <code>/vbird</code> 后，按下 <code>N</code> 则表示<strong>向上</strong>搜寻 <code>vbird</code> 。</li></ul><h2 id="删除、复制与粘贴"><a href="#删除、复制与粘贴" class="headerlink" title="删除、复制与粘贴"></a>删除、复制与粘贴</h2><ul><li><code>x</code>, <code>X</code>在一行字当中，<code>x</code> 为向后删除一个字符 (相当于 <code>del</code> 按键)， <code>X</code> 为向前删除一个字符(相当于 <code>backspace</code> 亦即是退格键) (<strong>常用</strong>)</li><li><code>nx</code><code>n</code> 为数字，连续向后删除 n 个字符。</li><li><code>dd</code>剪切游标所在的那一整行(<strong>常用</strong>)，用 <code>p</code>&#x2F;<code>P</code> 可以粘贴。</li><li><code>ndd</code><code>n</code> 为数字。剪切光标所在的向下 n 行，例如 <code>20dd</code> 则是剪切 20 行(<strong>常用</strong>)，用 <code>p</code>&#x2F;<code>P</code> 可以粘贴。</li><li><code>d1G</code>删除光标所在到第一行的所有数据</li><li><code>dG</code>删除光标所在到最后一行的所有数据</li><li><code>d$</code>删除游标所在处，到该行的最后一个字符</li><li><code>d0</code>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</li><li><code>yy</code>复制游标所在的那一行(<strong>常用</strong>)</li><li><code>nyy</code><code>n</code> 为数字。复制光标所在的向下 n 行，例如 <code>20yy</code> 则是复制 20 行(<strong>常用</strong>)</li><li><code>y1G</code>复制游标所在行到第一行的所有数据</li><li><code>yG</code>复制游标所在行到最后一行的所有数据</li><li><code>y0</code>复制光标所在的那个字符到该行行首的所有数据</li><li><code>y$</code>复制光标所在的那个字符到该行行尾的所有数据</li><li><code>p</code>, <code>P</code><code>p</code> 为将已复制的数据在光标下一行贴上，<code>P</code> 则为贴在游标上一行！  (<strong>常用</strong>)</li><li><code>J</code>将光标所在行与下一行的数据结合成同一行</li><li><code>c</code>重复删除多个数据，例如 <code>10cj</code> 表示向下删除 10 行</li><li><code>u</code>复原前一个动作。(<strong>常用</strong>)</li><li><code>Ctrl + r</code>重做上一个动作。(<strong>常用</strong>)</li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><table><thead><tr><th align="left">进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td align="left">i, I</td><td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr><td align="left">a, A</td><td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td align="left">o, O</td><td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr><td align="left">r, R</td><td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td align="left">上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td><td></td></tr><tr><td align="left">[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><table><thead><tr><th align="left">指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td align="left">:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td align="left">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td align="left">:q</td><td>离开 vi (常用)</td></tr><tr><td align="left">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td align="left">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td align="left">ZZ</td><td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td></tr><tr><td align="left">ZQ</td><td>不保存，强制退出。效果等同于 **:q!**。</td></tr><tr><td align="left">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td align="left">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td align="left">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td align="left">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls &#x2F;home』即可在 vi 当中察看 &#x2F;home 底下以 ls 输出的档案信息！</td></tr></tbody></table><table><thead><tr><th align="left">vim 环境的变更</th><th></th></tr></thead><tbody><tr><td align="left">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td align="left">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://missing.csail.mit.edu/2020/editors/">Editors (Vim) · Missing Semester (mit.edu)</a></p><p><a href="https://www.runoob.com/linux/linux-vim.html">Linux vi&#x2F;vim | 菜鸟教程 (runoob.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
    </categories>
    
    
    <tags>
      
      <tag>coding</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TEST</title>
    <link href="/posts/59964/"/>
    <url>/posts/59964/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/posts/59964/1.jpg" class="" title="测试图片1"><p><img src="/posts/59964/1.jpg" alt="测试图片2"></p>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
