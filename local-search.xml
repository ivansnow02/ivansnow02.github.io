<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>离散数学复习</title>
    <link href="/posts/12732/"/>
    <url>/posts/12732/</url>
    
    <content type="html"><![CDATA[<h1 id="集合论"><a href="#集合论" class="headerlink" title="集合论"></a>集合论</h1><h2 id="集合的基本概念"><a href="#集合的基本概念" class="headerlink" title="集合的基本概念"></a>集合的基本概念</h2><h3 id="集合的定义"><a href="#集合的定义" class="headerlink" title="集合的定义"></a>集合的定义</h3><ul><li>具有某种特定性质事物的全体，通常，用大写的英文字母A, B, C,……表示集合</li></ul><h3 id="集合的元素"><a href="#集合的元素" class="headerlink" title="集合的元素"></a>集合的元素</h3><ul><li>组成一个集合的那些对象或单元称为这个集合的元素，通常，用小写的英文字母$a$, $b$, $c$,…，或者$a_1$, $a_2$, $b_1$, $b_2$…表示集合中的元素</li></ul><h3 id="属于"><a href="#属于" class="headerlink" title="属于"></a>属于</h3><ul><li>设A是一个集合，a是集合A中的元素，记以$a \in A$，读作 $a$ 属于 $A$；若$a$不是集合$A$中的元素，则记以$a \notin A$，读作 $a$ 不属于 $A$</li></ul><h3 id="有限集"><a href="#有限集" class="headerlink" title="有限集"></a>有限集</h3><ul><li>包含有限个元素的集合，称为有限集或有穷集(finite set)</li></ul><h3 id="无限集"><a href="#无限集" class="headerlink" title="无限集"></a>无限集</h3><ul><li>包含无限个元素的集合，称为无限集或无穷集(infinite set )</li></ul><h3 id="空集"><a href="#空集" class="headerlink" title="空集"></a>空集</h3><ul><li>约定，存在一个没有任何元素的集合，称为空集(empty set) ，记为$\varnothing$，有时也用{}来表示</li></ul><h3 id="全集"><a href="#全集" class="headerlink" title="全集"></a>全集</h3><ul><li><p>约定，所讨论的对象的全体称为全集(universal set)，记作$E$或$U$，我们所讨论的集合都是全集的子集 </p></li><li><p><strong>全集是相对的</strong></p></li></ul><h3 id="集合的元素数"><a href="#集合的元素数" class="headerlink" title="集合的元素数"></a>集合的元素数</h3><ul><li>设$A$是有穷集合， $A$中元素的个数称为集合$A$的元素数，记为$|A|$，<strong>特别，$|\varnothing|&#x3D;0$</strong></li></ul><h3 id="集合的表示法"><a href="#集合的表示法" class="headerlink" title="集合的表示法"></a>集合的表示法</h3><h4 id="列举法"><a href="#列举法" class="headerlink" title="列举法"></a>列举法</h4><ul><li>将集合中的元素一一列举，或列出足够多的元素以反映集合中元素的特征</li></ul><h4 id="描述法"><a href="#描述法" class="headerlink" title="描述法"></a>描述法</h4><ul><li>通过描述集合中元素的共同特征来表示集合</li></ul><h4 id="文氏图"><a href="#文氏图" class="headerlink" title="文氏图"></a>文氏图</h4><ul><li>用一个大的矩形表示全集，在矩形内画一些圆或其它的几何图形，来表示集合，有时也用一些点来表示集合中的特定元素</li></ul><h3 id="集合的特征"><a href="#集合的特征" class="headerlink" title="集合的特征"></a>集合的特征</h3><h4 id="确定性"><a href="#确定性" class="headerlink" title="确定性"></a>确定性</h4><ul><li>任何一个对象，或者是这个集合的元素，或者不是，二者必居其一</li></ul><h4 id="互异性"><a href="#互异性" class="headerlink" title="互异性"></a>互异性</h4><ul><li>集合中任何两个元素都是不同的，即集合中不允许出现重复的元素</li></ul><h4 id="无序性"><a href="#无序性" class="headerlink" title="无序性"></a>无序性</h4><ul><li>集合与其中的元素的顺序无关</li></ul><h4 id="多样性"><a href="#多样性" class="headerlink" title="多样性"></a>多样性</h4><ul><li>集合中的元素可以是任意的对象，相互独立，不要求一定要具备明显的共同特征</li></ul><h2 id="集合间的关系"><a href="#集合间的关系" class="headerlink" title="集合间的关系"></a>集合间的关系</h2><h3 id="集合相等"><a href="#集合相等" class="headerlink" title="集合相等"></a>集合相等</h3><ul><li>当两个集合$A$和$B$的元素完全一样，即$A$，$B$实际上是同一个集合时，则称集合$A$，$B$相等，记以$A&#x3D;B$</li></ul><h3 id="集合包含"><a href="#集合包含" class="headerlink" title="集合包含"></a>集合包含</h3><ul><li>设$A$，$B$是两个集合，若$A$的元素都是$B$的元素，则称$A$是$B$的子集(subset) ，也称$B$包含$A$，或$A$包含于$B$，记以$A \subseteq B$，或$B \supseteq A$ 。</li><li>若$A \subseteq B$，且$A \neq B$，则称$A$是$B$的真子集(proper subset)，也称$B$真包含$A$，或$A$真包含于$B$，记以$A \subset B$，或$B \supset A$ 。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Math</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Math</tag>
      
      <tag>Discrete Mathematics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis的数据类型</title>
    <link href="/posts/14492/"/>
    <url>/posts/14492/</url>
    
    <content type="html"><![CDATA[<p>Redis 支持五种数据类型：</p><ul><li>string</li><li>hash</li><li>list</li><li>set</li><li>zset</li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>string 是最基本的类型。string 二进制安全，即可以包含任何数据。</p><p>string 一个键最大能存储512MB。</p><p>string 类型的数据结构存储方式有三种<code>int</code>、<code>raw</code>、<code>embstr</code>：</p><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><p>Redis 中规定假如存储的是<strong>整数型值</strong>，比如<code>set num 123</code>这样的类型，就会使用<code>int</code>的存储方式进行存储，在<code>redisObject</code>的<code>ptr属性</code>中就会保存该值。</p><img src="/posts/14492/int-1682306725947-10.png" class="" title="int"><h3 id="SDS"><a href="#SDS" class="headerlink" title="SDS"></a>SDS</h3><p>假如存储的<strong>字符串是一个字符串值并且长度大于32个字节</strong>就会使用 SDS（simple dynamic string）方式进行存储，并且<code>encoding</code>设置为<code>raw</code>；若是<strong>字符串长度小于等于32个字节</strong>就会将<code>encoding</code>改为<code>embstr</code>来保存字符串。</p><p>SDS称为<strong>简单动态字符串</strong>，对于SDS中的定义在Redis的源码中有的三个属性<code>int len</code>、<code>int free</code>、<code>char buf[]</code>。</p><p><code>len</code>保存了字符串的长度，<code>free</code>表示<code>buf数组</code>中未使用的字节数量，<code>buf数组</code>则是保存字符串的每一个字符元素。</p><p>因此当你在Redis中存储一个字符串<code>&quot;Hello_World&quot;</code>时，SDS 的形式的<code>redisObject</code>结构图如下图所示：</p><img src="/posts/14492/SDS.png" class="" title="SDS"><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>Redis hash 是一个<strong>键值(key&#x3D;&gt;value)对集合</strong>。</p><p>Redis hash 是一个 string 类型的 field 和 value 的<strong>映射表</strong>，hash 特别适合用于存储对象。</p><p>每个 hash 可以存储 $2^{32} -1$ 键值对。</p><p>Hash对象的实现方式有两种分别是<code>ziplist</code>、<code>hashtable</code>，其中<code>hashtable</code>的存储方式<code>key</code>是 String 类型的，<code>value</code>也是以<code>key value</code>的形式进行存储。</p><h3 id="ziplist"><a href="#ziplist" class="headerlink" title="ziplist"></a>ziplist</h3><p>压缩列表（ziplist）是<strong>一组连续内存块组成的顺序的数据结构</strong>，压缩列表能够节省空间，压缩列表中使用多个节点来存储数据。</p><p>压缩列表是列表键和哈希键底层实现的原理之一，<strong>压缩列表并不是以某种压缩算法进行压缩存储数据，而是它表示一组连续的内存空间的使用，节省空间</strong>，压缩列表的内存结构图如下：</p><img src="/posts/14492/ziplist.png" class="" title="ziplist"><p>其中：</p><ol><li><code>zlbytes</code>：4个字节的大小，记录压缩列表占用内存的字节数。</li><li><code>zltail</code>：4个字节大小，记录表尾节点距离起始地址的偏移量，用于快速定位到尾节点的地址。</li><li><code>zllen</code>：2个字节的大小，记录压缩列表中的节点数。</li><li><code>entry</code>：表示列表中的每一个节点。</li><li><code>zlend</code>：表示压缩列表的特殊结束符号<code>&#39;0xFF&#39;</code></li></ol><p>每一个<code>entry</code>节点又有三部分组成，分别是<code>previous_entry_length</code>、<code>encoding</code>、<code>content</code>。</p><ol><li><code>previous_entry_length</code>表示前一个节点<code>entry</code>的长度，可用于计算前一个节点的其实地址，因为他们的地址是连续的。</li><li><code>encoding</code>：这里保存的是<code>content</code>的内容类型和长度。</li><li><code>content</code>：<code>content</code>保存的是每一个节点的内容。<img src="/posts/14492/entry.png" class="" title="entry"></li></ol><h3 id="hashtable"><a href="#hashtable" class="headerlink" title="hashtable"></a>hashtable</h3><p>hashtable 是<strong>一种字典类型的数据结构</strong>，用于存储键值对，其中键是字符串类型，值可以是字符串、列表、集合或有序集合。hashtable 的<strong>底层实现是一个数组，每个数组元素是一个链表，用于解决哈希冲突</strong>。当 hashtable 中的键值对数量变化时，会进行扩展或收缩操作，重新分配数组的大小和哈希值。hashtable 是哈希键和集合键的底层实现之一，当这些键的元素数量和长度较大时，Redis 会使用 hashtable 作为其存储方式。</p><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部或者尾部。</p><p>列表最多可存储 $2^{32} - 1$ 元素。</p><p>Redis中的列表在3.2之前的版本是使用<code>ziplist</code>和<code>linkedlist</code>进行实现的。在3.2之后的版本就是引入了<code>quicklist</code>。</p><h3 id="linkedlist"><a href="#linkedlist" class="headerlink" title="linkedlist"></a>linkedlist</h3><p>linkedlist 是一个双向链表，他和普通的链表一样都是由指向前后节点的指针。插入、修改、更新的时间复杂度是 O(1)，查询的时间复杂度是 O(n)。其特性为</p><ol><li>每一个节点都有指向前一个节点和后一个节点的指针。</li><li>头节点和尾节点的<code>prev</code>和<code>next</code>指针指向为<code>null</code>，所以链表是无环的。</li><li>链表有自己长度的信息，获取长度的时间复杂度为 O(1)。</li></ol><img src="/posts/14492/linkedlist.png" class="" title="linkedlist"><h3 id="quicklist"><a href="#quicklist" class="headerlink" title="quicklist"></a>quicklist</h3><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>Redis 的 Set 是 string 类型的无序集合。</p><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><p>集合中最大的成员数为 $2^{32} - 1$。</p><p>Redis 中列表和集合都可以用来存储字符串，但是 <strong>Set 是不可重复的集合，而 List 列表可以存储相同的字符串</strong>。</p><p>Set 的底层实现是<code>hashtable</code>和<code>intset</code>。</p><h3 id="intset"><a href="#intset" class="headerlink" title="intset"></a>intset</h3><p>inset 也叫做<strong>整数集合</strong>，用于保存整数值的数据结构类型，它可以保存<code>int16_t</code>、<code>int32_t</code> 或者<code>int64_t</code> 的整数值。</p><p>在整数集合中，有三个属性值<code>encoding、length、contents[]</code>，分别表示编码方式、整数集合的长度、以及元素内容，<code>length</code>就是记录<code>contents</code>里面的大小。</p><p>在整数集合新增元素的时候，若是超出了原集合的长度大小，就会对集合进行升级，具体的升级过程如下：</p><ol><li>首先扩展底层数组的大小，并且数组的类型为新元素的类型。</li><li>然后将原来的数组中的元素转为新元素的类型，并放到扩展后数组对应的位置。</li><li>整数集合升级后就不会再降级，编码会一直保持升级后的状态。</li></ol><img src="/posts/14492/intset.png" class="" title="intset"><h2 id="Zset"><a href="#Zset" class="headerlink" title="Zset"></a>Zset</h2><p>Redis zset 和 set 一样也是 string 类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。</p><p>zset 的成员是唯一的,但分数（score）却可以重复。</p><p>zset 的底层实现是<code>ziplist</code>和<code>skiplist</code>。</p><h3 id="skipset"><a href="#skipset" class="headerlink" title="skipset"></a>skipset</h3><p>skiplist 也叫做<strong>跳跃表</strong>，跳跃表是一种有序的数据结构，它通过每一个节点维持多个指向其它节点的指针，从而达到快速访问的目的。</p><p>skiplist 由如下几个特点：</p><ol><li>有很多层组成，由上到下节点数逐渐密集，最上层的节点最稀疏，跨度也最大。</li><li>每一层都是一个有序链表，只扫包含两个节点，头节点和尾节点。</li><li>每一层的每一个每一个节点都含有指向同一层下一个节点和下一层同一个位置节点的指针。</li><li>如果一个节点在某一层出现，那么该以下的所有链表同一个位置都会出现该节点。</li></ol><img src="/posts/14492/skiplist.png" class="" title="skiplist">]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>coding</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM的学习</title>
    <link href="/posts/60968/"/>
    <url>/posts/60968/</url>
    
    <content type="html"><![CDATA[<p><img src="/posts/60968/vim%E9%94%AE%E4%BD%8D.gif" alt="vim键位"></p><h2 id="Vim的哲学"><a href="#Vim的哲学" class="headerlink" title="Vim的哲学"></a>Vim的哲学</h2><p>在编程时，您大部分时间都花在阅读&#x2F;编辑上，而不是写作上。因此，Vim 是一个模态编辑器：它有不同的插入文本和操作文本的模式。Vim 是可编程的（使用 Vimscript 以及 Python 等其他语言），并且 Vim 的界面本身就是一种编程语言：击键（具有助记名称）是命令，并且这些命令是可组合的。Vim 避免使用鼠标，因为它太慢了；Vim 甚至避免使用箭头键，因为它需要太多的移动。</p><p>最终结果是一个可以匹配您思考速度的编辑器。</p><h2 id="模态编辑"><a href="#模态编辑" class="headerlink" title="模态编辑"></a>模态编辑</h2><p>Vim有多种运行模式</p><p><img src="/posts/60968/vim%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F.png" alt="vim运行模式"></p><ul><li><code>Normal</code> 用于在文件中移动并进行编辑</li><li><code>Insert</code> 用于插入文本，按 <code>i</code> 键</li><li><code>Replace</code> 用于替换文本，按 <code>R</code> 键</li><li><code>Visual</code> 用于选择文本块，可视模式为 <code>v</code> 键，可视行模式为<code>V</code> 键，可视块模式为<code>&lt;C-v&gt;</code> 键</li><li><code>Command-line</code> 用于运行命令，按 <code>:</code> 键</li></ul><p>击键在不同的操作模式下具有不同的含义。例如，字母 <code>x</code> 在插入模式下只会插入一个文字字符 ‘x’ ，但在普通模式下，它会删除光标下的字符，而在可视模式下，它会删除选择的字符。</p><h2 id="缓冲区，选项卡和窗口"><a href="#缓冲区，选项卡和窗口" class="headerlink" title="缓冲区，选项卡和窗口"></a>缓冲区，选项卡和窗口</h2><p>Vim 维护一组打开的文件，称为”缓冲区”。一个 Vim 会话有许多选项卡，每个选项卡都有许多窗口( 拆分窗格) 。每个窗口显示一个缓冲区。与您熟悉的其他程序( 如网络浏览器) 不同，缓冲区和窗口之间不存在一对一的对应关系，窗户只是视图。一个给定的缓冲区可以在多个窗口中打开，甚至在同一个选项卡中。这非常方便，例如，同时查看文件的两个不同部分。</p><p>默认情况下，Vim 打开一个选项卡，其中包含一个窗口。</p><h2 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h2><p>命令模式可以通过在普通模式下输入<code>:</code>来进入。按下<code>:</code>后，光标会跳到屏幕底部的命令行，你可以在那里输入不同的命令。这种模式有很多功能，包括：</p><ul><li><code>:q</code> 退出（关闭窗口）</li><li><code>:w</code> 保存（“写入”）</li><li><code>:wq</code> 保存并退出</li><li><code>:e</code> {文件名} 打开文件进行编辑</li><li><code>:ls</code> 显示打开的缓冲区</li><li><code>:help</code> {主题} 打开帮助</li><li><code>:help :w</code> 打开:w命令的帮助</li><li><code>:help w</code> 打开w移动的帮助</li></ul><p>例如，如果你想打开一个名为<code>test.txt</code>的文件，你可以在命令模式下输入<code>:e test.txt</code>，然后按回车键。如果你想保存当前文件，你可以输入<code>:w</code>，然后按回车键。如果你想查看Vim的基本用法，你可以输入<code>:help</code>，然后按回车键。</p><h2 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h2><ul><li><code>h</code> 或 向左箭头键 <code>←</code> 光标向左移动一个字符</li><li><code>j</code> 或 向下箭头键 <code>↓</code> 光标向下移动一个字符</li><li><code>k</code> 或 向上箭头键 <code>↑</code> 光标向上移动一个字符</li><li><code>l</code> 或 向右箭头键 <code>→</code> 光标向右移动一个字符</li><li><code>Ctrl + f</code> 屏幕向下移动<strong>一页</strong>，相当于 <code>Page Down</code> 按键 (<strong>常用</strong>)</li><li><code>Ctrl + b</code> 屏幕向上移动一页，相当于 <code>Page Up</code> 按键 (<strong>常用</strong>)</li><li><code>Ctrl + d</code> 屏幕向下移动<strong>半页</strong></li><li><code>Ctrl + u</code> 屏幕向上移动<strong>半页</strong></li><li><code>+</code> 光标移动到<strong>非空格符</strong>的下一行</li><li><code>-</code> 光标移动到<strong>非空格符</strong>的上一行</li><li><code>n&lt;space&gt;</code> 那个 <code>n</code> 表示数字，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 <code>20&lt;space&gt;</code> 则光标会向后面移动 20 个字符距离。</li><li><code>0</code> 或功能键<code>Home</code> 移动到这一行的<strong>最前面</strong>字符处 (<strong>常用</strong>)</li><li><code>$</code> 或功能键<code>End</code> 移动到这一行的<strong>最后面</strong>字符处(<strong>常用</strong>)</li><li><code>H</code> 光标移动到这个屏幕的<strong>最上方</strong>那一行的第一个字符</li><li><code>M</code> 光标移动到这个屏幕的<strong>中央</strong>那一行的第一个字符</li><li><code>L</code> 光标移动到这个屏幕的<strong>最下方</strong>那一行的第一个字符</li><li><code>G</code> 移动到这个档案的最后一行(<strong>常用</strong>)</li><li><code>nG</code> <code>n</code> 为数字。移动到这个档案的第 n 行。例如 <code>20G</code> 则会移动到这个档案的第 20 行(可配合 :<code>set nu</code>)</li><li><code>gg</code> 移动到这个档案的第一行，相当于 <code>1G</code>  (<strong>常用</strong>)</li><li><code>n&lt;Enter&gt;</code> <code>n</code> 为数字。光标向下移动 n 行(<strong>常用</strong>)</li></ul><h2 id="搜索替换"><a href="#搜索替换" class="headerlink" title="搜索替换"></a>搜索替换</h2><ul><li><code>/word</code>  向光标之下寻找一个名称为 <code>word</code> 的字符串。例如要在档案内搜寻 <code>vbird</code> 这个字符串，就输入 <code>/vbird</code> 即可！ (<strong>常用</strong>)</li><li><code>?word</code> 向光标之上寻找一个字符串名称为 <code>word</code> 的字符串。</li><li><code>n</code> 这个 <code>n</code> 是英文按键。代表<strong>重复</strong>前一个搜寻的动作。举例来说， 如果刚刚我们执行 <code>/vbird</code> 去向下搜寻 <code>vbird</code> 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 <code>vbird</code> 的字符串。如果是执行 <code>?vbird</code> 的话，那么按下 n 则会向上继续搜寻名称为 <code>vbird</code> 的字符串！</li><li><code>N</code> 这个 <code>N</code> 是英文按键。与 <code>n</code> 刚好相反，为<strong>反向</strong>进行前一个搜寻动作。 例如 <code>/vbird</code> 后，按下 <code>N</code> 则表示<strong>向上</strong>搜寻 <code>vbird</code> 。</li></ul><h2 id="删除、复制与粘贴"><a href="#删除、复制与粘贴" class="headerlink" title="删除、复制与粘贴"></a>删除、复制与粘贴</h2><ul><li><code>x</code>, <code>X</code>在一行字当中，<code>x</code> 为向后删除一个字符 (相当于 <code>del</code> 按键)， <code>X</code> 为向前删除一个字符(相当于 <code>backspace</code> 亦即是退格键) (<strong>常用</strong>)</li><li><code>nx</code><code>n</code> 为数字，连续向后删除 n 个字符。</li><li><code>dd</code>剪切游标所在的那一整行(<strong>常用</strong>)，用 <code>p</code>&#x2F;<code>P</code> 可以粘贴。</li><li><code>ndd</code><code>n</code> 为数字。剪切光标所在的向下 n 行，例如 <code>20dd</code> 则是剪切 20 行(<strong>常用</strong>)，用 <code>p</code>&#x2F;<code>P</code> 可以粘贴。</li><li><code>d1G</code>删除光标所在到第一行的所有数据</li><li><code>dG</code>删除光标所在到最后一行的所有数据</li><li><code>d$</code>删除游标所在处，到该行的最后一个字符</li><li><code>d0</code>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</li><li><code>yy</code>复制游标所在的那一行(<strong>常用</strong>)</li><li><code>nyy</code><code>n</code> 为数字。复制光标所在的向下 n 行，例如 <code>20yy</code> 则是复制 20 行(<strong>常用</strong>)</li><li><code>y1G</code>复制游标所在行到第一行的所有数据</li><li><code>yG</code>复制游标所在行到最后一行的所有数据</li><li><code>y0</code>复制光标所在的那个字符到该行行首的所有数据</li><li><code>y$</code>复制光标所在的那个字符到该行行尾的所有数据</li><li><code>p</code>, <code>P</code><code>p</code> 为将已复制的数据在光标下一行贴上，<code>P</code> 则为贴在游标上一行！  (<strong>常用</strong>)</li><li><code>J</code>将光标所在行与下一行的数据结合成同一行</li><li><code>c</code>重复删除多个数据，例如 <code>10cj</code> 表示向下删除 10 行</li><li><code>u</code>复原前一个动作。(<strong>常用</strong>)</li><li><code>Ctrl + r</code>重做上一个动作。(<strong>常用</strong>)</li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><table><thead><tr><th align="left">进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td align="left">i, I</td><td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr><td align="left">a, A</td><td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td align="left">o, O</td><td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr><td align="left">r, R</td><td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td align="left">上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td><td></td></tr><tr><td align="left">[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><table><thead><tr><th align="left">指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td align="left">:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td align="left">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td align="left">:q</td><td>离开 vi (常用)</td></tr><tr><td align="left">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td align="left">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td align="left">ZZ</td><td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td></tr><tr><td align="left">ZQ</td><td>不保存，强制退出。效果等同于 **:q!**。</td></tr><tr><td align="left">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td align="left">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td align="left">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td align="left">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls &#x2F;home』即可在 vi 当中察看 &#x2F;home 底下以 ls 输出的档案信息！</td></tr></tbody></table><table><thead><tr><th align="left">vim 环境的变更</th><th></th></tr></thead><tbody><tr><td align="left">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td align="left">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://missing.csail.mit.edu/2020/editors/">Editors (Vim) · Missing Semester (mit.edu)</a></p><p><a href="https://www.runoob.com/linux/linux-vim.html">Linux vi&#x2F;vim | 菜鸟教程 (runoob.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>coding</category>
      
    </categories>
    
    
    <tags>
      
      <tag>coding</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TEST</title>
    <link href="/posts/59964/"/>
    <url>/posts/59964/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/posts/59964/1.jpg" class="" title="测试图片1"><p><img src="/posts/59964/1.jpg" alt="测试图片2"></p>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
