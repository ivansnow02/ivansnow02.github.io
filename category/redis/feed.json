{
    "version": "https://jsonfeed.org/version/1",
    "title": "Snow's Blog • All posts by \"redis\" category",
    "description": "some notes about computer science",
    "home_page_url": "https://blog.ivansnow02.xyz",
    "items": [
        {
            "id": "https://blog.ivansnow02.xyz/heimadianping/",
            "url": "https://blog.ivansnow02.xyz/heimadianping/",
            "title": "Redis实战——黑马点评",
            "date_published": "2023-05-12T09:47:54.000Z",
            "content_html": "<p>就是黑马程序员的 Redis 教程里的黑马点评的项目，前面就不讲了，直接开始正题。</p>\n<h1 id=\"基于session实现登录流程\"><a class=\"anchor\" href=\"#基于session实现登录流程\">#</a> 基于 Session 实现登录流程</h1>\n<p>分为三个步骤：</p>\n<ul>\n<li>发送验证码</li>\n<li>短信验证码登录、注册</li>\n<li>校验登录状态</li>\n</ul>\n<h2 id=\"发送验证码\"><a class=\"anchor\" href=\"#发送验证码\">#</a> 发送验证码</h2>\n<h3 id=\"逻辑\"><a class=\"anchor\" href=\"#逻辑\">#</a> 逻辑：</h3>\n<p>用户在提交手机号后，会校验手机号是否合法，如果不合法，则要求用户重新输入手机号</p>\n<p>如果手机号合法，后台此时生成对应的验证码，同时将验证码进行保存，然后再通过短信的方式将验证码发送给用户</p>\n<img loading=\"lazy\" data-src=\"/heimadianping/1.png\" class=\"\" title=\"发送验证码\">\n<h3 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">sendCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> phone<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 校验手机号，不符合就返回错误，符合就生成验证码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RegexUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPhoneInvalid</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手机号格式错误！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">String</span> code <span class=\"token operator\">=</span> <span class=\"token class-name\">RandomUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 保存验证码到 session</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    session<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">,</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 发送验证码</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送短信验证码成功，验证码：\"</span> <span class=\"token operator\">+</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"短信验证码登录-注册\"><a class=\"anchor\" href=\"#短信验证码登录-注册\">#</a> 短信验证码登录、注册</h2>\n<h3 id=\"逻辑-2\"><a class=\"anchor\" href=\"#逻辑-2\">#</a> 逻辑：</h3>\n<p>用户将验证码和手机号进行输入，后台从 session 中拿到当前验证码，然后和用户输入的验证码进行校验，如果不一致，则无法通过校验，如果一致，则后台根据手机号查询用户，如果用户不存在，则为用户创建账号信息，保存到数据库，无论是否存在，都会将用户信息保存到 session 中，方便后续获得当前登录信息</p>\n<img loading=\"lazy\" data-src=\"/heimadianping/2.png\" class=\"\" title=\"短信验证码登录、注册\">\n<h3 id=\"代码-2\"><a class=\"anchor\" href=\"#代码-2\">#</a> 代码</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginFormDTO</span> loginForm<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 校验手机号和验证码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> phone <span class=\"token operator\">=</span> loginForm<span class=\"token punctuation\">.</span><span class=\"token function\">getPhone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RegexUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPhoneInvalid</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手机号格式错误！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Object</span> cacheCode <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">String</span> code <span class=\"token operator\">=</span> loginForm<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 不一致，报错</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cacheCode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>cacheCode<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"验证码错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 一致，根据手机号查用户</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">,</span> phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 判断是否存在</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 不存在，创建用户</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        user <span class=\"token operator\">=</span> <span class=\"token function\">createUserWithPhone</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    session<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyProperties</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UserDTO</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"校验登录状态\"><a class=\"anchor\" href=\"#校验登录状态\">#</a> 校验登录状态</h2>\n<p>校验登录状态需要配置拦截器来实现登录拦截功能</p>\n<h3 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h3>\n<p>当用户发起请求时，会访问我们像 tomcat 注册的端口，任何程序想要运行，都需要有一个线程对当前端口号进行监听，tomcat 也不例外，当监听线程知道用户想要和 tomcat 连接连接时，那会由监听线程创建 socket 连接，socket 都是成对出现的，用户通过 socket 像互相传递数据，当 tomcat 端的 socket 接受到数据后，此时监听线程会从 tomcat 的线程池中取出一个线程执行用户请求，在我们的服务部署到 tomcat 后，线程会找到用户想要访问的工程，然后用这个线程转发到工程中的 controller，service，dao 中，并且访问对应的 DB，在用户执行完请求后，再统一返回，再找到 tomcat 端的 socket，再将数据写回到用户端的 socket，完成请求和响应。</p>\n<p>每个用户其实对应都是去找 tomcat 线程池中的一个线程来完成工作的， 使用完成后再进行回收，既然每个请求都是独立的，所以在每个用户去访问我们的工程时，我们可以使用 threadlocal 来做到线程隔离，每个线程操作自己的一份数据</p>\n<h3 id=\"逻辑-3\"><a class=\"anchor\" href=\"#逻辑-3\">#</a> 逻辑</h3>\n<p>用户在请求时候，会从 cookie 中携带者 JsessionId 到后台，后台通过 JsessionId 从 session 中拿到用户信息，如果没有 session 信息，则进行拦截，如果有 session 信息，则将用户信息保存到 threadLocal 中，并且放行</p>\n<img loading=\"lazy\" data-src=\"/heimadianping/3.png\" class=\"\" title=\"校验登录状态\">\n<h3 id=\"代码-3\"><a class=\"anchor\" href=\"#代码-3\">#</a> 代码</h3>\n<ul>\n<li>首先实现 HandlerInterceptor 接口</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerInterceptor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//Get session</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">HttpSession</span> session <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//Get user from session</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Object</span> user <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//if user exists</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">//not exists, reject, return 401</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//save user in ThreadLocal</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">UserHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDTO</span><span class=\"token punctuation\">)</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">UserHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>然后是 MvcConfig</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MvcConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptorRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LoginInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">excludePathPatterns</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token string\">\"/user/code\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token string\">\"/user/login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token string\">\"/blog/hot\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token string\">\"/shop/**\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token string\">\"/shop-type/**\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token string\">\"/voucher/**\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"session共享问题\"><a class=\"anchor\" href=\"#session共享问题\">#</a> session 共享问题</h2>\n<p>每个 Tomcat 中都有一份属于自己的 <code>session</code> , 假设用户第一次访问第一台 Tomcat，并且把自己的信息存放到第一台服务器的 <code>session</code>  中，但是第二次这个用户访问到了第二台 Tomcat，那么在第二台服务器上，肯定没有第一台服务器存放的 <code>session</code> ，所以此时 整个登录拦截功能就会出现问题，我们能如何解决这个问题呢？早期的方案是 <code>session</code>  拷贝，就是说虽然每个 Tomcat 上都有不同的 <code>session</code> ，但是每当任意一台服务器的 <code>session</code>  修改时，都会同步给其他的 Tomcat 服务器的 <code>session</code> ，这样的话，就可以实现 <code>session</code>  的共享了</p>\n<p>但是这种方案有两个<strong>大</strong>问题</p>\n<ol>\n<li>\n<p>每台服务器中都有完整的一份 <code>session</code>  数据，服务器压力过大。</p>\n</li>\n<li>\n<p><code>session</code>  拷贝数据时，可能会出现延迟</p>\n</li>\n</ol>\n<p>所以咱们要基于 Redis 来完成，我们把 <code>session</code>  换成 Redis，Redis 数据本身就是共享的，就可以避免 <code>session</code>  共享的问题了</p>\n<img loading=\"lazy\" data-src=\"/heimadianping/4.png\" class=\"\" title=\"session共享问题\">\n<h1 id=\"redis代替session的业务流程\"><a class=\"anchor\" href=\"#redis代替session的业务流程\">#</a> Redis 代替 <code>session</code>  的业务流程</h1>\n<h2 id=\"设计key\"><a class=\"anchor\" href=\"#设计key\">#</a> 设计 <code>key</code></h2>\n<p>我们可以生成一个随机字符串 <code>token</code> ，来存储。这样既可以满足唯一性也可以满足脱敏性。</p>\n<h2 id=\"整体流程\"><a class=\"anchor\" href=\"#整体流程\">#</a> 整体流程</h2>\n<p>当注册完成后，用户去登录会去校验用户提交的手机号和验证码，是否一致，如果一致，则根据手机号查询用户信息，不存在则新建，最后将用户数据保存到 Redis，并且生成 <code>token</code>  作为 Redis 的 <code>key</code> ，当我们校验用户是否登录时，会去携带着 <code>token</code>  进行访问，从 Redis 中取出 <code>token</code>  对应的 <code>value</code> ，判断是否存在这个数据，如果没有则拦截，如果存在则将其保存到 <code>threadLocal</code>  中，并且放行。</p>\n<img loading=\"lazy\" data-src=\"/heimadianping/5.png\" class=\"\" title=\"整体流程\">\n<h2 id=\"代码-4\"><a class=\"anchor\" href=\"#代码-4\">#</a> 代码</h2>\n<p>直接上代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IUserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">sendCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> phone<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 校验手机号，不符合就返回错误，符合就生成验证码</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RegexUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPhoneInvalid</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手机号格式错误！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">String</span> code <span class=\"token operator\">=</span> <span class=\"token class-name\">RandomUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 保存验证码到 Redis</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LOGIN_CODE_KEY</span> <span class=\"token operator\">+</span> phone<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">,</span> <span class=\"token constant\">LOGIN_CODE_TTL</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 发送验证码</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送短信验证码成功，验证码：\"</span> <span class=\"token operator\">+</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginFormDTO</span> loginForm<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 校验手机号和验证码</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">String</span> phone <span class=\"token operator\">=</span> loginForm<span class=\"token punctuation\">.</span><span class=\"token function\">getPhone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RegexUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPhoneInvalid</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手机号格式错误！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 从 redis 获取验证码并校验</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">String</span> cacheCode <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LOGIN_CODE_KEY</span> <span class=\"token operator\">+</span> phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">String</span> code <span class=\"token operator\">=</span> loginForm<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 不一致，报错</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cacheCode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>cacheCode<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"验证码错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 一致，根据手机号查用户</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">,</span> phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 判断是否存在</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 不存在，创建用户</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            user <span class=\"token operator\">=</span> <span class=\"token function\">createUserWithPhone</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 保存用户信息到 redis 中</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// 随机生成 token，作为登录令牌</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 将 User 对象转为 HashMap 存储</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">UserDTO</span> userDTO <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyProperties</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UserDTO</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> userMap <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span>beanToMap</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token punctuation\">(</span>userDTO<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token class-name\">CopyOptions</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                        <span class=\"token punctuation\">.</span><span class=\"token function\">setIgnoreNullValue</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                        <span class=\"token punctuation\">.</span><span class=\"token function\">setFieldValueEditor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fieldName<span class=\"token punctuation\">,</span> fieldValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> fieldValue<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">// 存储</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">String</span> tokenKey <span class=\"token operator\">=</span> <span class=\"token constant\">LOGIN_USER_KEY</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putAll</span><span class=\"token punctuation\">(</span>tokenKey<span class=\"token punctuation\">,</span> userMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// 设置 token 有效期</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>tokenKey<span class=\"token punctuation\">,</span> <span class=\"token constant\">LOGIN_USER_TTL</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MvcConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptorRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LoginInterceptor</span><span class=\"token punctuation\">(</span>stringRedisTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">excludePathPatterns</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token string\">\"/user/code\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token string\">\"/user/login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token string\">\"/blog/hot\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token string\">\"/shop/**\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token string\">\"/shop-type/**\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token string\">\"/voucher/**\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerInterceptor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LoginInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stringRedisTemplate <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//Get token in Header</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"authorization\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StrUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">//not exists, reject, return 401</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> <span class=\"token class-name\">RedisConstants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOGIN_USER_KEY</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//Get user from Redis</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> userMap <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//if user exists</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userMap<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">//not exists, reject, return 401</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">//turn Hash to UserDTO</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">UserDTO</span> userDTO <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">fillBeanWithMap</span><span class=\"token punctuation\">(</span>userMap<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserDTO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">//save user in ThreadLocal</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">UserHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveUser</span><span class=\"token punctuation\">(</span>userDTO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// refresh token TTL</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RedisConstants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOGIN_USER_TTL</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">UserHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "coding",
                "Redis",
                "Java",
                "Spring"
            ]
        },
        {
            "id": "https://blog.ivansnow02.xyz/Redis-Learning-03-SpringDataRedis/",
            "url": "https://blog.ivansnow02.xyz/Redis-Learning-03-SpringDataRedis/",
            "title": "SpringDataRedis",
            "date_published": "2023-05-10T13:05:27.000Z",
            "content_html": "<h1 id=\"redis的java客户端\"><a class=\"anchor\" href=\"#redis的java客户端\">#</a> Redis 的 Java 客户端</h1>\n<p>Redis 的客户端可以在<a href=\"https://redis.io/docs/clients/\"> Redis 官网</a>找到，推荐的客户端包括：</p>\n<ul>\n<li>Jedis：以 Redis 命令作为方法名称，学习成本低，简单实用。但是 Jedis 实例是<strong>线程不安全</strong>的，<strong>多线程环境下需要基于连接池来使用</strong></li>\n<li>Lettuce：Lettuce 是基于 Netty 实现的，支持同步、异步和响应式编程方式，并且是线程安全的。支持 Redis 的哨兵模式、集群模式和管道模式</li>\n<li>Redisson：是在 Redis 基础上实现了分布式的可伸缩的 java 数据结构，例如 Map、Queue 等，而且支持跨进程的同步机制：Lock、Semaphore 等待，比较适合用来实现特殊的功能需求</li>\n</ul>\n<h2 id=\"jedis\"><a class=\"anchor\" href=\"#jedis\">#</a> Jedis</h2>\n<blockquote>\n<p><a href=\"https://github.com/redis/jedis\">Jedis 官网</a></p>\n</blockquote>\n<h3 id=\"jedis快速入门\"><a class=\"anchor\" href=\"#jedis快速入门\">#</a> Jedis 快速入门</h3>\n<h4 id=\"导入依赖\"><a class=\"anchor\" href=\"#导入依赖\">#</a> 导入依赖</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--jedis--></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>redis.clients<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jedis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.junit.jupiter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit-jupiter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.9.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"建立连接\"><a class=\"anchor\" href=\"#建立连接\">#</a> 建立连接</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Jedis</span> jedis<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@BeforeEach</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 1. 建立连接</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 2. 设置密码</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//jedis.auth(\"\");</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 3. 选择库</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 存入</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Snow San\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result = \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 获取</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 插入</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Snow San\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"18\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 获取</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hgetAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"释放资源\"><a class=\"anchor\" href=\"#释放资源\">#</a> 释放资源</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@AfterEach</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jedis <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"jedis连接池\"><a class=\"anchor\" href=\"#jedis连接池\">#</a> Jedis 连接池</h3>\n<p>Jedis 本身是<strong>线程不安全</strong>的，并且频繁的创建和销毁连接会有性能损耗，因此推荐使用 Jedis 连接池～</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JedisConnectionFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">JedisPool</span> jedisPool<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 配置连接池</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">JedisPoolConfig</span> poolConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPoolConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        poolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        poolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        poolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMinIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        poolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxWaitMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 创建连接池对象，参数：连接池配置、服务端 ip、服务端端口、超时时间、密码</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        jedisPool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPool</span><span class=\"token punctuation\">(</span>poolConfig<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                  <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                                  <span class=\"token number\">6379</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                                  <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                                  <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 密码在此（</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Jedis</span> <span class=\"token function\">getJedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> jedisPool<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"springdataredis客户端\"><a class=\"anchor\" href=\"#springdataredis客户端\">#</a> SpringDataRedis 客户端</h2>\n<p><s>接下来就是本次的主角啦！</s></p>\n<p>SpringData 是 Spring 中数据操作的模块，包含对各种数据库的集成，其中对 Redis 的集成模块就叫做 SpringDataRedis，<a href=\"https://spring.io/projects/spring-data-redis\">SpringDataRedis 官网</a></p>\n<p>ta 的特点如下：</p>\n<ul>\n<li>提供了对不同 Redis 客户端的整合（Lettuce 和 Jedis）</li>\n<li>提供了 RedisTemplate 统一 API 来操作 Redis</li>\n<li>支持 Redis 的发布订阅模型</li>\n<li>支持 Redis 哨兵和 Redis 集群</li>\n<li>支持基于 Lettuce 的响应式编程</li>\n<li>支持基于 JDK、JSON、字符串、Spring 对象的数据序列化及反序列化</li>\n<li>支持基于 Redis 的 JDKCollection 实现</li>\n</ul>\n<p>SpringDataRedis 中提供了 RedisTemplate 工具类，其中封装了各种对 Redis 的操作。并且将不同数据类型的操作 API 封装到了不同的类型中</p>\n<h3 id=\"springdataredis快速入门\"><a class=\"anchor\" href=\"#springdataredis快速入门\">#</a> SpringDataRedis 快速入门</h3>\n<h4 id=\"新建一个boot项目\"><a class=\"anchor\" href=\"#新建一个boot项目\">#</a> 新建一个 boot 项目</h4>\n<p><s>别说你连 boot 项目都不会建</s></p>\n<h4 id=\"引入依赖\"><a class=\"anchor\" href=\"#引入依赖\">#</a> 引入依赖</h4>\n<p>要引入 <code>spring-boot-starter-data-redis</code> , <code>commons-pool2</code>  和 <code>jackson-databind</code> ，不过貌似 MVC 已经整合了 <code>jackson</code> ？</p>\n<p><s>懒的话整个 <code>lombok</code> </s></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--redis 依赖 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">&lt;!--common-pool--></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.commons<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>commons-pool2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">&lt;!--Jackson 依赖 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"配置redis\"><a class=\"anchor\" href=\"#配置redis\">#</a> 配置 Redis</h4>\n<p>说到 boot 果然就是 yaml 呢～～（笑）~~</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 0.0.0.0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">lettuce</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token key atrule\">pool</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token key atrule\">max-active</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token key atrule\">max-idle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token key atrule\">min-idle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token key atrule\">max-wait</span><span class=\"token punctuation\">:</span> 1000ms</pre></td></tr></table></figure><h4 id=\"注入redistemplate\"><a class=\"anchor\" href=\"#注入redistemplate\">#</a> 注入 RedisTemplate</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"测试-2\"><a class=\"anchor\" href=\"#测试-2\">#</a> 测试！</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 写入</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Snow San\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 获取</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Object</span> name <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"自定义序列化~~白雪~~\"><a class=\"anchor\" href=\"#自定义序列化~~白雪~~\">#</a> 自定义序列化～～（白雪）~~</h3>\n<p>RedisTemplate 可以接收任意 <code>Object</code>  作为值写入 Redis, 但在写入前会把 <code>Object</code>  序列化为字节形式，默认是采用 JDK 序列化，缺点是：</p>\n<ul>\n<li>可读性差</li>\n<li>内存占用较大</li>\n</ul>\n<p>因此可以自定义 RedisTemplate 的序列化方式，采用 JSON 序列化来代替默认的 JDK 序列化方式</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 创建 JSON 序列化工具</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">GenericJackson2JsonRedisSerializer</span> jsonRedisSerializer <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericJackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 设置 Key 的序列化</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisSerializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisSerializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 设置 Value 的序列化</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setValueSerializer</span><span class=\"token punctuation\">(</span>jsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashValueSerializer</span><span class=\"token punctuation\">(</span>jsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 返回</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>JSON 序列化在查询时还能自动把 JSON 反序列化为 Java 对象，注意 <code>@class</code>  字段，ta 会带来额外的内存开销</p>\n<h3 id=\"stringredistemplate\"><a class=\"anchor\" href=\"#stringredistemplate\">#</a> StringRedisTemplate</h3>\n<p>为了节省内存空间，我们可以不使用 JSON 序列化器来处理 value，而是统一使用 String 序列化器，要求只能存储 String 类型的 key 和 value。</p>\n<p>不过当需要存储 Java 对象时，必须手动完成对象的序列化和反序列化</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 写入</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"verify:phone:11111111\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 获取</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Object</span> name <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObjectMapper</span> mapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testSaveUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">JsonProcessingException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 创建对象</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Snow\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 手动序列化</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 写入</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:1\"</span><span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 获取</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">String</span> jsonUser <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 手动反序列化</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">User</span> user1 <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>jsonUser<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1 = \"</span> <span class=\"token operator\">+</span> user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "coding",
                "Redis",
                "Java"
            ]
        },
        {
            "id": "https://blog.ivansnow02.xyz/Redis-Learning-02-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/",
            "url": "https://blog.ivansnow02.xyz/Redis-Learning-02-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/",
            "title": "Redis的快速入门",
            "date_published": "2023-05-08T12:16:45.000Z",
            "content_html": "<h1 id=\"redis命令行客户端\"><a class=\"anchor\" href=\"#redis命令行客户端\">#</a> Redis 命令行客户端</h1>\n<p>Redis 安装完成后就自带了命令行客户端： <code>redis-cli</code> ，使用方式如下：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>redis-cli <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>commonds<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>其中常见的 options 有：</p>\n<ul>\n<li><code>-h 127.0.0.1</code> ：指定要连接的 Redis 节点的 IP 地址，默认是 127.0.0.1</li>\n<li><code>-p 6379</code> ：指定要连接的 Redis 节点的端口，默认是 6379</li>\n<li><code>-a 123456</code> ：指定 Redis 的访问密码</li>\n</ul>\n<p>其中的 <code>commonds</code>  就是 Redis 的操作命令，例如：</p>\n<ul>\n<li><code>ping</code> ：与 Redis 服务端做心跳测试，服务端正常会返回 <code>pong</code></li>\n</ul>\n<p>不指定 <code>commond</code>  时，会进入 <code>redis-cli</code>  的交互控制台</p>\n<h1 id=\"redis的通用命令\"><a class=\"anchor\" href=\"#redis的通用命令\">#</a> Redis 的通用命令</h1>\n<blockquote>\n<p>通过 <code>help [command]</code>  可以查看一个命令的具体用法<br />\n Redis 为了方便我们学习，将操作不同数据类型的命令也做了分组，在<a href=\"https://redis.io/commands\"> Redis 官网</a>可以查看到不同的命令：</p>\n</blockquote>\n<p>通用指令是部分数据类型的，都可以使用的指令，常见的有：</p>\n<ul>\n<li><code>KEYS</code> ：查看符合模板的所有 <code>key</code> ，可以使用通配符（模糊查询效率不高，单线程阻塞请求）\n<ul>\n<li><code>KEYS *</code>  查询所有</li>\n<li><code>KEYS a*</code>  查询以 a 开头的所有</li>\n</ul>\n</li>\n<li><code>DEL</code> ：删除一个指定的 <code>key</code> ，可删除多个，返回值是删除个数</li>\n<li><code>EXISTS</code> ：判断 key 是否存在，可判断多个</li>\n<li><code>EXPIRE</code> ：给一个 key 设置有效期，有效期到期时该 key 会被自动删除（Redis 基于内存存储，节省内存，防止内存占满）</li>\n<li><code>TTL</code>  (Time To Live)：查看一个 KEY 的剩余有效期，返回 <code>-1</code>  表示永久有效</li>\n</ul>\n<h2 id=\"string类型\"><a class=\"anchor\" href=\"#string类型\">#</a> String 类型</h2>\n<p>String 类型是 Redis 中最简单的存储类型。<br />\n其 <code>value</code>  是字符串，不过根据字符串的格式不同，又可以分为 3 类：</p>\n<ul>\n<li>string：普通字符串</li>\n<li>int：整数类型，可以做自增、自减操作</li>\n<li>float：浮点类型，可以做自增、自减操作</li>\n</ul>\n<p>底层都是<strong>字节数组</strong>形式存储，只不过是编码方式不同。字符串类型的最大空间不能超过 512m.</p>\n<h3 id=\"string的常用命令\"><a class=\"anchor\" href=\"#string的常用命令\">#</a> String 的常用命令</h3>\n<ul>\n<li><code>SET</code> ：添加或者修改已经存在的一个 String 类型的键值对</li>\n<li><code>GET</code> ：根据 <code>key</code>  获取 String 类型的 <code>value</code></li>\n<li><code>MSET</code> ：批量添加多个 String 类型的键值对</li>\n<li><code>MGET</code> ：根据多个 <code>key</code>  获取多个 String 类型的 <code>value</code></li>\n<li><code>INCR</code> ：让一个整型的 <code>key</code>  自增 1</li>\n<li><code>INCRBY</code> : 让一个整型的 <code>key</code>  自增并指定步长，例如： <code>incrby num 2</code>  让 <code>num</code>  值自增 2</li>\n<li><code>INCRBYFLOAT</code> ：让一个浮点类型的数字自增并指定步长</li>\n<li><code>SETNX</code> ：添加一个 String 类型的键值对，前提是这个 <code>key</code>  不存在，否则不执行</li>\n<li><code>SETEX</code> ：添加一个 String 类型的键值对，并且指定有效期</li>\n</ul>\n<h3 id=\"key结构\"><a class=\"anchor\" href=\"#key结构\">#</a> Key 结构</h3>\n<p>Redis 的 <code>key</code>  允许有多个单词形成层级结构，多个单词之间用 <code>:</code>  隔开，格式如下：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Key1<span class=\"token operator\">:</span>Key2<span class=\"token operator\">:</span>Key3</pre></td></tr></table></figure><p>这个格式并非固定，也可以根据自己的需求来删除或添加词条。这样以来，我们就可以把不同类型的数据区分开了。从而避免了 <code>key</code>  的冲突问题。</p>\n<p>如果 <code>Value</code>  是一个 Java 对象，例如一个 <code>User</code>  对象，则可以将对象序列化为 <code>JSON</code>  字符串后存储</p>\n<table>\n<thead>\n<tr>\n<th><code>Key</code></th>\n<th><code>Value</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Key1:Key2:Key3</code></td>\n<td><code>&#123;&quot;Key3&quot;: value3, …&#125;</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"hash类型\"><a class=\"anchor\" href=\"#hash类型\">#</a> Hash 类型</h2>\n<p>Hash 类型，也叫散列，其 <code>value</code>  是一个无序字典，类似于 Java 中的 HashMap 结构。</p>\n<p>String 结构是将对象序列化为 <code>JSON</code>  字符串后存储，当需要修改对象某个字段时很不方便，Hash 结构可以将对象中的每个字段独立存储，可以针对单个字段做 CRUD</p>\n<h3 id=\"hash的常见命令\"><a class=\"anchor\" href=\"#hash的常见命令\">#</a> Hash 的常见命令</h3>\n<ul>\n<li><code>HSET key field value</code> ：添加或者修改 hash 类型 <code>key</code>  的 <code>field</code>  的值</li>\n<li><code>HGET key field</code> ：获取一个 hash 类型 <code>key</code>  的 <code>field</code>  的值</li>\n<li><code>HMSET</code> ：批量添加多个 hash 类型 <code>key</code>  的 <code>field</code>  的值</li>\n<li><code>HMGET</code> ：批量获取多个 hash 类型 <code>key</code>  的 <code>field</code>  的值</li>\n<li><code>HGETALL</code> ：获取一个 hash 类型的 <code>key</code>  中的所有的 <code>field</code>  和 <code>value</code></li>\n<li><code>HKEYS</code> ：获取一个 hash 类型的 <code>key</code>  中的所有的 <code>field</code></li>\n<li><code>HINCRBY</code> ：让一个 hash 类型 <code>key</code>  的字段值自增并指定步长</li>\n<li><code>HSETNX</code> ：添加一个 hash 类型的 <code>key</code>  的 <code>field</code>  值，前提是这个 <code>field</code>  不存在，否则不执行</li>\n</ul>\n<h2 id=\"list类型\"><a class=\"anchor\" href=\"#list类型\">#</a> List 类型</h2>\n<p>Redis 中的 List 类型与 Java 中的 LinkedList 类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索，特征为：</p>\n<ul>\n<li>有序</li>\n<li>元素可以重复</li>\n<li>插入和删除快</li>\n<li>查询速度一般</li>\n</ul>\n<img loading=\"lazy\" data-src=\"/Redis-Learning-02-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/linkedlist.png\" class=\"\" title=\"linkedlist\">\n<h3 id=\"list常见命令\"><a class=\"anchor\" href=\"#list常见命令\">#</a> List 常见命令</h3>\n<ul>\n<li><code>LPUSH key element ...</code> ：向列表左侧插入一个或多个元素（倒序）</li>\n<li><code>LPOP key</code> ：移除并返回列表左侧的第一个元素，没有则返回 nil</li>\n<li><code>RPUSH key element ... </code> ：向列表右侧插入一个或多个元素（顺序）</li>\n<li><code>RPOP key</code> ：移除并返回列表右侧的第一个元素</li>\n<li><code>LRANGE key star end</code> ：返回一段角标范围内的所有元素</li>\n<li><code>BLPOP</code>  和 <code>BRPOP</code>  (Block)：与 <code>LPOP</code>  和 <code>RPOP</code>  类似，只不过在没有元素时等待指定时间，而不是直接返回 <code>nil</code></li>\n</ul>\n<h2 id=\"set类型\"><a class=\"anchor\" href=\"#set类型\">#</a> Set 类型</h2>\n<p>Redis 的 Set 结构与 Java 中的 HashSet 类似，可以看做是一个 <code>value</code>  为 <code>null</code>  的 HashMap。因为也是一个 hash 表，因此具备与 HashSet 类似的特征：</p>\n<ul>\n<li>\n<p>无序</p>\n</li>\n<li>\n<p>元素不可重复</p>\n</li>\n<li>\n<p>查找快</p>\n</li>\n<li>\n<p>支持交集、并集、差集等功能</p>\n</li>\n</ul>\n<h3 id=\"set的常见命令\"><a class=\"anchor\" href=\"#set的常见命令\">#</a> Set 的常见命令</h3>\n<ul>\n<li><code>SADD key member ...</code> ：向 set 中添加一个或多个元素</li>\n<li><code>SREM key member ... </code> : 移除 set 中的指定元素</li>\n<li><code>SCARD key</code> ： 返回 set 中元素的个数</li>\n<li><code>SISMEMBER key member</code> ：判断一个元素是否存在于 set 中</li>\n<li><code>SMEMBERS</code> ：获取 set 中的所有元素</li>\n<li><code>SINTER key1 key2 ... </code> ：求 <code>key1</code>  与 <code>key2</code>  的交集</li>\n<li><code>SDIFF key1 key2 ...</code> ：求 <code>key1</code>  与 <code>key2</code>  的差集</li>\n<li><code>SUNION key1 key2 ..</code> ：求 <code>key1</code>  和 <code>key2</code>  的并集</li>\n</ul>\n<h2 id=\"sortedset类型\"><a class=\"anchor\" href=\"#sortedset类型\">#</a> SortedSet 类型</h2>\n<p>Redis 的 SortedSet 是一个可排序的 set 集合，与 Java 中的 TreeSet 有些类似，但底层数据结构却差别很大。SortedSet 中的每一个元素都带有一个 <code>score</code>  属性，可以基于 <code>score</code>  属性对元素排序，底层的实现是一个跳表（SkipList）加 hash 表，具备下列特性：</p>\n<ul>\n<li>可排序</li>\n<li>元素不重复</li>\n<li>查询速度快</li>\n</ul>\n<p>SortedSet 经常被用来实现排行榜这样的功能</p>\n<h3 id=\"sortedset的常见命令\"><a class=\"anchor\" href=\"#sortedset的常见命令\">#</a> SortedSet 的常见命令</h3>\n<ul>\n<li>\n<p><code>ZADD key score member</code> ：添加一个或多个元素到 sorted set ，如果已经存在则更新其 <code>score</code>  值</p>\n</li>\n<li>\n<p><code>ZREM key member</code> ：删除 sorted set 中的一个指定元素</p>\n</li>\n<li>\n<p><code>ZSCORE key member</code>  : 获取 sorted set 中的指定元素的 <code>score</code>  值</p>\n</li>\n<li>\n<p><code>ZRANK key member</code> ：获取 sorted set 中的指定元素的排名</p>\n</li>\n<li>\n<p><code>ZCARD key</code> ：获取 sorted set 中的元素个数</p>\n</li>\n<li>\n<p><code>ZCOUNT key min max</code> ：统计 <code>score</code>  值在给定范围内的所有元素的个数</p>\n</li>\n<li>\n<p><code>ZINCRBY key increment member</code> ：让 sorted set 中的指定元素自增，步长为指定的 <code>increment</code>  值</p>\n</li>\n<li>\n<p><code>ZRANGE key min max</code> ：按照 <code>score</code>  排序后，获取指定排名范围内的元素</p>\n</li>\n<li>\n<p><code>ZRANGEBYSCORE key min max</code> ：按照 <code>score</code>  排序后，获取指定 <code>score</code>  范围内的元素</p>\n</li>\n<li>\n<p><code>ZDIFF</code> 、 <code>ZINTER</code> 、 <code>ZUNION</code> ：求差集、交集、并集</p>\n<blockquote>\n<p>所有的排名默认都是升序，如果要降序则在命令的 Z 后面添加 REV 即可，例如： <code>ZREVRANK key memeber</code></p>\n</blockquote>\n</li>\n</ul>\n",
            "tags": [
                "coding",
                "Redis"
            ]
        },
        {
            "id": "https://blog.ivansnow02.xyz/Redis-Learning-01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "url": "https://blog.ivansnow02.xyz/Redis-Learning-01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "title": "Redis的数据类型",
            "date_published": "2023-04-24T02:31:49.000Z",
            "content_html": "<p>Redis 支持五种数据类型：</p>\n<ul>\n<li>string</li>\n<li>hash</li>\n<li>list</li>\n<li>set</li>\n<li>zset</li>\n</ul>\n<h2 id=\"string\"><a class=\"anchor\" href=\"#string\">#</a> String</h2>\n<p>string 是最基本的类型。string 二进制安全，即可以包含任何数据。</p>\n<p>string 一个键最大能存储 512MB。</p>\n<p>string 类型的数据结构存储方式有三种 <code>int</code> 、 <code>raw</code> 、 <code>embstr</code> ：</p>\n<h3 id=\"int\"><a class=\"anchor\" href=\"#int\">#</a> int</h3>\n<p>Redis 中规定假如存储的是<strong>整数型值</strong>，比如 <code>set num 123</code>  这样的类型，就会使用 <code>int</code>  的存储方式进行存储，在 <code>redisObject</code>  的 <code>ptr属性</code> 中就会保存该值。</p>\n<img loading=\"lazy\" data-src=\"/Redis-Learning-01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/int-1682306725947-10.png\" class=\"\" title=\"int\">\n<h3 id=\"sds\"><a class=\"anchor\" href=\"#sds\">#</a> SDS</h3>\n<p>假如存储的<strong>字符串是一个字符串值并且长度大于 32 个字节</strong>就会使用 SDS（simple dynamic string）方式进行存储，并且 <code>encoding</code>  设置为 <code>raw</code> ；若是<strong>字符串长度小于等于 32 个字节</strong>就会将 <code>encoding</code>  改为 <code>embstr</code>  来保存字符串。</p>\n<p>SDS 称为<strong>简单动态字符串</strong>，对于 SDS 中的定义在 Redis 的源码中有的三个属性 <code>int len</code> 、 <code>int free</code> 、 <code>char buf[]</code> 。</p>\n<p><code>len</code>  保存了字符串的长度， <code>free</code>  表示 <code>buf数组</code> 中未使用的字节数量， <code>buf数组</code> 则是保存字符串的每一个字符元素。</p>\n<p>因此当你在 Redis 中存储一个字符串 <code>&quot;Hello_World&quot;</code>  时，SDS 的形式的 <code>redisObject</code>  结构图如下图所示：</p>\n<img loading=\"lazy\" data-src=\"/Redis-Learning-01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/SDS.png\" class=\"\" title=\"SDS\">\n<h2 id=\"hash\"><a class=\"anchor\" href=\"#hash\">#</a> Hash</h2>\n<p>Redis hash 是一个<strong>键值 (key=&gt;value) 对集合</strong>。</p>\n<p>Redis hash 是一个 string 类型的 field 和 value 的<strong>映射表</strong>，hash 特别适合用于存储对象。</p>\n<p>每个 hash 可以存储 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{32} -1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">32</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 键值对。</p>\n<p>Hash 对象的实现方式有两种分别是 <code>ziplist</code> 、 <code>hashtable</code> ，其中 <code>hashtable</code>  的存储方式 <code>key</code>  是 String 类型的， <code>value</code>  也是以 <code>key value</code>  的形式进行存储。</p>\n<h3 id=\"ziplist\"><a class=\"anchor\" href=\"#ziplist\">#</a> ziplist</h3>\n<p>压缩列表（ziplist）是<strong>一组连续内存块组成的顺序的数据结构</strong>，压缩列表能够节省空间，压缩列表中使用多个节点来存储数据。</p>\n<p>压缩列表是列表键和哈希键底层实现的原理之一，<strong>压缩列表并不是以某种压缩算法进行压缩存储数据，而是它表示一组连续的内存空间的使用，节省空间</strong>，压缩列表的内存结构图如下：</p>\n<img loading=\"lazy\" data-src=\"/Redis-Learning-01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/ziplist.png\" class=\"\" title=\"ziplist\">\n<p>其中：</p>\n<ol>\n<li><code>zlbytes</code> ：4 个字节的大小，记录压缩列表占用内存的字节数。</li>\n<li><code>zltail</code> ：4 个字节大小，记录表尾节点距离起始地址的偏移量，用于快速定位到尾节点的地址。</li>\n<li><code>zllen</code> ：2 个字节的大小，记录压缩列表中的节点数。</li>\n<li><code>entry</code> ：表示列表中的每一个节点。</li>\n<li><code>zlend</code> ：表示压缩列表的特殊结束符号 <code>'0xFF'</code></li>\n</ol>\n<p>每一个 <code>entry</code>  节点又有三部分组成，分别是 <code>previous_entry_length</code> 、 <code>encoding</code> 、 <code>content</code> 。</p>\n<ol>\n<li><code>previous_entry_length</code>  表示前一个节点 <code>entry</code>  的长度，可用于计算前一个节点的其实地址，因为他们的地址是连续的。</li>\n<li><code>encoding</code> ：这里保存的是 <code>content</code>  的内容类型和长度。</li>\n<li><code>content</code> ： <code>content</code>  保存的是每一个节点的内容。</li>\n</ol>\n<img loading=\"lazy\" data-src=\"/Redis-Learning-01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/entry.png\" class=\"\" title=\"entry\">\n<h3 id=\"hashtable\"><a class=\"anchor\" href=\"#hashtable\">#</a> hashtable</h3>\n<p>hashtable 是<strong>一种字典类型的数据结构</strong>，用于存储键值对，其中键是字符串类型，值可以是字符串、列表、集合或有序集合。hashtable 的<strong>底层实现是一个数组，每个数组元素是一个链表，用于解决哈希冲突</strong>。当 hashtable 中的键值对数量变化时，会进行扩展或收缩操作，重新分配数组的大小和哈希值。hashtable 是哈希键和集合键的底层实现之一，当这些键的元素数量和长度较大时，Redis 会使用 hashtable 作为其存储方式。</p>\n<h2 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> List</h2>\n<p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部或者尾部。</p>\n<p>列表最多可存储 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{32} - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">32</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 元素。</p>\n<p>Redis 中的列表在 3.2 之前的版本是使用 <code>ziplist</code>  和 <code>linkedlist</code>  进行实现的。在 3.2 之后的版本就是引入了 <code>quicklist</code> 。</p>\n<h3 id=\"linkedlist\"><a class=\"anchor\" href=\"#linkedlist\">#</a> linkedlist</h3>\n<p>linkedlist 是一个双向链表，他和普通的链表一样都是由指向前后节点的指针。插入、修改、更新的时间复杂度是 O (1)，查询的时间复杂度是 O (n)。其特性为</p>\n<ol>\n<li>每一个节点都有指向前一个节点和后一个节点的指针。</li>\n<li>头节点和尾节点的 <code>prev</code>  和 <code>next</code>  指针指向为 <code>null</code> ，所以链表是无环的。</li>\n<li>链表有自己长度的信息，获取长度的时间复杂度为 O (1)。</li>\n</ol>\n<img loading=\"lazy\" data-src=\"/Redis-Learning-01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/linkedlist.png\" class=\"\" title=\"linkedlist\">\n<h3 id=\"quicklist\"><a class=\"anchor\" href=\"#quicklist\">#</a> quicklist</h3>\n<p>quicklist 实际上是 zipList 和 linkedList 的混合体，它将 linkedList 按段切分，每一段使用 zipList 来紧凑存储，多个 zipList 之间使用双向指针串接起来。</p>\n<ol>\n<li><code>prev</code> 、 <code>next</code>  指向该节点的前后节点。</li>\n<li><code>zl</code>  指向该节点对应的 ziplist 结构。</li>\n<li><code>sz</code>  代表整个 ziplist 结构的大小。</li>\n<li><code>encoding</code>  代表采用的编码方式： <code>1</code>  代表是原生的， <code>2</code>  代表使用 <code>LZF</code>  进行压缩。</li>\n<li><code>container</code>  为 quickListNode 节点 <code>zl</code>  指向的容器类型： <code>1</code>  代表 <code>none</code> ， <code>2</code>  代表使用 <code>ziplist</code>  存储数据。</li>\n<li><code>recompress</code>  代表这个节点之前是否是压缩节点，若是，则在使用压缩节点前先进行解压缩，使用后需要重新压缩，此外为 <code>1</code> ，代表是压缩节点。</li>\n<li><code>attempted_compress</code>  测试时使用。</li>\n<li><code>extra</code>  为预留。</li>\n</ol>\n<img loading=\"lazy\" data-src=\"/Redis-Learning-01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/quicklist.png\" class=\"\" title=\"quicklist\">\n<h2 id=\"set\"><a class=\"anchor\" href=\"#set\">#</a> Set</h2>\n<p>Redis 的 Set 是 string 类型的无序集合。</p>\n<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O (1)。</p>\n<p>集合中最大的成员数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{32} - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">32</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>。</p>\n<p>Redis 中列表和集合都可以用来存储字符串，但是 <strong>Set 是不可重复的集合，而 List 列表可以存储相同的字符串</strong>。</p>\n<p>Set 的底层实现是 <code>hashtable</code>  和 <code>intset</code> 。</p>\n<h3 id=\"intset\"><a class=\"anchor\" href=\"#intset\">#</a> intset</h3>\n<p>inset 也叫做<strong>整数集合</strong>，用于保存整数值的数据结构类型，它可以保存 <code>int16_t</code> 、 <code>int32_t</code>  或者 <code>int64_t</code>  的整数值。</p>\n<p>在整数集合中，有三个属性值 <code>encoding、length、contents[]</code> ，分别表示编码方式、整数集合的长度、以及元素内容， <code>length</code>  就是记录 <code>contents</code>  里面的大小。</p>\n<p>在整数集合新增元素的时候，若是超出了原集合的长度大小，就会对集合进行升级，具体的升级过程如下：</p>\n<ol>\n<li>首先扩展底层数组的大小，并且数组的类型为新元素的类型。</li>\n<li>然后将原来的数组中的元素转为新元素的类型，并放到扩展后数组对应的位置。</li>\n<li>整数集合升级后就不会再降级，编码会一直保持升级后的状态。</li>\n</ol>\n<img loading=\"lazy\" data-src=\"/Redis-Learning-01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/intset.png\" class=\"\" title=\"intset\">\n<h2 id=\"zset\"><a class=\"anchor\" href=\"#zset\">#</a> Zset</h2>\n<p>Redis zset 和 set 一样也是 string 类型元素的集合，且不允许重复的成员。</p>\n<p>不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。</p>\n<p>zset 的成员是唯一的，但分数（score）却可以重复。</p>\n<p>zset 的底层实现是 <code>ziplist</code>  和 <code>skiplist</code> 。</p>\n<h3 id=\"skipset\"><a class=\"anchor\" href=\"#skipset\">#</a> skipset</h3>\n<p>skiplist 也叫做<strong>跳跃表</strong>，跳跃表是一种有序的数据结构，它通过每一个节点维持多个指向其它节点的指针，从而达到快速访问的目的。</p>\n<p>skiplist 由如下几个特点：</p>\n<ol>\n<li>有很多层组成，由上到下节点数逐渐密集，最上层的节点最稀疏，跨度也最大。</li>\n<li>每一层都是一个有序链表，只扫包含两个节点，头节点和尾节点。</li>\n<li>每一层的每一个每一个节点都含有指向同一层下一个节点和下一层同一个位置节点的指针。</li>\n<li>如果一个节点在某一层出现，那么该以下的所有链表同一个位置都会出现该节点。</li>\n</ol>\n<img loading=\"lazy\" data-src=\"/Redis-Learning-01-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/skiplist.png\" class=\"\" title=\"skiplist\">\n",
            "tags": [
                "coding",
                "Redis"
            ]
        }
    ]
}