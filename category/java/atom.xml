<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.ivansnow02.xyz</id>
    <title>Snow&#39;s Blog • Posts by &#34;java&#34; category</title>
    <link href="https://blog.ivansnow02.xyz" />
    <updated>2024-11-03T02:59:18.000Z</updated>
    <category term="Compilers" />
    <category term="computer science" />
    <category term="learning" />
    <category term="coding" />
    <category term="algorithms" />
    <category term="data structure" />
    <category term="computer graphics" />
    <category term="Django" />
    <category term="Python" />
    <category term="Redis" />
    <category term="trash" />
    <category term="Java" />
    <category term="English" />
    <category term="test" />
    <category term="vim" />
    <category term="coursera" />
    <category term="Spring" />
    <category term="Math" />
    <category term="Linear Algebra" />
    <category term="tree" />
    <category term="Physics" />
    <category term="Discrete Mathematics" />
    <entry>
        <id>https://blog.ivansnow02.xyz/java-learning/</id>
        <title>Java学习</title>
        <link rel="alternate" href="https://blog.ivansnow02.xyz/java-learning/"/>
        <content type="html">&lt;h2 id=&#34;java概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java概述&#34;&gt;#&lt;/a&gt; Java 概述&lt;/h2&gt;
&lt;h3 id=&#34;java语言的主要特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#java语言的主要特点&#34;&gt;#&lt;/a&gt; Java 语言的主要特点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;简单性&lt;/li&gt;
&lt;li&gt;面向对象&lt;/li&gt;
&lt;li&gt;跨平台&lt;/li&gt;
&lt;li&gt;安全性&lt;/li&gt;
&lt;li&gt;多线程&lt;/li&gt;
&lt;li&gt;动态性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;初始java程序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#初始java程序&#34;&gt;#&lt;/a&gt; 初始 Java 程序&lt;/h3&gt;
&lt;p&gt;Java 源文件以 “java” 结尾，此文件中&lt;strong&gt;最多只能有一个类被声明为 public&lt;/strong&gt;，保存时源文件名需与 public 类名相同，如果文件中不存在 public 类，源文件名无要求。&lt;/p&gt;
&lt;p&gt;一个源文件包含几个类就可以编译出几个.class 文件。&lt;/p&gt;
&lt;h2 id=&#34;基本程序设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本程序设计&#34;&gt;#&lt;/a&gt; 基本程序设计&lt;/h2&gt;
&lt;h3 id=&#34;常量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常量&#34;&gt;#&lt;/a&gt; 常量&lt;/h3&gt;
&lt;p&gt;符号常量： &lt;code&gt;final&lt;/code&gt;  修饰的变量，一旦赋值后不可更改。&lt;/p&gt;
&lt;h3 id=&#34;类型转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类型转换&#34;&gt;#&lt;/a&gt; 类型转换&lt;/h3&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://blog.ivansnow02.xyz/blog-img/images/java-learning/85bfcba51b1dccf3fe9bbad3b7a8e45a96c54baaf89d3ca283296a9c6fb98b96.png&#34; alt=&#34;picture 0&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;位运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#位运算&#34;&gt;#&lt;/a&gt; 位运算&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;用法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;~&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按位取反&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;amp; b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按位与&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;|&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a \| b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按位或&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a ^ b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按位异或&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&amp;lt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;lt;&amp;lt; b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;左移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt;&amp;gt; b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;右移&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a &amp;gt;&amp;gt;&amp;gt; b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;无符号右移&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;流程控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流程控制&#34;&gt;#&lt;/a&gt; 流程控制&lt;/h2&gt;
&lt;h3 id=&#34;标准输入与scanner类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标准输入与scanner类&#34;&gt;#&lt;/a&gt; 标准输入与 Scanner 类&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;Scanner&lt;/span&gt; in &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Scanner&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;in&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;\\ &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;in&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回值&lt;/th&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hasNext()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;判断是否还有输入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;读取一个字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;&lt;code&gt;nextT()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;读取一个 T 类型的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;&lt;code&gt;nextLine()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;读取一行字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hasNextT()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;判断下一个输入是否为 T 类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hasNextT(int radix)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;判断下一个输入是否为 T 类型，radix 为进制&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;标准输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标准输出&#34;&gt;#&lt;/a&gt; 标准输出&lt;/h3&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello, World!&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;printf&lt;/code&gt;  方法&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标志&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;左对齐&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;显示正负号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;数字前补 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#&lt;/td&gt;
&lt;td&gt;显示八进制或十六进制前缀&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;空格&lt;/td&gt;
&lt;td&gt;正数前加空格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;,&lt;/td&gt;
&lt;td&gt;数字以逗号分隔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(&lt;/td&gt;
&lt;td&gt;负数用括号括起来&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;格式&lt;/td&gt;
&lt;td&gt;说明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;---&lt;/td&gt;
&lt;td&gt;---&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%d&lt;/td&gt;
&lt;td&gt;整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%f&lt;/td&gt;
&lt;td&gt;浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%e&lt;/td&gt;
&lt;td&gt;科学计数法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%g&lt;/td&gt;
&lt;td&gt;通用浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%h&lt;/td&gt;
&lt;td&gt;散列码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%s&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%c&lt;/td&gt;
&lt;td&gt;字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%b&lt;/td&gt;
&lt;td&gt;布尔值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%t&lt;/td&gt;
&lt;td&gt;日期时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%n&lt;/td&gt;
&lt;td&gt;换行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%x&lt;/td&gt;
&lt;td&gt;十六进制整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%o&lt;/td&gt;
&lt;td&gt;八进制整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%a&lt;/td&gt;
&lt;td&gt;十六进制浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;面向对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象&#34;&gt;#&lt;/a&gt; 面向对象&lt;/h2&gt;
&lt;h3 id=&#34;面向对象编程的特性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#面向对象编程的特性&#34;&gt;#&lt;/a&gt; 面向对象编程的特性&lt;/h3&gt;
&lt;h4 id=&#34;封装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#封装&#34;&gt;#&lt;/a&gt; 封装&lt;/h4&gt;
&lt;p&gt;将对象的属性和行封装起来构成新的类型，并隐藏内部实现细节，只向用户提供对象的外部可调用操作&lt;/p&gt;
&lt;p&gt;封装最大的好处是降低了软件系统的耦合程度。实现了代码的可重用性和可维护性。&lt;/p&gt;
&lt;h4 id=&#34;继承&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#继承&#34;&gt;#&lt;/a&gt; 继承&lt;/h4&gt;
&lt;p&gt;继承性是类与类之间的一种关系，通过继承，可以在无需重新编写原有类的情况下，实现代码的扩展和重用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;具有父类的全部属性和行为&lt;/li&gt;
&lt;li&gt;能对继承的属性和行为进行修改和扩充。&lt;/li&gt;
&lt;li&gt;极大提升了可重用性和可维护性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多态&#34;&gt;#&lt;/a&gt; 多态&lt;/h4&gt;
&lt;p&gt;多态性是指在父类中定义的属性和行为被子类继承之后，可以具有不同的数据类型或表现形式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单个类：多态性在单个类中表现为方法重载：一个类可以有多个名字相同、形参列表不同的方法，在使用时由传递给它们的实参来决定使用哪个方法。&lt;/li&gt;
&lt;li&gt;在多个类中主要表现为继承结构中的方法覆盖：父类和子类中具有相同的方法头，不同的代码实现，运行时再决定调用哪个方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;对象与构造方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象与构造方法&#34;&gt;#&lt;/a&gt; 对象与构造方法&lt;/h3&gt;
&lt;p&gt;要比较两个对象的内容是否相等，即对象实体值，必须在类里实现专门的方法，所有类的父类 &lt;code&gt;Object&lt;/code&gt;  中有一个方法 &lt;code&gt;equals()&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;因对象数组中每个元素都是对象，所以每个元素都需单独实例化（还需用 &lt;code&gt;new&lt;/code&gt;  实例化每个元素）&lt;/p&gt;
&lt;h3 id=&#34;方法重载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法重载&#34;&gt;#&lt;/a&gt; 方法重载&lt;/h3&gt;
&lt;p&gt;定义方法时使用相同的方法名，不同的形参列表，叫方法重载（overloading）方法重载是实现 “多态” 的一种方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;形参列表不同是指参数个数不同，或者对应位置上参数类型不同。&lt;/li&gt;
&lt;li&gt;重载方法&lt;strong&gt;返回类型、修饰符可以相同，也可不同&lt;/strong&gt;，它不决定是否是重载方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;定位重载函数的顺序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定位重载函数的顺序&#34;&gt;#&lt;/a&gt; 定位重载函数的顺序&lt;/h4&gt;
&lt;p&gt;原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查找同名方法，没有则报错&lt;/li&gt;
&lt;li&gt;比较形参和实参的数目是否相等，如果多个方法符合条件，这些方法进入候选集&lt;/li&gt;
&lt;li&gt;候选集中
&lt;ul&gt;
&lt;li&gt;如果对应位置上的每个参数类型完全匹配，为最佳方法，&lt;/li&gt;
&lt;li&gt;如果无匹配的可以通过扩展转换找出最佳匹配方法，选择原则为：源类型与目标类型的距离越近越好。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;this关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#this关键字&#34;&gt;#&lt;/a&gt; this 关键字&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;this&lt;/code&gt;  表示当前对象&lt;/p&gt;
&lt;p&gt;当通过一个对象引用调用它的成员方法时，系统会将当前对象的别名 &lt;code&gt;this&lt;/code&gt;  传递到被调方法中，所以， &lt;code&gt;this&lt;/code&gt;  只能在成员方法中可见。&lt;/p&gt;
&lt;h4 id=&#34;使用this访问对象成员&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用this访问对象成员&#34;&gt;#&lt;/a&gt; 使用 this 访问对象成员&lt;/h4&gt;
&lt;p&gt;特别是局部变量和成员变量重名时，利用 &lt;code&gt;this&lt;/code&gt;  可以限定某个变量是成员变量。&lt;/p&gt;
&lt;h4 id=&#34;构造方法中用this调用本类的另一构造方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构造方法中用this调用本类的另一构造方法&#34;&gt;#&lt;/a&gt; 构造方法中，用 this 调用本类的另一构造方法&lt;/h4&gt;
&lt;p&gt;在一个构造方法中，调用另一个重载的构造方法：形式为： &lt;code&gt;this([实参])&lt;/code&gt;  这条语句必须是构造方法的第一条语句，且只能出现一次。&lt;/p&gt;
&lt;h4 id=&#34;返回当前对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#返回当前对象&#34;&gt;#&lt;/a&gt; 返回当前对象&lt;/h4&gt;
&lt;p&gt;在方法中，利用 &lt;code&gt;return this&lt;/code&gt;  可以返回当前对象，从而可以继续调用该类或其子类的成员。&lt;/p&gt;
&lt;h3 id=&#34;参数传递&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参数传递&#34;&gt;#&lt;/a&gt; 参数传递&lt;/h3&gt;
&lt;p&gt;调用方法时，先将实参赋给形参，然后再执行操作。JAVA 传参数总是采用&lt;strong&gt;按值传递&lt;/strong&gt;的方式，所谓值传递就是将实参值的副本传递给被调方法的形参。&lt;/p&gt;
&lt;h4 id=&#34;基本数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本数据类型&#34;&gt;#&lt;/a&gt; 基本数据类型&lt;/h4&gt;
&lt;p&gt;基本数据类型的传递是将实参的值传递给形参，形参的改变不会影响实参。&lt;/p&gt;
&lt;h4 id=&#34;引用数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引用数据类型&#34;&gt;#&lt;/a&gt; 引用数据类型&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果形参一直指向同一个对象，那么通过形参改变对象的内容，会影响实参。&lt;/li&gt;
&lt;li&gt;如果形参指向了另一个对象，那么通过形参改变对象的内容，不会影响实参。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;static修饰符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#static修饰符&#34;&gt;#&lt;/a&gt; static 修饰符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;与类相关的静态成员称为类变量或类方法，&lt;/li&gt;
&lt;li&gt;与实例相关的普通成员称为实例变量或实例方法。&lt;/li&gt;
&lt;li&gt;static 关键字可以修饰字段、方法、语句块和类（只能修饰内部类）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;static修饰字段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#static修饰字段&#34;&gt;#&lt;/a&gt; static 修饰字段&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt;  字段也称类 / 静态数据，被类的所有对象共享。&lt;/p&gt;
&lt;p&gt;当系统第一次准备使用该类时，系统会为该类的 &lt;code&gt;static&lt;/code&gt;  字段分配内存空间，存储在方法区中。此时类变量开始生效，直到类被卸载。该类所占有的内存才垃圾回收机制回收。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt;  变量被该类的所有对象所共享，只能是类一级的成员，不能声&lt;br /&gt;
明为方法的局部变量。而实例变量则是属于一个对象实例。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt;  变量可以被同一类的其他方法直接访问。&lt;br /&gt;
其他类可以通过此 &lt;code&gt;static&lt;/code&gt;  成员所属类的类名访问它，而无需先创建对象。&lt;/p&gt;
&lt;h4 id=&#34;static修饰方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#static修饰方法&#34;&gt;#&lt;/a&gt; static 修饰方法&lt;/h4&gt;
&lt;p&gt;静态方法是属于类的，而不是属于对象的。静态方法只能访问静态域和静态方法，不能访问实例域和实例方法。&lt;/p&gt;
&lt;p&gt;静态方法属于定义它的类，而且无需创建对象就&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可直接通过类名访问它。&lt;/li&gt;
&lt;li&gt;通过对象引用（无论是否为 &lt;code&gt;null&lt;/code&gt; ）调用，但实例方法必须通过非 null 的对象引用调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;静态方法不能使用 &lt;code&gt;this&lt;/code&gt;  和 &lt;code&gt;super&lt;/code&gt;  关键字，因为静态方法在对象创建之前就已经存在。&lt;/p&gt;
&lt;h4 id=&#34;static修饰代码块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#static修饰代码块&#34;&gt;#&lt;/a&gt; static 修饰代码块&lt;/h4&gt;
&lt;p&gt;静态语句块不属于任何一个方法，当类被加载时，虚拟机会执行静态块中的语句，且在类型的生命周期中只执行一次。&lt;br /&gt;
所以，可以利用静态块在类的加载阶段做一些初始化操作，如初始化静态数据。&lt;/p&gt;
&lt;h3 id=&#34;访问控制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#访问控制&#34;&gt;#&lt;/a&gt; 访问控制&lt;/h3&gt;
&lt;h3 id=&#34;继承-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#继承-2&#34;&gt;#&lt;/a&gt; 继承&lt;/h3&gt;
&lt;h3 id=&#34;final修饰符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#final修饰符&#34;&gt;#&lt;/a&gt; final 修饰符&lt;/h3&gt;
&lt;h2 id=&#34;类的进阶设计&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类的进阶设计&#34;&gt;#&lt;/a&gt; 类的进阶设计&lt;/h2&gt;
&lt;h3 id=&#34;对象类型转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对象类型转换&#34;&gt;#&lt;/a&gt; 对象类型转换&lt;/h3&gt;
&lt;h3 id=&#34;方法重写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法重写&#34;&gt;#&lt;/a&gt; 方法重写&lt;/h3&gt;
&lt;h3 id=&#34;动态绑定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态绑定&#34;&gt;#&lt;/a&gt; 动态绑定&lt;/h3&gt;
&lt;h3 id=&#34;抽象方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抽象方法&#34;&gt;#&lt;/a&gt; 抽象方法&lt;/h3&gt;
&lt;h3 id=&#34;抽象类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抽象类&#34;&gt;#&lt;/a&gt; 抽象类&lt;/h3&gt;
&lt;h3 id=&#34;接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#接口&#34;&gt;#&lt;/a&gt; 接口&lt;/h3&gt;
&lt;h3 id=&#34;内部类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内部类&#34;&gt;#&lt;/a&gt; 内部类&lt;/h3&gt;
&lt;h4 id=&#34;实例内部类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实例内部类&#34;&gt;#&lt;/a&gt; 实例内部类&lt;/h4&gt;
&lt;h4 id=&#34;静态内部类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#静态内部类&#34;&gt;#&lt;/a&gt; 静态内部类&lt;/h4&gt;
&lt;h4 id=&#34;局部内部类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#局部内部类&#34;&gt;#&lt;/a&gt; 局部内部类&lt;/h4&gt;
&lt;h4 id=&#34;匿名内部类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#匿名内部类&#34;&gt;#&lt;/a&gt; 匿名内部类&lt;/h4&gt;
&lt;h2 id=&#34;异常处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异常处理&#34;&gt;#&lt;/a&gt; 异常处理&lt;/h2&gt;
&lt;h3 id=&#34;异常类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异常类&#34;&gt;#&lt;/a&gt; 异常类&lt;/h3&gt;
&lt;h3 id=&#34;异常处理机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异常处理机制&#34;&gt;#&lt;/a&gt; 异常处理机制&lt;/h3&gt;
&lt;h3 id=&#34;捕获处理异常&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#捕获处理异常&#34;&gt;#&lt;/a&gt; 捕获处理异常&lt;/h3&gt;
&lt;h3 id=&#34;带资源的try语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#带资源的try语句&#34;&gt;#&lt;/a&gt; 带资源的 try 语句&lt;/h3&gt;
&lt;h3 id=&#34;throw抛出异常和throws声明异常&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#throw抛出异常和throws声明异常&#34;&gt;#&lt;/a&gt; throw 抛出异常和 throws 声明异常&lt;/h3&gt;
&lt;h2 id=&#34;常用类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用类&#34;&gt;#&lt;/a&gt; 常用类&lt;/h2&gt;
&lt;h3 id=&#34;object类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#object类&#34;&gt;#&lt;/a&gt; Object 类&lt;/h3&gt;
&lt;h3 id=&#34;string类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string类&#34;&gt;#&lt;/a&gt; String 类&lt;/h3&gt;
&lt;h3 id=&#34;泛型集合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#泛型集合&#34;&gt;#&lt;/a&gt; 泛型集合&lt;/h3&gt;
&lt;h3 id=&#34;arrays类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arrays类&#34;&gt;#&lt;/a&gt; Arrays 类&lt;/h3&gt;
&lt;h3 id=&#34;collections类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#collections类&#34;&gt;#&lt;/a&gt; Collections 类&lt;/h3&gt;
&lt;h2 id=&#34;io流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#io流&#34;&gt;#&lt;/a&gt; IO 流&lt;/h2&gt;
&lt;h3 id=&#34;file类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#file类&#34;&gt;#&lt;/a&gt; File 类&lt;/h3&gt;
&lt;h3 id=&#34;文件流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件流&#34;&gt;#&lt;/a&gt; 文件流&lt;/h3&gt;
&lt;h3 id=&#34;缓冲流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓冲流&#34;&gt;#&lt;/a&gt; 缓冲流&lt;/h3&gt;
&lt;h3 id=&#34;字节字符转换流&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字节字符转换流&#34;&gt;#&lt;/a&gt; 字节字符转换流&lt;/h3&gt;
&lt;h2 id=&#34;线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程&#34;&gt;#&lt;/a&gt; 线程&lt;/h2&gt;
&lt;h3 id=&#34;线程概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程概念&#34;&gt;#&lt;/a&gt; 线程概念&lt;/h3&gt;
&lt;h3 id=&#34;线程的创建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程的创建&#34;&gt;#&lt;/a&gt; 线程的创建&lt;/h3&gt;
&lt;h4 id=&#34;继承thread类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#继承thread类&#34;&gt;#&lt;/a&gt; 继承 Thread 类&lt;/h4&gt;
&lt;h4 id=&#34;实现runnable接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现runnable接口&#34;&gt;#&lt;/a&gt; 实现 Runnable 接口&lt;/h4&gt;
&lt;h4 id=&#34;实现callable接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现callable接口&#34;&gt;#&lt;/a&gt; 实现 Callable 接口&lt;/h4&gt;
&lt;h2 id=&#34;图形用户界面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#图形用户界面&#34;&gt;#&lt;/a&gt; 图形用户界面&lt;/h2&gt;
&lt;h3 id=&#34;jframe类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#jframe类&#34;&gt;#&lt;/a&gt; JFrame 类&lt;/h3&gt;
&lt;h3 id=&#34;布局管理器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#布局管理器&#34;&gt;#&lt;/a&gt; 布局管理器&lt;/h3&gt;
&lt;h3 id=&#34;事件处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事件处理&#34;&gt;#&lt;/a&gt; 事件处理&lt;/h3&gt;
&lt;h4 id=&#34;事件处理机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事件处理机制&#34;&gt;#&lt;/a&gt; 事件处理机制&lt;/h4&gt;
&lt;h4 id=&#34;事件和事件分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事件和事件分类&#34;&gt;#&lt;/a&gt; 事件和事件分类&lt;/h4&gt;
&lt;h4 id=&#34;事件监听器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#事件监听器&#34;&gt;#&lt;/a&gt; 事件监听器&lt;/h4&gt;
&lt;h4 id=&#34;回调与事件监听器的实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#回调与事件监听器的实现&#34;&gt;#&lt;/a&gt; 回调与事件监听器的实现&lt;/h4&gt;
&lt;h2 id=&#34;网络编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网络编程&#34;&gt;#&lt;/a&gt; 网络编程&lt;/h2&gt;
&lt;h3 id=&#34;tcpip通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tcpip通信&#34;&gt;#&lt;/a&gt; TCP/IP 通信&lt;/h3&gt;
</content>
        <category term="coding" />
        <category term="Java" />
        <updated>2024-11-03T02:59:18.000Z</updated>
    </entry>
</feed>
