{
    "version": "https://jsonfeed.org/version/1",
    "title": "Snow's Blog • All posts by \"java\" category",
    "description": "some notes about computer science",
    "home_page_url": "https://blog.ivansnow02.xyz",
    "items": [
        {
            "id": "https://blog.ivansnow02.xyz/java-learning/",
            "url": "https://blog.ivansnow02.xyz/java-learning/",
            "title": "Java学习",
            "date_published": "2024-11-03T02:59:18.000Z",
            "content_html": "<h2 id=\"java概述\"><a class=\"anchor\" href=\"#java概述\">#</a> Java 概述</h2>\n<h3 id=\"java语言的主要特点\"><a class=\"anchor\" href=\"#java语言的主要特点\">#</a> Java 语言的主要特点</h3>\n<ul>\n<li>简单性</li>\n<li>面向对象</li>\n<li>跨平台</li>\n<li>安全性</li>\n<li>多线程</li>\n<li>动态性</li>\n</ul>\n<h3 id=\"初始java程序\"><a class=\"anchor\" href=\"#初始java程序\">#</a> 初始 Java 程序</h3>\n<p>Java 源文件以 “java” 结尾，此文件中<strong>最多只能有一个类被声明为 public</strong>，保存时源文件名需与 public 类名相同，如果文件中不存在 public 类，源文件名无要求。</p>\n<p>一个源文件包含几个类就可以编译出几个.class 文件。</p>\n<h2 id=\"基本程序设计\"><a class=\"anchor\" href=\"#基本程序设计\">#</a> 基本程序设计</h2>\n<h3 id=\"常量\"><a class=\"anchor\" href=\"#常量\">#</a> 常量</h3>\n<p>符号常量： <code>final</code>  修饰的变量，一旦赋值后不可更改。</p>\n<h3 id=\"类型转换\"><a class=\"anchor\" href=\"#类型转换\">#</a> 类型转换</h3>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/java-learning/85bfcba51b1dccf3fe9bbad3b7a8e45a96c54baaf89d3ca283296a9c6fb98b96.png\" alt=\"picture 0\" /></p>\n<h3 id=\"位运算\"><a class=\"anchor\" href=\"#位运算\">#</a> 位运算</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>用法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>~</td>\n<td><code>~a</code></td>\n<td>按位取反</td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td><code>a &amp; b</code></td>\n<td>按位与</td>\n</tr>\n<tr>\n<td>|</td>\n<td><code>a \\| b</code></td>\n<td>按位或</td>\n</tr>\n<tr>\n<td>^</td>\n<td><code>a ^ b</code></td>\n<td>按位异或</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td><code>a &lt;&lt; b</code></td>\n<td>左移</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td><code>a &gt;&gt; b</code></td>\n<td>右移</td>\n</tr>\n<tr>\n<td>&gt;&gt;&gt;</td>\n<td><code>a &gt;&gt;&gt; b</code></td>\n<td>无符号右移</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"流程控制\"><a class=\"anchor\" href=\"#流程控制\">#</a> 流程控制</h2>\n<h3 id=\"标准输入与scanner类\"><a class=\"anchor\" href=\"#标准输入与scanner类\">#</a> 标准输入与 Scanner 类</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\\\\ <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td><code>hasNext()</code></td>\n<td>判断是否还有输入</td>\n</tr>\n<tr>\n<td>String</td>\n<td><code>next()</code></td>\n<td>读取一个字符串</td>\n</tr>\n<tr>\n<td>T</td>\n<td><code>nextT()</code></td>\n<td>读取一个 T 类型的值</td>\n</tr>\n<tr>\n<td>String</td>\n<td><code>nextLine()</code></td>\n<td>读取一行字符串</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><code>hasNextT()</code></td>\n<td>判断下一个输入是否为 T 类型</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><code>hasNextT(int radix)</code></td>\n<td>判断下一个输入是否为 T 类型，radix 为进制</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"标准输出\"><a class=\"anchor\" href=\"#标准输出\">#</a> 标准输出</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>printf</code>  方法</p>\n<table>\n<thead>\n<tr>\n<th>标志</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-</td>\n<td>左对齐</td>\n</tr>\n<tr>\n<td>+</td>\n<td>显示正负号</td>\n</tr>\n<tr>\n<td>0</td>\n<td>数字前补 0</td>\n</tr>\n<tr>\n<td>#</td>\n<td>显示八进制或十六进制前缀</td>\n</tr>\n<tr>\n<td>空格</td>\n<td>正数前加空格</td>\n</tr>\n<tr>\n<td>,</td>\n<td>数字以逗号分隔</td>\n</tr>\n<tr>\n<td>(</td>\n<td>负数用括号括起来</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>格式</td>\n<td>说明</td>\n</tr>\n<tr>\n<td>---</td>\n<td>---</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>整数</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>浮点数</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>科学计数法</td>\n</tr>\n<tr>\n<td>%g</td>\n<td>通用浮点数</td>\n</tr>\n<tr>\n<td>%h</td>\n<td>散列码</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>字符</td>\n</tr>\n<tr>\n<td>%b</td>\n<td>布尔值</td>\n</tr>\n<tr>\n<td>%t</td>\n<td>日期时间</td>\n</tr>\n<tr>\n<td>%n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>十六进制整数</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>八进制整数</td>\n</tr>\n<tr>\n<td>%a</td>\n<td>十六进制浮点数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"面向对象\"><a class=\"anchor\" href=\"#面向对象\">#</a> 面向对象</h2>\n<h3 id=\"面向对象编程的特性\"><a class=\"anchor\" href=\"#面向对象编程的特性\">#</a> 面向对象编程的特性</h3>\n<h4 id=\"封装\"><a class=\"anchor\" href=\"#封装\">#</a> 封装</h4>\n<p>将对象的属性和行封装起来构成新的类型，并隐藏内部实现细节，只向用户提供对象的外部可调用操作</p>\n<p>封装最大的好处是降低了软件系统的耦合程度。实现了代码的可重用性和可维护性。</p>\n<h4 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h4>\n<p>继承性是类与类之间的一种关系，通过继承，可以在无需重新编写原有类的情况下，实现代码的扩展和重用。</p>\n<ul>\n<li>具有父类的全部属性和行为</li>\n<li>能对继承的属性和行为进行修改和扩充。</li>\n<li>极大提升了可重用性和可维护性</li>\n</ul>\n<h4 id=\"多态\"><a class=\"anchor\" href=\"#多态\">#</a> 多态</h4>\n<p>多态性是指在父类中定义的属性和行为被子类继承之后，可以具有不同的数据类型或表现形式。</p>\n<ul>\n<li>单个类：多态性在单个类中表现为方法重载：一个类可以有多个名字相同、形参列表不同的方法，在使用时由传递给它们的实参来决定使用哪个方法。</li>\n<li>在多个类中主要表现为继承结构中的方法覆盖：父类和子类中具有相同的方法头，不同的代码实现，运行时再决定调用哪个方法。</li>\n</ul>\n<h3 id=\"对象与构造方法\"><a class=\"anchor\" href=\"#对象与构造方法\">#</a> 对象与构造方法</h3>\n<p>要比较两个对象的内容是否相等，即对象实体值，必须在类里实现专门的方法，所有类的父类 <code>Object</code>  中有一个方法 <code>equals()</code> 。</p>\n<p>因对象数组中每个元素都是对象，所以每个元素都需单独实例化（还需用 <code>new</code>  实例化每个元素）</p>\n<h3 id=\"方法重载\"><a class=\"anchor\" href=\"#方法重载\">#</a> 方法重载</h3>\n<p>定义方法时使用相同的方法名，不同的形参列表，叫方法重载（overloading）方法重载是实现 “多态” 的一种方法。</p>\n<ul>\n<li>形参列表不同是指参数个数不同，或者对应位置上参数类型不同。</li>\n<li>重载方法<strong>返回类型、修饰符可以相同，也可不同</strong>，它不决定是否是重载方法</li>\n</ul>\n<h4 id=\"定位重载函数的顺序\"><a class=\"anchor\" href=\"#定位重载函数的顺序\">#</a> 定位重载函数的顺序</h4>\n<p>原则：</p>\n<ul>\n<li>查找同名方法，没有则报错</li>\n<li>比较形参和实参的数目是否相等，如果多个方法符合条件，这些方法进入候选集</li>\n<li>候选集中\n<ul>\n<li>如果对应位置上的每个参数类型完全匹配，为最佳方法，</li>\n<li>如果无匹配的可以通过扩展转换找出最佳匹配方法，选择原则为：源类型与目标类型的距离越近越好。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"this关键字\"><a class=\"anchor\" href=\"#this关键字\">#</a> this 关键字</h3>\n<p><code>this</code>  表示当前对象</p>\n<p>当通过一个对象引用调用它的成员方法时，系统会将当前对象的别名 <code>this</code>  传递到被调方法中，所以， <code>this</code>  只能在成员方法中可见。</p>\n<h4 id=\"使用this访问对象成员\"><a class=\"anchor\" href=\"#使用this访问对象成员\">#</a> 使用 this 访问对象成员</h4>\n<p>特别是局部变量和成员变量重名时，利用 <code>this</code>  可以限定某个变量是成员变量。</p>\n<h4 id=\"构造方法中用this调用本类的另一构造方法\"><a class=\"anchor\" href=\"#构造方法中用this调用本类的另一构造方法\">#</a> 构造方法中，用 this 调用本类的另一构造方法</h4>\n<p>在一个构造方法中，调用另一个重载的构造方法：形式为： <code>this([实参])</code>  这条语句必须是构造方法的第一条语句，且只能出现一次。</p>\n<h4 id=\"返回当前对象\"><a class=\"anchor\" href=\"#返回当前对象\">#</a> 返回当前对象</h4>\n<p>在方法中，利用 <code>return this</code>  可以返回当前对象，从而可以继续调用该类或其子类的成员。</p>\n<h3 id=\"参数传递\"><a class=\"anchor\" href=\"#参数传递\">#</a> 参数传递</h3>\n<p>调用方法时，先将实参赋给形参，然后再执行操作。JAVA 传参数总是采用<strong>按值传递</strong>的方式，所谓值传递就是将实参值的副本传递给被调方法的形参。</p>\n<h4 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h4>\n<p>基本数据类型的传递是将实参的值传递给形参，形参的改变不会影响实参。</p>\n<h4 id=\"引用数据类型\"><a class=\"anchor\" href=\"#引用数据类型\">#</a> 引用数据类型</h4>\n<ul>\n<li>如果形参一直指向同一个对象，那么通过形参改变对象的内容，会影响实参。</li>\n<li>如果形参指向了另一个对象，那么通过形参改变对象的内容，不会影响实参。</li>\n</ul>\n<h3 id=\"static修饰符\"><a class=\"anchor\" href=\"#static修饰符\">#</a> static 修饰符</h3>\n<ul>\n<li>与类相关的静态成员称为类变量或类方法，</li>\n<li>与实例相关的普通成员称为实例变量或实例方法。</li>\n<li>static 关键字可以修饰字段、方法、语句块和类（只能修饰内部类）</li>\n</ul>\n<h4 id=\"static修饰字段\"><a class=\"anchor\" href=\"#static修饰字段\">#</a> static 修饰字段</h4>\n<p><code>static</code>  字段也称类 / 静态数据，被类的所有对象共享。</p>\n<p>当系统第一次准备使用该类时，系统会为该类的 <code>static</code>  字段分配内存空间，存储在方法区中。此时类变量开始生效，直到类被卸载。该类所占有的内存才垃圾回收机制回收。</p>\n<p><code>static</code>  变量被该类的所有对象所共享，只能是类一级的成员，不能声<br />\n明为方法的局部变量。而实例变量则是属于一个对象实例。</p>\n<p><code>static</code>  变量可以被同一类的其他方法直接访问。<br />\n其他类可以通过此 <code>static</code>  成员所属类的类名访问它，而无需先创建对象。</p>\n<h4 id=\"static修饰方法\"><a class=\"anchor\" href=\"#static修饰方法\">#</a> static 修饰方法</h4>\n<p>静态方法是属于类的，而不是属于对象的。静态方法只能访问静态域和静态方法，不能访问实例域和实例方法。</p>\n<p>静态方法属于定义它的类，而且无需创建对象就</p>\n<ul>\n<li>可直接通过类名访问它。</li>\n<li>通过对象引用（无论是否为 <code>null</code> ）调用，但实例方法必须通过非 null 的对象引用调用。</li>\n</ul>\n<p>静态方法不能使用 <code>this</code>  和 <code>super</code>  关键字，因为静态方法在对象创建之前就已经存在。</p>\n<h4 id=\"static修饰代码块\"><a class=\"anchor\" href=\"#static修饰代码块\">#</a> static 修饰代码块</h4>\n<p>静态语句块不属于任何一个方法，当类被加载时，虚拟机会执行静态块中的语句，且在类型的生命周期中只执行一次。<br />\n所以，可以利用静态块在类的加载阶段做一些初始化操作，如初始化静态数据。</p>\n<h3 id=\"访问控制\"><a class=\"anchor\" href=\"#访问控制\">#</a> 访问控制</h3>\n<h3 id=\"继承-2\"><a class=\"anchor\" href=\"#继承-2\">#</a> 继承</h3>\n<h3 id=\"final修饰符\"><a class=\"anchor\" href=\"#final修饰符\">#</a> final 修饰符</h3>\n<h2 id=\"类的进阶设计\"><a class=\"anchor\" href=\"#类的进阶设计\">#</a> 类的进阶设计</h2>\n<h3 id=\"对象类型转换\"><a class=\"anchor\" href=\"#对象类型转换\">#</a> 对象类型转换</h3>\n<h3 id=\"方法重写\"><a class=\"anchor\" href=\"#方法重写\">#</a> 方法重写</h3>\n<h3 id=\"动态绑定\"><a class=\"anchor\" href=\"#动态绑定\">#</a> 动态绑定</h3>\n<h3 id=\"抽象方法\"><a class=\"anchor\" href=\"#抽象方法\">#</a> 抽象方法</h3>\n<h3 id=\"抽象类\"><a class=\"anchor\" href=\"#抽象类\">#</a> 抽象类</h3>\n<h3 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h3>\n<h3 id=\"内部类\"><a class=\"anchor\" href=\"#内部类\">#</a> 内部类</h3>\n<h4 id=\"实例内部类\"><a class=\"anchor\" href=\"#实例内部类\">#</a> 实例内部类</h4>\n<h4 id=\"静态内部类\"><a class=\"anchor\" href=\"#静态内部类\">#</a> 静态内部类</h4>\n<h4 id=\"局部内部类\"><a class=\"anchor\" href=\"#局部内部类\">#</a> 局部内部类</h4>\n<h4 id=\"匿名内部类\"><a class=\"anchor\" href=\"#匿名内部类\">#</a> 匿名内部类</h4>\n<h2 id=\"异常处理\"><a class=\"anchor\" href=\"#异常处理\">#</a> 异常处理</h2>\n<h3 id=\"异常类\"><a class=\"anchor\" href=\"#异常类\">#</a> 异常类</h3>\n<h3 id=\"异常处理机制\"><a class=\"anchor\" href=\"#异常处理机制\">#</a> 异常处理机制</h3>\n<h3 id=\"捕获处理异常\"><a class=\"anchor\" href=\"#捕获处理异常\">#</a> 捕获处理异常</h3>\n<h3 id=\"带资源的try语句\"><a class=\"anchor\" href=\"#带资源的try语句\">#</a> 带资源的 try 语句</h3>\n<h3 id=\"throw抛出异常和throws声明异常\"><a class=\"anchor\" href=\"#throw抛出异常和throws声明异常\">#</a> throw 抛出异常和 throws 声明异常</h3>\n<h2 id=\"常用类\"><a class=\"anchor\" href=\"#常用类\">#</a> 常用类</h2>\n<h3 id=\"object类\"><a class=\"anchor\" href=\"#object类\">#</a> Object 类</h3>\n<h3 id=\"string类\"><a class=\"anchor\" href=\"#string类\">#</a> String 类</h3>\n<h3 id=\"泛型集合\"><a class=\"anchor\" href=\"#泛型集合\">#</a> 泛型集合</h3>\n<h3 id=\"arrays类\"><a class=\"anchor\" href=\"#arrays类\">#</a> Arrays 类</h3>\n<h3 id=\"collections类\"><a class=\"anchor\" href=\"#collections类\">#</a> Collections 类</h3>\n<h2 id=\"io流\"><a class=\"anchor\" href=\"#io流\">#</a> IO 流</h2>\n<h3 id=\"file类\"><a class=\"anchor\" href=\"#file类\">#</a> File 类</h3>\n<h3 id=\"文件流\"><a class=\"anchor\" href=\"#文件流\">#</a> 文件流</h3>\n<h3 id=\"缓冲流\"><a class=\"anchor\" href=\"#缓冲流\">#</a> 缓冲流</h3>\n<h3 id=\"字节字符转换流\"><a class=\"anchor\" href=\"#字节字符转换流\">#</a> 字节字符转换流</h3>\n<h2 id=\"线程\"><a class=\"anchor\" href=\"#线程\">#</a> 线程</h2>\n<h3 id=\"线程概念\"><a class=\"anchor\" href=\"#线程概念\">#</a> 线程概念</h3>\n<h3 id=\"线程的创建\"><a class=\"anchor\" href=\"#线程的创建\">#</a> 线程的创建</h3>\n<h4 id=\"继承thread类\"><a class=\"anchor\" href=\"#继承thread类\">#</a> 继承 Thread 类</h4>\n<h4 id=\"实现runnable接口\"><a class=\"anchor\" href=\"#实现runnable接口\">#</a> 实现 Runnable 接口</h4>\n<h4 id=\"实现callable接口\"><a class=\"anchor\" href=\"#实现callable接口\">#</a> 实现 Callable 接口</h4>\n<h2 id=\"图形用户界面\"><a class=\"anchor\" href=\"#图形用户界面\">#</a> 图形用户界面</h2>\n<h3 id=\"jframe类\"><a class=\"anchor\" href=\"#jframe类\">#</a> JFrame 类</h3>\n<h3 id=\"布局管理器\"><a class=\"anchor\" href=\"#布局管理器\">#</a> 布局管理器</h3>\n<h3 id=\"事件处理\"><a class=\"anchor\" href=\"#事件处理\">#</a> 事件处理</h3>\n<h4 id=\"事件处理机制\"><a class=\"anchor\" href=\"#事件处理机制\">#</a> 事件处理机制</h4>\n<h4 id=\"事件和事件分类\"><a class=\"anchor\" href=\"#事件和事件分类\">#</a> 事件和事件分类</h4>\n<h4 id=\"事件监听器\"><a class=\"anchor\" href=\"#事件监听器\">#</a> 事件监听器</h4>\n<h4 id=\"回调与事件监听器的实现\"><a class=\"anchor\" href=\"#回调与事件监听器的实现\">#</a> 回调与事件监听器的实现</h4>\n<h2 id=\"网络编程\"><a class=\"anchor\" href=\"#网络编程\">#</a> 网络编程</h2>\n<h3 id=\"tcpip通信\"><a class=\"anchor\" href=\"#tcpip通信\">#</a> TCP/IP 通信</h3>\n",
            "tags": [
                "coding",
                "Java"
            ]
        }
    ]
}