{
    "version": "https://jsonfeed.org/version/1",
    "title": "IOyuk1Nya's Blog • All posts by \"software engineering\" tag",
    "description": "some notes about computer science",
    "home_page_url": "https://blog.ivansnow02.xyz",
    "items": [
        {
            "id": "https://blog.ivansnow02.xyz/software-engineering/",
            "url": "https://blog.ivansnow02.xyz/software-engineering/",
            "title": "软件工程复习",
            "date_published": "2024-12-30T06:00:47.000Z",
            "content_html": "<h2 id=\"判定表\"><a class=\"anchor\" href=\"#判定表\">#</a> 判定表</h2>\n<table>\n<tbody>\n<tr>\n<td rowspan=\"4\">条件</td>\n<td>条件 1</td>\n<td rowspan=\"4\">条件取值的组合</td>\n</tr>\n<tr>\n<td>条件 2</td>\n</tr>\n<tr>\n<td>...</td>\n</tr>\n<tr>\n<td>条件 n</td>\n</tr>\n<tr>\n<td rowspan=\"4\">动作</td>\n<td>动作 1</td>\n<td rowspan=\"4\">动作</td>\n</tr>\n<tr>\n<td>动作 2</td>\n</tr>\n<tr>\n<td>...</td>\n</tr>\n<tr>\n<td>动作 n</td>\n</tr>\n</tbody>\n</table>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/9e320b3103f9cdf12fa33f99c4da01a1aebc8976179c2815a65bf6426d5783f8.png\" alt=\"picture 10\" /></p>\n<h2 id=\"判定树\"><a class=\"anchor\" href=\"#判定树\">#</a> 判定树</h2>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/6fffe564348fe5c6f28366aa66b24d86aa40e50a3387b91e3e4114f3cfa27743.png\" alt=\"picture 0\" /></p>\n<h2 id=\"sa画dfd\"><a class=\"anchor\" href=\"#sa画dfd\">#</a> SA 画 DFD</h2>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/8fbfc7fc45dd467a154a128ee55ca8c49e7daa3aac3fbf7960a6602a83496303.png\" alt=\"picture 1\" /></p>\n<h3 id=\"dfd步骤\"><a class=\"anchor\" href=\"#dfd步骤\">#</a> DFD 步骤</h3>\n<ol>\n<li>从顶层 DFD 开始，把整个系统视为加工处理。</li>\n<li>自上而下，逐步对系统分解：\n<ul>\n<li>每分解一次，增加系统的加工元素，进一步具体化每个加工的功能。</li>\n</ul>\n</li>\n<li>重复第 2 步，直到所有的加工元素都是足够简单，功能足够单一，视不必再分解为止。\n<ul>\n<li>不再分解的加工 ——“基本加工”</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"dfd原则\"><a class=\"anchor\" href=\"#dfd原则\">#</a> DFD 原则</h3>\n<ol>\n<li>父 / 子图平衡（I/O）\n<ul>\n<li>如果一张数据流图中的某个加工分解成另一张数据流图时，则上层图为父图，直接下层图为子图。把一个处理分解为一系列处理时，分解前和分解后的输入 / 输出数据流必须相同。</li>\n</ul>\n</li>\n<li>区分流程先后和层次。</li>\n<li>每个子图应该对应唯一的父加工。</li>\n<li>区分全局文件和外部项。</li>\n<li>画数据流而不是控制流。\n<ul>\n<li>数据流反映系统 “做什么”，不反映 “如何做”，因此箭头上的数据流名称只能是名词或名词短语。</li>\n</ul>\n</li>\n<li>一般不画物质流。\n<ul>\n<li>数据流反映能用计算机处理的数据，并不是实物。</li>\n</ul>\n</li>\n<li>每个加工至少有一个输入数据流和一个输出数据流，反映出此加工数据的来源与加工的结果。</li>\n<li>加工框编号。\n<ul>\n<li>子图及其所有的加工都应编号，便于引用和追踪。</li>\n</ul>\n</li>\n<li>掌握分解的速度。\n<ul>\n<li>一般一次引入 2~7 个加工处理。</li>\n</ul>\n</li>\n<li>外部实体之间不能有数据流。</li>\n</ol>\n<h2 id=\"uml\"><a class=\"anchor\" href=\"#uml\">#</a> UML</h2>\n<h3 id=\"uml用例图\"><a class=\"anchor\" href=\"#uml用例图\">#</a> UML 用例图</h3>\n<h4 id=\"用例图元素\"><a class=\"anchor\" href=\"#用例图元素\">#</a> 用例图元素</h4>\n<ul>\n<li>Actor：参与者<br />\n<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/bbe9f9796883e8cdd12135e74791a496db152b44ab7504569f7b2ac6c7000a0c.png\" alt=\"picture 4\" /></li>\n<li>Use Case：用例<br />\n<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/1c1351feb634b00db86c9d9864520582b5553fecc9da17eb51293be1c07a9463.png\" alt=\"picture 5\" /></li>\n<li>Communication Association：通信关联<br />\n<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/aabf5cc7be128bcfd7c47d4e4ad3abf31aa7d5e2f6b8fdeaecaa597c4f71db62.png\" alt=\"picture 6\" /></li>\n</ul>\n<div class=\"note info no-icon\">\n<ul>\n<li>Use Case 说明系统需要提供什么而不是怎么提供</li>\n<li>用户并不关心你如何给他们提供所需要的功能</li>\n<li>Use Case 一般是用 “动宾” 短语命名</li>\n</ul>\n</div>\n<h4 id=\"用例图角色\"><a class=\"anchor\" href=\"#用例图角色\">#</a> 用例图角色</h4>\n<p>与系统发生交互作用的、系统之外的任何东西都是角色：</p>\n<ul>\n<li>可以是人</li>\n<li>也可以是机器</li>\n<li>角色不等同于使用者</li>\n<li>角色存在于系统外部</li>\n<li>角色不是活动的准确描述</li>\n<li>使用者是行使某个角色职责的系统的使用人员</li>\n<li>每个 Actor 都通过不同的方式使用系统，除非他们是相同的 Actor</li>\n<li>Actor 使用系统的每一种方式就是一个 Use Case</li>\n</ul>\n<h4 id=\"用例图步骤\"><a class=\"anchor\" href=\"#用例图步骤\">#</a> 用例图步骤</h4>\n<ol>\n<li>找出拟建系统以外的 Actor\n<ul>\n<li>与系统交互的人员</li>\n<li>与系统相连并交换信息的设备和其他系统</li>\n</ul>\n</li>\n<li>使用 Use Case 来描述 Actor 怎样使用系统以及系统向 Actor 提供什么功能\n<ul>\n<li>Use Case 表示从外部用户角度观察的系统功能</li>\n</ul>\n</li>\n<li>绘制 Use Case 图，并编写详细的 Use Case 描述\n<ul>\n<li>Use Case 图只能宏观地描述系统的功能</li>\n<li>每个功能的含义和具体实现步骤则以文本方式描述</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"用例图关联\"><a class=\"anchor\" href=\"#用例图关联\">#</a> 用例图关联</h4>\n<h5 id=\"include\"><a class=\"anchor\" href=\"#include\">#</a> Include</h5>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/7d07cd65f7fdc444d9718363ee93216f262a80d36c6f5937260da8c9df59a9d6.png\" alt=\"picture 7\" /></p>\n<ul>\n<li>Use Case 中的包含关系。</li>\n<li>通常发生在多个 Use Case 中，有可以提取出来的公共部分。</li>\n</ul>\n<div class=\"note info no-icon\">\n<p>如果用例 A 确实要调用到用例 B，那么，可以进一步分析：</p>\n<p>用例 A 是调用了用例 B 的所有流程呢，还是其中部分流程？</p>\n<ol>\n<li>如果是调用部分流程，此时可以把用例 B 中的那部分流程提取出来，形成用例 C，然后用例 A 和用例 B 都 include 用例 C。</li>\n<li>如果是调用所有流程，那么，用例 A 直接 include 用例 B 即可。</li>\n</ol>\n</div>\n<h5 id=\"extend\"><a class=\"anchor\" href=\"#extend\">#</a> Extend</h5>\n<ul>\n<li>UseCaseA 不知道 UseCaseB 和 UseCaseC 的存在</li>\n<li>UseCaseB 和 UseCaseC 却是知道 UseCaseA 并且知道如何在 UseCaseA 中作扩展的</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/c0ba883ab92da8f358ae138aecd0e9905684f57932395f6dd15ff0418b84aacd.png\" alt=\"picture 8\" /></p>\n<h5 id=\"泛化关系\"><a class=\"anchor\" href=\"#泛化关系\">#</a> 泛化关系</h5>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/bdb3e3b1b28dd1d7e3700884f822f94f4a8a86a02fb984d149c3ecf064e7cc7c.png\" alt=\"picture 9\" /></p>\n<ul>\n<li>当多个用例共同拥有一种类似的结构和行为的时候，将它们的共性抽象成为父用例，其他的用例作为泛化关系中的子用例。</li>\n<li>子用例继承了父用例所有的结构、行为和关系。</li>\n<li>在实际应用中很少使用泛化关系。</li>\n</ul>\n<h4 id=\"用例图规则\"><a class=\"anchor\" href=\"#用例图规则\">#</a> 用例图规则</h4>\n<ul>\n<li>主动角色画在图的左边</li>\n<li>被动角色画在图的右边</li>\n<li>每个 Use Case 必须为用户提供确切的功能</li>\n<li>Use Case 名称必须写在椭圆里面</li>\n<li>每一张图里不能有太多的 Use Case</li>\n<li>为每一个 Use Case 编号便于检索</li>\n<li>为 Use Case 建立目录（编号和名称）便于管理</li>\n<li>保持图面整洁</li>\n</ul>\n<h3 id=\"发现对象\"><a class=\"anchor\" href=\"#发现对象\">#</a> 发现对象</h3>\n<h4 id=\"实体类\"><a class=\"anchor\" href=\"#实体类\">#</a> 实体类</h4>\n<p>代表拟建系统要记录和维护的信息，同时描述其相关行为。需要长期保存。</p>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/171dc57fa2a9972d3344c8fe88034cdfc74b74a4b748d6f9a253ccaf8bd203d7.png\" alt=\"picture 11\" /></p>\n<h4 id=\"边界类\"><a class=\"anchor\" href=\"#边界类\">#</a> 边界类</h4>\n<p>拟建系统和外部元素之间交互的边界，一个 Actor 和 Use Case 之间的通信关联对应一个边界类</p>\n<ul>\n<li>用户界面；</li>\n<li>与外部系统的接口；</li>\n<li>与其他设备的接口；</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/68da89ce0ada1494e3a11762a9a98d26528a1b1014463cc359f71bd91fec84b5.png\" alt=\"picture 12\" /></p>\n<h4 id=\"控制类\"><a class=\"anchor\" href=\"#控制类\">#</a> 控制类</h4>\n<p>将 Use Case 所有的执行逻辑进行封装，相当于协调人。</p>\n<ul>\n<li>自己不处理具体的任务。</li>\n<li>知道哪些类有能力完成具体的任务</li>\n</ul>\n<p>作用：<br />\n将拟建系统的其他部分（实体类和边界类）与 Use Case 的具体执行逻辑形成松散耦合。</p>\n<p>获取方法：一个 Use Case 对应一个控制类。</p>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/d8ab6a793e4d2254ab3bb1c31aeda949f890ead532d81dafcda0d5b3eec74bd6.png\" alt=\"picture 13\" /></p>\n<h3 id=\"类图\"><a class=\"anchor\" href=\"#类图\">#</a> 类图</h3>\n<ul>\n<li>\n<p>接口：一组操作的集合，只有操作的声明而没有实现<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/735367b1fb71a53ef869c6093f9da0fa80d1070b09382870e2cd5d3f2655c84d.png\" alt=\"picture 27\" /></p>\n</li>\n<li>\n<p>抽象类：不能被实例化的类，一般至少包含一个抽象操作<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/dc72db42aa9d0741bac57f1e6dc61cd32185a63bee71e0b8d7e3d31728038d97.png\" alt=\"picture 28\" /></p>\n</li>\n<li>\n<p>模版类：一种参数化的类，在编译时把模版参数绑定到不同的数据类型，从而产生不同的类<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/91d9cb3dffe6f8d47acd5c8f699b65e39c014cd72cbefad3dabe0439fd4bc0f1.png\" alt=\"picture 29\" /></p>\n</li>\n</ul>\n<h4 id=\"对象之间关系\"><a class=\"anchor\" href=\"#对象之间关系\">#</a> 对象之间关系</h4>\n<h5 id=\"关联\"><a class=\"anchor\" href=\"#关联\">#</a> 关联</h5>\n<p>一个类的对象（实例）作为另一个类的对象的变量成员时，两个类之间有关联关系<br />\n<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/0fde56f0d6076804bd3ea349bbce2008fec6cb7d668bd65255cd270a683f4d87.png\" alt=\"picture 30\" /></p>\n<h5 id=\"聚合\"><a class=\"anchor\" href=\"#聚合\">#</a> 聚合</h5>\n<p>表示两个类的对象间有 “整体” 与 “部分” 的关系。<br />\n<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/dfe5fddeb8834aa2e9e1bdb47b71a4ebce09686a03e7cede308f6a379ff6184c.png\" alt=\"picture 31\" /></p>\n<h5 id=\"组合关系\"><a class=\"anchor\" href=\"#组合关系\">#</a> 组合关系</h5>\n<p>“整体” 与 “部分” 间有 “皮之不存，毛将焉附” 的语义。​</p>\n<p>“部分” 不能被 “整体” 共享。​</p>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/2d206bd9f39b27448de3ac47ffa19b4c8626db9ac5754a78414af4d5a584f5c3.png\" alt=\"picture 32\" /></p>\n<h5 id=\"依赖关系\"><a class=\"anchor\" href=\"#依赖关系\">#</a> 依赖关系</h5>\n<p>表示 “使用” 的语义，是一种比较弱的关系。<br />\n对象作为参数、全局变量或者局部变量被另外一个对象使用<br />\n友元依赖：授权一个对象访问对象的私有或者保护成员</p>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/c13671b7566f0431c76d1c532fdde33ae8a480682bb3e6147de5ea649d8a6e49.png\" alt=\"picture 33\" /></p>\n<h5 id=\"泛化关系-2\"><a class=\"anchor\" href=\"#泛化关系-2\">#</a> 泛化关系</h5>\n<p>类 A（特殊）到类 B（一般）的泛化关系表示 “类 A 是类 B 的一种”。</p>\n<ul>\n<li>类 A—— 子类</li>\n<li>类 B—— 父类</li>\n</ul>\n<p>泛化关系有助于代码共享和复用。</p>\n<ul>\n<li>共同的属性放在上层，而将特有的属性放在下层；</li>\n<li>共同的服务放在上层，而将特有的服务放在下层</li>\n</ul>\n<div class=\"note info no-icon\">\n<p><strong>泛化关系 vs. 继承</strong></p>\n<ul>\n<li>泛化关系是一种关系的名称。</li>\n<li>继承是一种实现泛化关系的机制。</li>\n</ul>\n</div>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/230d7b698976ad822a5e1b63f1d6027b224555a9c8db21da17e76f374e390f9a.png\" alt=\"picture 34\" /></p>\n<h5 id=\"实现关系\"><a class=\"anchor\" href=\"#实现关系\">#</a> 实现关系</h5>\n<p>描述类实现接口</p>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/b9c07ecfe3aa35496111d3ee43fbe5b621c4d6535a55394186c60f1d2fab8637.png\" alt=\"picture 35\" /></p>\n<h3 id=\"构件图\"><a class=\"anchor\" href=\"#构件图\">#</a> 构件图</h3>\n<p>构件图描述代码部件的物理结构及各部件之间的依赖关系。</p>\n<ul>\n<li>是比 “类” 更大的实体，例如一个 COM 组件、ActiveX 文件、一个 JavaBeans、进程内组件（.DLL）、进程外组件（.EXE）、C++ 中的头文件（.h）、实现文件（.cpp）等等。</li>\n<li>它包含逻辑类或实现类的有关信息。</li>\n<li>构件图有助于分析和理解部件之间的相互影响程度。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>事务名称</th>\n<th>含义</th>\n<th>图例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>构件</td>\n<td>指系统中可替换的物理部分</td>\n<td><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/ae6642aef337c95abfe14f6c07e3fba7690629ca699282cdd9125bacb372efc5.png\" alt=\"picture 36\" /></td>\n</tr>\n<tr>\n<td>接口</td>\n<td>外部可访问到的服务</td>\n<td><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/7437ca1e414511e03b2f3c59aec70b9dfcb99f76657e91af300ad1b9ac589a56.png\" alt=\"picture 37\" /></td>\n</tr>\n<tr>\n<td>构件实例</td>\n<td>节点实例上的构件的一个实例，冒号后是该构件实例的名字</td>\n<td><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/f2d114162822d5c12b1e0e56b442b9d7a58e1eb673b10eb4081a97e776b117a1.png\" alt=\"picture 38\" /></td>\n</tr>\n</tbody>\n</table>\n<p>构件图中的关系及解释</p>\n<ul>\n<li>依赖关系：构件依赖外部提供的服务 (由构件到接口), 用虚线表示</li>\n<li>实现关系：构件实现接口 (由构件到接口), 用实线表示<br />\n<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/23edab3ee2312c412f07581ab1d35caacd4ff5e776fa461a39ef0f6ccf15e969.png\" alt=\"picture 39\" /></li>\n</ul>\n<h3 id=\"部署图\"><a class=\"anchor\" href=\"#部署图\">#</a> 部署图</h3>\n<ul>\n<li>节点是在运行时存在的物理元素，它表示一个计算机资源，通常至少有一些记忆能力和处理能力。</li>\n<li>一组构件可以驻留在一个节点内，也可以从一个节点迁移到另一个节点。</li>\n<li>在图形上，把节点画成一个立方体，通常在立方体中只写它的名称。</li>\n</ul>\n<h3 id=\"顺序图\"><a class=\"anchor\" href=\"#顺序图\">#</a> 顺序图</h3>\n<h4 id=\"顺序图的组成\"><a class=\"anchor\" href=\"#顺序图的组成\">#</a> 顺序图的组成</h4>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/a802a4d7adb62d8d77e67f15eb72354bd18656de4a9c5723035567f3ba79b179.png\" alt=\"picture 40\" /></p>\n<h4 id=\"顺序图的消息\"><a class=\"anchor\" href=\"#顺序图的消息\">#</a> 顺序图的消息</h4>\n<p>消息包含 3 个部分：</p>\n<ol>\n<li>序号</li>\n<li>名称</li>\n<li>参数</li>\n</ol>\n<p>消息的 4 种类型：</p>\n<ul>\n<li><strong>同步消息</strong>：消息的发送者把控制传递给消息的接收者，然后停止活动，等待消息的接收者放弃或者返回控制。</li>\n<li><strong>异步消息</strong>：消息发送者通过消息把信号传递给消息的接收者，然后继续自己的活动，不等待接收者返回消息或者控制。异步消息的接收者和发送者是并发工作的。</li>\n<li><strong>返回消息</strong>：返回消息表示从过程调用返回。</li>\n<li><strong>自关联消息</strong>：表示方法的自身调用以及一个对象内的一个方法调用另一个方法。</li>\n</ul>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/13ca3b0fe257b2ef402d98172319250cb5ec6fff09ff6175dbe96f3c5813e145.png\" alt=\"picture 41\" /></p>\n<h3 id=\"协作图\"><a class=\"anchor\" href=\"#协作图\">#</a> 协作图</h3>\n<p>与相关的顺序图有明确的对应关系。<br />\n<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/3cd7696c775b6597aeb83f24329221611dc9399dd4a397dfe18a00f74e0d5632.png\" alt=\"picture 42\" /></p>\n<h3 id=\"状态图\"><a class=\"anchor\" href=\"#状态图\">#</a> 状态图</h3>\n<ul>\n<li>状态图用来建模系统中的某个类对象、子系统或整个系统在其生命周期内出现的状态、状态的迁移和迁移条件。</li>\n<li>一个对象在某个时刻所处的状态是由该对象的属性值所决定的。</li>\n<li>对象由一种状态迁移到另一种状态，通常是由于受到了外部的刺激或自身性质的改变所引起的。导致对象状态变迁的原因即迁移条件。</li>\n</ul>\n<h4 id=\"状态图符号\"><a class=\"anchor\" href=\"#状态图符号\">#</a> 状态图符号</h4>\n<ul>\n<li>\n<p>用导角矩形表示对象所处的状态</p>\n</li>\n<li>\n<p>开始状态：必须有 <img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/a4c2952f7c481a161e9cf3af36de5e0a68a28c814da6a26d12c4c08874e65549.png\" alt=\"picture 43\" /></p>\n</li>\n<li>\n<p>终止状态：可选的，也可以没有<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/51305bceda4a74e8049ca817878a84f1b24d08dc46e037d2f1f5348f86875ce3.png\" alt=\"picture 44\" /></p>\n</li>\n<li>\n<p>带箭头的直线表示状态迁移的方向，其状态迁移的条件写在直线的上方或下方</p>\n</li>\n</ul>\n<h3 id=\"活动图\"><a class=\"anchor\" href=\"#活动图\">#</a> 活动图</h3>\n<p>活动图用于描述 Use Case 的事件流结构；属于一个特定的 Use Case。<br />\n活动之间带箭头的直线表示从一个活动到另一个活动的转移，可在直线上标注活动转移的条件</p>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/8bc78f32bf1809672825f04e04fd46e2b1d75197296be07482985b5ad2bd7c74.png\" alt=\"picture 45\" /></p>\n<ul>\n<li>用圆角矩形表示活动</li>\n<li>用黑色实心圆和 “牛眼” 分别表示活动的开始和终止</li>\n<li>活动之间带箭头的直线表示从一个活动到另一个活动的转移，可在直线上标注活动转移的条件</li>\n<li>泳道不仅表示出活动的变化，而且也描述了完成各个活动的类。<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/af97136ba5e5c7bab77edd82cdcdcf73dfcbf6bcfd2a4ed53a7e0fb617114682.png\" alt=\"picture 46\" /></li>\n</ul>\n<h2 id=\"结构图sc\"><a class=\"anchor\" href=\"#结构图sc\">#</a> 结构图 SC</h2>\n<ol>\n<li>\n<p><strong>传入模块</strong>：从下层模块取得数据，经过某些处理，再将其结果传递给上级模块。<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/c3be0785ed5a9512d25a18c4d4062c616730e6d53da503aa73319312427cced4.png\" alt=\"picture 14\" /></p>\n</li>\n<li>\n<p><strong>传出模块</strong>：从上级模块获得数据，进行某些处理，再将其结果传送给下级模块。<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/fd411f4ae911dfc4d23ffde21419a67e7941cdc356fec35f2e18523bb42e9111.png\" alt=\"picture 15\" /></p>\n</li>\n<li>\n<p><strong>变换模块</strong>：从上级模块获得数据，进行特定处理，转换成其它形式，再将其结果传送给上级模块。<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/4aa283df2a6ca71e341495857a08ca2dcc598b68028ef083dd94d9aec1650a25.png\" alt=\"picture 16\" /></p>\n</li>\n<li>\n<p><strong>源模块</strong>：不调用其它模块的传入模块。<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/5d8076cf0140281443a0a5765f44dcaeecc12582f8637cfa037e42ebbedadf4f.png\" alt=\"picture 17\" /></p>\n</li>\n<li>\n<p><strong>漏模块</strong>：不调用其它模块的传出模块。<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/48bdfeb9d77d83a7f25c98c9adcfd7e46a4d0682da097c4274607b42f3423bac.png\" alt=\"picture 18\" /></p>\n</li>\n<li>\n<p><strong>协调模块</strong>：对下属模块进行控制和管理的模块。<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/2e7398415bffda5f72a89ac4a79b0af3ec8d405e71ebfa1c75ef2858f974c7ac.png\" alt=\"picture 19\" /></p>\n</li>\n</ol>\n<div class=\"note info no-icon\">\n<p>附加符号：</p>\n<ul>\n<li>选择调用：<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/eb0968d0faa3929bca9827f4398599c0ca2339ec0021e143d99cc5ec73695e5e.png\" alt=\"picture 20\" /></li>\n<li>循环调用：<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/76b2c699b05ea4b2a460def483a6da34afd23b7c9481baafbce46f49c6e7aa4a.png\" alt=\"picture 21\" /></li>\n</ul>\n</div>\n<h2 id=\"结构化设计sd\"><a class=\"anchor\" href=\"#结构化设计sd\">#</a> 结构化设计 SD</h2>\n<h3 id=\"变换映射\"><a class=\"anchor\" href=\"#变换映射\">#</a> 变换映射</h3>\n<ol>\n<li>\n<p>识别输入边界、输出边界和变换中心三部分。</p>\n<ul>\n<li><strong>逻辑输入</strong>：离物理输入端（输入始端）最远，但仍可作为输入的数据流。</li>\n<li><strong>逻辑输出</strong>：离物理输出端（输出始端）最远，但仍可作为输出的数据流。</li>\n</ul>\n</li>\n<li>\n<p>进行第一级分解（映射顶层和第一层）</p>\n<p>设计主控模块和第一层软件结构：</p>\n<ol>\n<li><strong>输入模块 ca</strong>\n<ul>\n<li>功能：为主控模块提供数据。</li>\n</ul>\n</li>\n<li><strong>输出模块 ce</strong>\n<ul>\n<li>功能：为主控模块提供数据的输出。</li>\n</ul>\n</li>\n<li><strong>变换模块 ct</strong>\n<ul>\n<li>功能：将逻辑输入转换为逻辑输出。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>完成 “第二级和下层的映射”</p>\n<ul>\n<li>任务：将 DFD 中的每一个处理映射到程序结构中的模块。</li>\n<li>方法：从变换中心的边界开始，沿输入路径和输出路径向外，将处理依次映射到从属层的软件结构。</li>\n</ul>\n</li>\n<li>\n<p>优化软件设计</p>\n</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/55dc0c7a5ad9a0c9ee8c886eedd727b2bc922d33e6a1929f145a78862547160a.png\" alt=\"picture 22\" /></p>\n<h3 id=\"事务映射\"><a class=\"anchor\" href=\"#事务映射\">#</a> 事务映射</h3>\n<ol>\n<li>\n<p>识别事务输入、通路和事务中心三部分。</p>\n</li>\n<li>\n<p>进行第一级分解（映射顶层和第一层）</p>\n<p>设计事务控制模块和第一层软件结构：</p>\n<ol>\n<li>\n<p><strong>输入模块</strong></p>\n<ul>\n<li>功能：为主控模块提供数据。</li>\n</ul>\n</li>\n<li>\n<p><strong>调度模块</strong></p>\n<ul>\n<li>功能：根据输入的要求调度相应的执行通路。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>进行第二级分解：设计中下层模块</p>\n<ul>\n<li>方法：对通路再进行识别、划分、映射，反复此过程直到全部映射完毕。</li>\n</ul>\n</li>\n<li>\n<p>优化软件设计</p>\n</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/6d691974ddfd455ea32a2f98d271cc6713928fb90cb59cd09bfd8423aa8613ab.png\" alt=\"picture 23\" /></p>\n<h2 id=\"n-s图\"><a class=\"anchor\" href=\"#n-s图\">#</a> N-S 图</h2>\n<p>N-S 图也叫做盒图。五种基本控制结构由五种图形构件表示。</p>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/095b03b05b5d0c61ff7d9545b26c385ea8eb24e0a1cd5bbfb1b92896f91524aa.png\" alt=\"picture 24\" /></p>\n<h2 id=\"问题分析图pad\"><a class=\"anchor\" href=\"#问题分析图pad\">#</a> 问题分析图 (PAD)</h2>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/d61e5100ef9fdd1bef6645eb384b271857bce00ef093391ba2b71f9cb152c839.png\" alt=\"picture 25\" /></p>\n<p>扩充控制结构：<br />\n<img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/software-engineering/9f71471c036e3a8b6a354f2286e9c6323cb3e094bfc9bf608b55119f91bf3783.png\" alt=\"picture 26\" /></p>\n<h2 id=\"白盒测试\"><a class=\"anchor\" href=\"#白盒测试\">#</a> 白盒测试</h2>\n<h3 id=\"逻辑覆盖法\"><a class=\"anchor\" href=\"#逻辑覆盖法\">#</a> 逻辑覆盖法</h3>\n<h4 id=\"语句覆盖\"><a class=\"anchor\" href=\"#语句覆盖\">#</a> 语句覆盖</h4>\n<p>将程序中每个语句至少执行一次</p>\n<h4 id=\"判定覆盖\"><a class=\"anchor\" href=\"#判定覆盖\">#</a> 判定覆盖</h4>\n<p>每个判定的每个分支路径至少要执行一次。</p>\n<h4 id=\"条件覆盖\"><a class=\"anchor\" href=\"#条件覆盖\">#</a> 条件覆盖</h4>\n<p>每个条件的真假两种情况至少执行一次。</p>\n<div class=\"note info no-icon\">\n<p>条件覆盖不一定符合判定覆盖。</p>\n</div>\n<h4 id=\"判定条件覆盖\"><a class=\"anchor\" href=\"#判定条件覆盖\">#</a> 判定 / 条件覆盖</h4>\n<p>每个条件的真假两种情况至少执行一次。<br />\n每个判定的每个分支路径至少要执行一次。</p>\n<h4 id=\"条件组合覆盖\"><a class=\"anchor\" href=\"#条件组合覆盖\">#</a> 条件组合覆盖</h4>\n<p>每个判定的所有条件的各种可能组合至少执行一次。</p>\n<h3 id=\"路径覆盖法\"><a class=\"anchor\" href=\"#路径覆盖法\">#</a> 路径覆盖法</h3>\n<h4 id=\"点覆盖\"><a class=\"anchor\" href=\"#点覆盖\">#</a> 点覆盖</h4>\n<p>＝语句覆盖<br />\n每个结点至少执行一次。</p>\n<h4 id=\"边覆盖\"><a class=\"anchor\" href=\"#边覆盖\">#</a> 边覆盖</h4>\n<p>＝判定覆盖<br />\n每条边至少执行一次。</p>\n<h4 id=\"路径覆盖\"><a class=\"anchor\" href=\"#路径覆盖\">#</a> 路径覆盖</h4>\n<p>每个可能的路径至少执行一次。</p>\n<h2 id=\"黑盒测试\"><a class=\"anchor\" href=\"#黑盒测试\">#</a> 黑盒测试</h2>\n<h3 id=\"等价分类法\"><a class=\"anchor\" href=\"#等价分类法\">#</a> 等价分类法</h3>\n<p>将所有可能的输入数据划分成若干个等价类，然后从每一类中选取少数有代表性的数据作为测试用例。</p>\n<ul>\n<li>\n<p>步骤：</p>\n<ol>\n<li>划分等价类（有效等价类、无效等价类）</li>\n<li>设计测试用例</li>\n</ol>\n</li>\n<li>\n<p>设计测试用例原则：</p>\n<ul>\n<li>有效等价类尽量选取公用测试用例，以减少测试次数。</li>\n<li>无效的每类一例，以防漏掉错误。</li>\n</ul>\n</li>\n<li>\n<p>选取测试用例</p>\n<ol>\n<li>为每一个等价类规定一个唯一编号。</li>\n<li>设计一个新的测试用例，使其尽可能多地覆盖尚未被覆盖的有效等价类，重复这一步，直到所有的有效等价类都被覆盖为止。</li>\n<li>设计一个新的测试用例，使其仅覆盖一个尚未被覆盖的无效等价类，重复这一步，直到所有的无效等价类都被覆盖为止。</li>\n</ol>\n</li>\n<li>\n<p>等价类划分的方法：</p>\n<ol>\n<li>规定了输入条件取值范围、取值的个数，则可以确立一个有效等价类和两个无效等价类。</li>\n<li>输入条件规定了输入条件输入值的集合，可确立一个有效等价类和一个无效等价类。<br />\n- 有效等价类 —— 集合内<br />\n - 无效等价类 —— 集合外</li>\n<li>如果输入条件是一个布尔量，则可以确定一个有效等价类和一个无效等价类。</li>\n<li>如果规定了输入数据的一组值，而且程序要对每个输入值分别进行处理：<br />\n- 每一个输入值 —— 一个有效等价类<br />\n - 所有不允许的输入值的集合 —— 一个无效等价类</li>\n<li>如果规定了输入数据必须遵守的规则，则可以确立一个有效等价类（符合规则）和若干个无效等价类（从不同角度违反规则）。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"边界值分析法\"><a class=\"anchor\" href=\"#边界值分析法\">#</a> 边界值分析法</h3>\n<p>对等价分类法的补充：</p>\n<ul>\n<li>针对各种边界情况设计测试用例。</li>\n<li>大量的错误是发生在输入 / 输出范围的边界上，而不是在输入范围的内部。</li>\n</ul>\n<p>步骤：</p>\n<ol>\n<li>首先应确定边界情况。</li>\n<li>选取正好等于、刚刚大于、刚刚小于边界的值作为测试数据。</li>\n</ol>\n<h3 id=\"错误推测法\"><a class=\"anchor\" href=\"#错误推测法\">#</a> 错误推测法</h3>\n<p>人们也可以靠经验和直觉推测程序中可能存在的各种错误，从而有针对性地编写检查这些错误的测试用例 —— 错误推测法。</p>\n",
            "tags": [
                "computer science",
                "learning",
                "software engineering"
            ]
        }
    ]
}