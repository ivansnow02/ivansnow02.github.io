<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.ivansnow02.xyz</id>
    <title>IOyuk1Nya&#39;s Blog • Posts by &#34;cloud computing&#34; tag</title>
    <link href="https://blog.ivansnow02.xyz" />
    <updated>2025-04-17T00:16:40.000Z</updated>
    <category term="coding" />
    <category term="algorithms" />
    <category term="Compilers" />
    <category term="computer science" />
    <category term="learning" />
    <category term="Django" />
    <category term="Python" />
    <category term="computer graphics" />
    <category term="trash" />
    <category term="Redis" />
    <category term="Java" />
    <category term="test" />
    <category term="English" />
    <category term="vim" />
    <category term="cloud computing" />
    <category term="Spring" />
    <category term="Math" />
    <category term="Linear Algebra" />
    <category term="software engineering" />
    <category term="data structure" />
    <category term="Physics" />
    <category term="Discrete Mathematics" />
    <category term="coursera" />
    <category term="tree" />
    <entry>
        <id>https://blog.ivansnow02.xyz/cloud-computing/</id>
        <title>cloud_computing</title>
        <link rel="alternate" href="https://blog.ivansnow02.xyz/cloud-computing/"/>
        <content type="html">&lt;h2 id=&#34;大数据与云计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大数据与云计算&#34;&gt;#&lt;/a&gt; 大数据与云计算&lt;/h2&gt;
&lt;h3 id=&#34;大数据时代&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大数据时代&#34;&gt;#&lt;/a&gt; 大数据时代&lt;/h3&gt;
&lt;h4 id=&#34;大数据定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大数据定义&#34;&gt;#&lt;/a&gt; 大数据定义&lt;/h4&gt;
&lt;p&gt;指规模巨大，无法在合理时间内用主流 IT 系统进行采集、存储、管理、处理和分析，以支持决策的海量数据集。&lt;/p&gt;
&lt;h4 id=&#34;大数据特征-4v1c&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#大数据特征-4v1c&#34;&gt;#&lt;/a&gt; 大数据特征 (4V+1C)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Volume (量)&lt;/strong&gt;: 数据量巨大 (PB 级常见)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Velocity (速)&lt;/strong&gt;: 数据产生速度快，需要快速处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Variety (类)&lt;/strong&gt;: 格式多样 (结构化、半结构化、非结构化数据，如文本、音频、视频)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Value (值)&lt;/strong&gt;: 初始价值密度低，需要处理才能提取重要价值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Complexity (复杂性)&lt;/strong&gt;: 处理和分析难度大。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;云计算大数据的计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云计算大数据的计算&#34;&gt;#&lt;/a&gt; 云计算 —— 大数据的计算&lt;/h3&gt;
&lt;h4 id=&#34;云计算和大数据关系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云计算和大数据关系&#34;&gt;#&lt;/a&gt; 云计算和大数据关系&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;类比: G = f (x)，其中目标 (G) 通过云计算 (f) 对大数据 (x) 进行处理来实现。&lt;/li&gt;
&lt;li&gt;云计算是处理大数据的&lt;strong&gt;手段&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;两者相互依存：没有大数据，不需要云计算；没有云计算，无法有效处理大数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;云计算的起源与定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云计算的起源与定义&#34;&gt;#&lt;/a&gt; 云计算的起源与定义&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;初始概念&lt;/strong&gt;：像公用事业 (水、电) 一样提供海量资源池，按需付费；从拥有资源转向共享资源 (类似公共交通 vs 私家车)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;长定义&lt;/strong&gt;：一种商业计算模型，将任务分布在资源池上，提供按需的计算、存储和信息服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;短定义&lt;/strong&gt;：通过网络提供按需、动态可扩展、廉价的计算服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通用定义&lt;/strong&gt;：一种分布式计算的商业模式，利用大量廉价机器构建可靠的海量资源池，通过网络按需访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;云计算的核心概念资源池&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云计算的核心概念资源池&#34;&gt;#&lt;/a&gt; 云计算的核心概念：资源池&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;“云” = 大规模的 (通常是&lt;strong&gt;廉价&lt;/strong&gt;) 服务器集群。&lt;/li&gt;
&lt;li&gt;资源被池化、虚拟化，并通过软件进行管理以实现可靠性和自我维护。&lt;/li&gt;
&lt;li&gt;计算能力通过互联网作为商品提供。&lt;/li&gt;
&lt;li&gt;用户动态按需访问资源，专注于业务逻辑。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;云计算的关键特征-7个&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云计算的关键特征-7个&#34;&gt;#&lt;/a&gt; 云计算的关键特征 (7 个)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;超大规模&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;虚拟化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高可靠性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通用性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高可伸缩性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按需服务&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;极其廉价&lt;/strong&gt; (规模经济)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;云计算的商业特征&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云计算的商业特征&#34;&gt;#&lt;/a&gt; 云计算的商业特征&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;是一种商业模式 / 产业技术，不仅仅是学术研究。&lt;/li&gt;
&lt;li&gt;注重&lt;strong&gt;实用性&lt;/strong&gt;和&lt;strong&gt;经济性&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;整合了成熟技术：互联网、分布式计算、虚拟化、自治管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;云计算发展现状&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云计算发展现状&#34;&gt;#&lt;/a&gt; 云计算发展现状&lt;/h3&gt;
&lt;h4 id=&#34;服务模式分层&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务模式分层&#34;&gt;#&lt;/a&gt; 服务模式分层&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IaaS (基础设施即服务)&lt;/strong&gt;: 基础计算 / 存储 / 网络 (例如 Amazon EC2/S3, 阿里云 ECS)。面向系统开发者。(通用)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PaaS (平台即服务)&lt;/strong&gt;: 应用运行环境 (例如 Google App Engine, Azure, Hadoop)。面向应用开发者。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SaaS (软件即服务)&lt;/strong&gt;: 即用型应用程序 (例如 Salesforce CRM, Alexa Web)。面向最终用户。(专用)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;部署模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#部署模式&#34;&gt;#&lt;/a&gt; 部署模式&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;公有云&lt;/strong&gt;：对公众开放，由提供商管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;私有云&lt;/strong&gt;：为单个组织服务，自行管理或由第三方管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;混合云&lt;/strong&gt;：公有云和私有云的结合。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;云计算实现机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云计算实现机制&#34;&gt;#&lt;/a&gt; 云计算实现机制&lt;/h3&gt;
&lt;h4 id=&#34;分层架构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分层架构&#34;&gt;#&lt;/a&gt; 分层架构&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://blog.ivansnow02.xyz/blog-img/images/cloud-computing/2db4b87c98ac660c18ff0692c97fa3d9a38c07d91a211efd95943e9761f63d90.png&#34; alt=&#34;picture 0&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;物理资源层&lt;/strong&gt;：计算机、存储、网络、数据库、软件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源池层&lt;/strong&gt;：对物理资源进行分组 (计算池、存储池、网络池、数据池、软件池)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;管理中间件层&lt;/strong&gt;：管理资源、任务、用户、安全。(关键组件)。包括用户 / 任务 / 资源 / 安全管理子模块 (负载均衡、故障处理、监控、认证 / 授权、计费等)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SOA (面向服务的架构) 层&lt;/strong&gt;：将能力暴露为标准的 Web 服务 (接口、注册、发现、调用、工作流)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;云计算优势&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#云计算优势&#34;&gt;#&lt;/a&gt; 云计算优势&lt;/h3&gt;
&lt;h4 id=&#34;成本效益&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#成本效益&#34;&gt;#&lt;/a&gt; 成本效益&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;解决传统 IT 成本上升问题 (管理、电力 / 冷却)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;规模经济&lt;/strong&gt;：大型数据中心单位成本显著降低 (网络、存储、管理)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优化选址&lt;/strong&gt;：部署在电力廉价 (水电)、气候凉爽、土地成本低的地区&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动化&lt;/strong&gt;：降低人力成本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高利用率&lt;/strong&gt;：云计算利用率约 80%，而传统 IT 仅 10-15%，总成本节省超过 30 倍&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;用户收益&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户收益&#34;&gt;#&lt;/a&gt; 用户收益&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;低规格的客户端设备即可满足需求。&lt;/li&gt;
&lt;li&gt;按需付费模式使得用户能以可承受的价格获得强大的资源。&lt;/li&gt;
&lt;li&gt;无需购买 / 维护软件或担心硬件升级。&lt;/li&gt;
&lt;li&gt;节省资源，环境友好。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;核心架构思想&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#核心架构思想&#34;&gt;#&lt;/a&gt; 核心架构思想&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;“团结就是力量” - 许多廉价的商用机器协同工作，提供大规模、可靠、高性能的服务 (类比：鱼群 vs 鲨鱼)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;复习题-习题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复习题-习题&#34;&gt;#&lt;/a&gt; 复习题 (习题)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;大数据是如何形成的&lt;/strong&gt;&lt;br /&gt;
数据产生方式的改变；人类的活动越来越依赖数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;新摩尔定律 (Jim Gray 版本) 的含义&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全球信息量呈指数增长：每 18 个月产生的新数据量等同于此前累积的全部数据总和&lt;/li&gt;
&lt;li&gt;强调数据规模爆炸式扩大，说明对存储、计算和分析能力提出了更高要求&lt;/li&gt;
&lt;li&gt;反映信息技术和社会活动对数据生成与处理的双重推动作用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;云计算的特征&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虚拟化：对计算、存储、网络资源进行抽象与隔离，提高利用率与灵活性。&lt;/li&gt;
&lt;li&gt;按需服务：动态分配与释放资源，用户只为实际使用付费。&lt;/li&gt;
&lt;li&gt;商用硬件：使用廉价大规模服务器构建资源池，降低总体成本。&lt;/li&gt;
&lt;li&gt;通用性：支持多种应用场景与工作负载。&lt;/li&gt;
&lt;li&gt;可靠性：通过冗余、故障检测与自动恢复保障服务可用。&lt;/li&gt;
&lt;li&gt;可伸缩性：根据负载变化快速横向或纵向扩展资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;云计算的分类&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务模型
&lt;ul&gt;
&lt;li&gt;IaaS（基础设施即服务）&lt;/li&gt;
&lt;li&gt;PaaS（平台即服务）&lt;/li&gt;
&lt;li&gt;SaaS（软件即服务）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;部署模式
&lt;ul&gt;
&lt;li&gt;公有云：第三方提供商面向公共的云服务。&lt;/li&gt;
&lt;li&gt;私有云：组织内部或委托第三方私有部署。&lt;/li&gt;
&lt;li&gt;混合云：公有云与私有云结合，兼顾灵活性与安全性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;云计算的架构层次&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;物理层：物理服务器、存储、网络设备等硬件资源。&lt;/li&gt;
&lt;li&gt;资源池层：通过虚拟化将物理资源划分为计算池、存储池、网络池等。&lt;/li&gt;
&lt;li&gt;中间件层：负责资源管理、调度、监控、安全和计费等核心功能。&lt;/li&gt;
&lt;li&gt;服务 / SOA 层：以标准化 API 或 Web 服务形式向用户暴露能力。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;云计算相对于传统 IT 的成本优势&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;规模经济：大规模数据中心降低单位硬件和运维成本。&lt;/li&gt;
&lt;li&gt;按需付费：避免闲置资源浪费，费用与使用量挂钩。&lt;/li&gt;
&lt;li&gt;自动化运维：集中管理、自动部署和弹性伸缩减少人力成本。&lt;/li&gt;
&lt;li&gt;高资源利用率：多租户共享提高硬件利用率，进一步降低总体投入。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;分布式计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式计算&#34;&gt;#&lt;/a&gt; 分布式计算&lt;/h2&gt;
&lt;h3 id=&#34;分布式计算概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式计算概述&#34;&gt;#&lt;/a&gt; 分布式计算概述&lt;/h3&gt;
&lt;h4 id=&#34;基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本概念&#34;&gt;#&lt;/a&gt; 基本概念&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;集中式计算&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;所有数据和任务集中在一台计算机上处理。&lt;/li&gt;
&lt;li&gt;该计算机负责管理和处理所有数据 / 任务，并提供服务给用户。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分布式计算&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;利用多台计算机联合完成任务。&lt;/li&gt;
&lt;li&gt;通过网络通信，按规则分配工作量和数据，协作完成处理任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;集中式-vs-分布式对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集中式-vs-分布式对比&#34;&gt;#&lt;/a&gt; 集中式 vs 分布式对比&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;对比项&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;集中式计算&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;分布式计算&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;定义&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;计算资源集中一处处理管理&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;计算资源分散多处处理管理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;资源分配&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;计算机集中处理管理所有资源&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;资源分散在多台计算机上管理分配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;数据共享&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;数据集中存储，只能由该计算机访问共享&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;数据可分布在多台计算机上，可共享访问&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;处理能力&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;受单机硬件限制&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;通过任务分配给多台计算机提高处理能力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;可靠性 / 安全性&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;单点故障 / 攻击影响整个系统&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;单个计算机故障 / 攻击，其他计算机仍可继续计算任务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;成本&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;通常需大型机 / 高性能服务器，成本高&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可利用廉价计算机集群，成本相对较低&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;分布式计算优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式计算优点&#34;&gt;#&lt;/a&gt; 分布式计算优点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;高效性&lt;/strong&gt;：利用多机处理能力，提高效率和吞吐量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可扩展性&lt;/strong&gt;：通过增加节点扩展计算能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容错性&lt;/strong&gt;：通过备份和任务处理节点实现容错和高可靠性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;低成本&lt;/strong&gt;：利用廉价计算资源降低成本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据局部性&lt;/strong&gt;：利用计算节点附近数据，减少传输开销。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;集中式计算优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集中式计算优点&#34;&gt;#&lt;/a&gt; 集中式计算优点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;简单性&lt;/strong&gt;：统一管理，简化计算和管理复杂性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;稳定性&lt;/strong&gt;：单计算机保证计算和管理的稳定可靠性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;统一性&lt;/strong&gt;：统一管理控制数据和任务流程规则。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全性&lt;/strong&gt;：单计算机管理保护数据和任务安全机密性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性能优化&lt;/strong&gt;：单计算机优化资源使用，提高效率和性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分布式计算应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式计算应用场景&#34;&gt;#&lt;/a&gt; 分布式计算应用场景&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;大规模数据处理 (搜索引擎、数据挖掘、机器学习)&lt;/li&gt;
&lt;li&gt;高性能计算 (科学计算、模拟、仿真)&lt;/li&gt;
&lt;li&gt;分布式存储 (分布式文件系统、分布式数据库)&lt;/li&gt;
&lt;li&gt;实时数据处理 (流计算、实时推荐)&lt;/li&gt;
&lt;li&gt;区块链技术 (比特币、以太坊)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分布式计算原理-分而治之&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式计算原理-分而治之&#34;&gt;#&lt;/a&gt; 分布式计算原理 (分而治之)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;『分』&lt;/strong&gt;: 将复杂庞大任务划分为小任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;『计算』&lt;/strong&gt;: 子任务分配到不同节点并行执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;『合』&lt;/strong&gt;: 汇总各节点结果得到最终结果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;难点&lt;/strong&gt;：任务划分、多节点通信方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分布式计算步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式计算步骤&#34;&gt;#&lt;/a&gt; 分布式计算步骤&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;设计分布式计算模型&lt;/strong&gt;：决定组件如何运行、通信、管理节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分布式任务分配&lt;/strong&gt;：解决任务能否 / 如何分配到各节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编写并执行分布式程序&lt;/strong&gt;：使用特定框架 / 模型转化算法为实现，保证集群高效运行。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;分布式计算的理论基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式计算的理论基础&#34;&gt;#&lt;/a&gt; 分布式计算的理论基础&lt;/h3&gt;
&lt;h4 id=&#34;acid原则-本地事务管理-内部一致性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#acid原则-本地事务管理-内部一致性&#34;&gt;#&lt;/a&gt; ACID 原则 (本地事务管理、内部一致性)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原子性 (Atomicity)&lt;/strong&gt;: 操作要么全成功，要么全失败，无中间状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致性 (Consistency)&lt;/strong&gt;: 事务处理前后，不改变数据库原本的一致性约束。(&lt;strong&gt;核心目标&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隔离性 (Isolation)&lt;/strong&gt;: 并发事务间独立，互不干扰。 (手段：写锁、读锁、范围锁)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持久性 (Duration)&lt;/strong&gt;: 事务生效后，对数据库的改变永久保存。(手段: Commit Logging)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;困难&lt;/strong&gt;: &amp;quot;写入磁盘&amp;quot; 非原子操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;手段&lt;/strong&gt;：原子性、隔离性、持久性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目标&lt;/strong&gt;：一致性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;acid原则缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#acid原则缺点&#34;&gt;#&lt;/a&gt; ACID 原则缺点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;性能开销&lt;/strong&gt;：锁定、日志记录影响并发处理能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展性&lt;/strong&gt;：强制一致性，难扩展到大规模分布式系统多节点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;难以维护&lt;/strong&gt;：事务失败回滚复杂，需协调多组件交互。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cap理论-分布式事务-外部一致性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cap理论-分布式事务-外部一致性&#34;&gt;#&lt;/a&gt; CAP 理论 (分布式事务、外部一致性)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：分布式系统最多同时满足以下三项中的两项：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一致性 (Consistency)&lt;/strong&gt;: 所有节点访问同一份最新数据副本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可用性 (Availability)&lt;/strong&gt;: 每次请求都能获取非错响应 (不保证最新数据)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分区容错性 (Partition tolerance)&lt;/strong&gt;: 网络分区时，系统仍能继续运行。(分布式系统&lt;strong&gt;必须&lt;/strong&gt;满足)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;起源&lt;/strong&gt;: Eric Brewer 提出猜想 (2000)，Seth Gilbert &amp;amp; Nancy Lynch 证明 (2002)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cap理论阐述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cap理论阐述&#34;&gt;#&lt;/a&gt; CAP 理论阐述&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;正常流程&lt;/strong&gt;: N1, N2 数据一致 (V0)，均可用。网络正常，分区容错性满足。&lt;br /&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://blog.ivansnow02.xyz/blog-img/images/cloud-computing/ba463d4a4ff080a698df315fb702b123581ee2092460774bda2d0e38707f857b.png&#34; alt=&#34;picture 1&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络分区时&lt;/strong&gt;: N1 与 N2 网络断开。用户向 N2 请求读数据。&lt;br /&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://blog.ivansnow02.xyz/blog-img/images/cloud-computing/d1bfad52c77f0fdf4296748c1eace3c380925327d9d5fa39c7148afaa7056aef.png&#34; alt=&#34;picture 2&#34; /&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;选择一 (牺牲一致性 C, 保留可用性 A)&lt;/strong&gt;: N2 无法同步 N1 的新数据 V1，响应旧数据 V0 给用户。(AP)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选择二 (牺牲可用性 A, 保留一致性 C)&lt;/strong&gt;: N2 阻塞等待，直到网络恢复、数据同步 M 完成，再响应最新数据 V1。(CP)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;cap权衡&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cap权衡&#34;&gt;#&lt;/a&gt; CAP 权衡&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;(1) CA w/o P&lt;/strong&gt;: 放弃分区容错性。假设节点间通信永远可靠。不是真正的分布式系统。(例: Oracle RAC 使用共享磁盘避免网络分区)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(2) CP w/o A&lt;/strong&gt;: 放弃可用性。保证强一致性，分区发生时可能导致请求超时或错误。(例: HBase RegionServer 宕机期间数据不可用)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(3) AP w/o C&lt;/strong&gt;: 放弃 (强) 一致性。保证高可用，分区发生时节点用本地数据提供服务，可能导致数据不一致。(例: Redis 分区后各节点返回本地数据) (&lt;strong&gt;主流选择&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;base理论&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#base理论&#34;&gt;#&lt;/a&gt; BASE 理论&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：对 CAP 中一致性和可用性权衡的结果，核心思想是即使无法做到强一致性，但应用可采用适合方式达到&lt;strong&gt;最终一致性&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Basically Available (基本可用)&lt;/strong&gt;: 系统在分区、部分节点故障时，仍能保证核心功能可用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Soft State (软状态)&lt;/strong&gt;: 系统状态允许在不同节点间存在中间状态，不要求实时一致。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eventually Consistent (最终一致性)&lt;/strong&gt;: 系统中所有数据副本经过一段时间后，最终能够达到一致状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心思想&lt;/strong&gt;：牺牲强一致性换取高可用性和灵活性，适用于对一致性要求不高的场景。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;base与acid对比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#base与acid对比&#34;&gt;#&lt;/a&gt; BASE 与 ACID 对比&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ACID&lt;/strong&gt;: 传统数据库设计理念，追求&lt;strong&gt;强一致性&lt;/strong&gt;模型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BASE&lt;/strong&gt;: 大型分布式系统设计理念，通过牺牲强一致性获得&lt;strong&gt;高可用性&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;一致性散列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一致性散列&#34;&gt;#&lt;/a&gt; 一致性散列&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;问题背景&lt;/strong&gt;：分布式集群存储数据，如何将对象散列到不同机器？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简单散列&lt;/strong&gt;:  &lt;code&gt;server = hash(key) mod N&lt;/code&gt;  (N 为机器数)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;再散列问题 (Rehashing)&lt;/strong&gt;: 当服务器数量 N 变化 (增 / 减机器) 时， &lt;code&gt;hash % N&lt;/code&gt;  结果大多会改变，导致&lt;strong&gt;大部分 KV 对需要迁移&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;一致性散列算法-consistent-hashing&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一致性散列算法-consistent-hashing&#34;&gt;#&lt;/a&gt; 一致性散列算法 (Consistent Hashing)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：将整个哈希值空间 (&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;.&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mtext&gt; &lt;/mtext&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;128&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;e.g., 0 ~ 2^{128}-1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.0085em;vertical-align:-0.1944em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.1667em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mspace nobreak&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;128&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.6444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;) 组织成虚拟圆环。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;映射&lt;/strong&gt;：将服务器和对象 Key 都通过哈希函数映射到环上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;归属&lt;/strong&gt;：对象存储在沿环顺时针遇到的第一个服务器上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用&lt;/strong&gt;：高流量动态网站的分布式缓存 (Redis, MemCache) 实现请求动态均衡。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容错性&lt;/strong&gt;：节点宕机 (Node C)，只影响其负责的数据 (对象 C)，这些数据重定位到下一个节点 (Node D)。对象 A, B, D 不受影响。&lt;br /&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://blog.ivansnow02.xyz/blog-img/images/cloud-computing/428f0ecf55bd42a436e91cc034293b84cfd67d15efac7a4fd4abd858c7b661df.png&#34; alt=&#34;picture 3&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展性&lt;/strong&gt;：增加节点 (Node X)，只影响新节点与其前一个节点之间的数据 (对象 C 需重定位到 Node X)。对象 A, B, D 不受影响。&lt;br /&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://blog.ivansnow02.xyz/blog-img/images/cloud-computing/acc3b19003815406bc1bbbc8c30e4e6584b9cdb23a07e9c478cdb0addffa9d35.png&#34; alt=&#34;picture 4&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;虚拟节点&lt;/strong&gt;：为解决物理节点哈希分布不均问题，将每个物理服务器映射为多个虚拟节点分散在环上，使数据分布更均匀。权重高的服务器可分配更多虚拟节点。&lt;br /&gt;
&lt;img loading=&#34;lazy&#34; data-src=&#34;https://blog.ivansnow02.xyz/blog-img/images/cloud-computing/80742fb29ae26c125bdce4328491077f6a95838dc11adbd7d055a5219b88e114.png&#34; alt=&#34;picture 5&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分布式系统概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式系统概述&#34;&gt;#&lt;/a&gt; 分布式系统概述&lt;/h3&gt;
&lt;h4 id=&#34;基础知识-大数据驱动&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基础知识-大数据驱动&#34;&gt;#&lt;/a&gt; 基础知识 (大数据驱动)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;驱动力&lt;/strong&gt;：大数据技术需求推动分布式系统发展。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;演变&lt;/strong&gt;：源于互联网公司大规模分布式存储系统需求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展方式&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;纵向扩展 (Scale Up)&lt;/strong&gt;: 传统方式，使用更强服务器 (小型机 -&amp;gt; 中型机 -&amp;gt; 大型机)，成本高、稳定。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;横向扩展 (Scale Out)&lt;/strong&gt;: 使用大量廉价普通服务器通过网络连接，成本低、故障率高。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;挑战与解决&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;故障率高 -&amp;gt; 软件实现自动容错、保证数据一致性。&lt;/li&gt;
&lt;li&gt;增加服务器 -&amp;gt; 软件实现自动负载均衡，系统处理能力线性扩展。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实例apache-hadoop&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实例apache-hadoop&#34;&gt;#&lt;/a&gt; 实例：Apache Hadoop&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;: Apache 基金会开发的分布式存储与计算框架。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创始人&lt;/strong&gt;: Doug Cutting (就职 Yahoo 期间开发，现 Cloudera)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;思想来源&lt;/strong&gt;: Google 论文公开的 GFS, MapReduce, Bigtable 思想。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发展简史&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;2003-2004: Doug Cutting 基于 Google 论文实现 Nutch (DFS + MapReduce 微缩版)。&lt;/li&gt;
&lt;li&gt;2005 秋: Nutch 子项目引入 Apache 基金会。&lt;/li&gt;
&lt;li&gt;2006.3: MapReduce 和 NDFS (后改名 HDFS) 纳入 Hadoop 项目。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心组件&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HDFS (Hadoop Distributed File System)&lt;/strong&gt;: 提供高可靠、高扩展、高吞吐率的分布式数据存储服务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MapReduce&lt;/strong&gt;: 并行、分布式计算框架，易使用、高容错、高扩展。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;云计算服务模型&lt;/strong&gt;: Hadoop 通常属于 &lt;strong&gt;PaaS&lt;/strong&gt; (平台即服务) 层，运行在 IaaS (如 AWS EC2/S3, 阿里云 ECS) 之上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分布式系统的进阶&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式系统的进阶&#34;&gt;#&lt;/a&gt; 分布式系统的进阶&lt;/h3&gt;
&lt;h4 id=&#34;分布式存储系统-5个子方向&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式存储系统-5个子方向&#34;&gt;#&lt;/a&gt; 分布式存储系统 (5 个子方向)&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;结构化存储&lt;/strong&gt;：关系型数据库 (MySQL)。强一致性 (银行系统)，支持随机访问 (SQL, 索引)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非结构化存储&lt;/strong&gt;：分布式文件系统 (GFS, HDFS)。存储海量数据 (网页)，配合批量处理。高扩展、高吞吐。不支持随机访问，不适用低延时、实时应用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;半结构化存储&lt;/strong&gt;: NoSQL, KV Store (对象存储)。解决非结构化存储随机访问性能差问题。通常&lt;strong&gt;抛弃 ACID&lt;/strong&gt; 换取性能和扩展性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;In-memory 存储&lt;/strong&gt;: Memcached, Redis。数据存内存，读写高性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NewSQL&lt;/strong&gt;: Google Spanner。兼备 RDBMS (SQL, ACID) 和 NoSQL (扩展能力)。(目前工业界支持较少)&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;分布式计算系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式计算系统&#34;&gt;#&lt;/a&gt; 分布式计算系统&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分布式计算 vs 并行计算&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;并行计算&lt;/strong&gt;：目标是&lt;strong&gt;高性能&lt;/strong&gt; (投入更多机器，数据量不变，计算更快)。无内置 &amp;quot;容错&amp;quot; 概念。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分布式计算&lt;/strong&gt;：目标是&lt;strong&gt;高可扩展性&lt;/strong&gt; (投入更多机器，处理更大规模数据)。核心是&lt;strong&gt;容错&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分布式计算系统 (5 个子方向)&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;传统基于消息的系统&lt;/strong&gt;: MPI (Message Passing Interface)。框架灵活，约束少，&lt;strong&gt;不支持容错&lt;/strong&gt; (或有限)。(MPICH2, OpenMPI)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MapReduce 家族系统&lt;/strong&gt;: MapReduce, Spark。程序结构有严格约束 (Map, Reduce 等高层操作)，抽象为 DAG。可扩展至超大规模集群，&lt;strong&gt;具备容错机制&lt;/strong&gt;，但节点同步效率可能低。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图计算系统&lt;/strong&gt;: Pregel (BSP 模型), GraphLab (GAS 模型)。专门处理图结构数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于状态的系统&lt;/strong&gt;: Piccolo, DistBelief, Parameter Server。适用于需要维护和同步全局状态的应用 (如大规模机器学习)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实时流处理系统&lt;/strong&gt;: Apache Storm。高效实时处理流式数据，关注&lt;strong&gt;实时性&lt;/strong&gt;。在连续数据窗口内执行 SQL 类操作。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;1-传统基于消息的系统-mpi&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-传统基于消息的系统-mpi&#34;&gt;#&lt;/a&gt; 1. 传统基于消息的系统 (MPI)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基本思想&lt;/strong&gt;：程序分多个进程，进程间传递消息和数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进程位置&lt;/strong&gt;：可在同机不同线程、不同机器进程、甚至不同操作系统进程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通信模型&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;点对点通信&lt;/strong&gt;：两进程间直接通信 (发送、接收)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集合通信&lt;/strong&gt;：多进程间数据收集与分发 (广播、聚集、散布)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;示例&lt;/strong&gt;:  &lt;code&gt;scatter&lt;/code&gt;  (发散：将根进程数据分发给各进程),  &lt;code&gt;gather&lt;/code&gt;  (收集：将各进程数据收集到根进程)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2-mapreduce家族系统-mapreduce-spark&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-mapreduce家族系统-mapreduce-spark&#34;&gt;#&lt;/a&gt; 2. MapReduce 家族系统 (MapReduce, Spark)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MapReduce&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;批处理模型&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;数据&lt;strong&gt;存储在磁盘&lt;/strong&gt;上，适合大规模数据批处理。&lt;/li&gt;
&lt;li&gt;磁盘 I/O 较多。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Spark&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;支持&lt;strong&gt;流处理和批处理&lt;/strong&gt;两种模型。&lt;/li&gt;
&lt;li&gt;采用&lt;strong&gt;内存计算&lt;/strong&gt;思想，更灵活、更快。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;3-图计算系统-pregelbsp-graphlabgas&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-图计算系统-pregelbsp-graphlabgas&#34;&gt;#&lt;/a&gt; 3. 图计算系统 (Pregel/BSP &amp;amp; GraphLab/GAS)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pregel (BSP 模型 - Bulk Synchronous Parallel)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;计算任务分若干&lt;strong&gt;超级步 (Supersteps)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;每步包含三个阶段: &lt;strong&gt;计算、通信、同步&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;所有节点完成计算和通信后，等待同步，再进入下一步。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;同步通信模式&lt;/strong&gt;：本轮计算结果在下一轮生效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GraphLab (GAS 模型 - Gather, Apply, Scatter)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;计算任务分三个阶段:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Gather&lt;/strong&gt;: 从邻居节点收集信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Apply&lt;/strong&gt;: 根据收集的信息更新自身状态。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scatter&lt;/strong&gt;: 将更新后的状态信息发送给邻居节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步通信模式&lt;/strong&gt;：本轮计算结果在本轮立即生效。算法收敛快，但可能存在数据不一致问题。&lt;/li&gt;
&lt;li&gt;可在单机或分布式环境运行。Pregel 只能在分布式环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;5-实时流处理系统-storm&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-实时流处理系统-storm&#34;&gt;#&lt;/a&gt; 5. 实时流处理系统 (Storm)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;：处理&lt;strong&gt;实时、连续、无界&lt;/strong&gt;数据流的系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;特点&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;简单编程模型&lt;/strong&gt;：类似 MapReduce 降低并行批处理复杂性，Storm 降低实时处理复杂性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多种编程语言&lt;/strong&gt;：默认 Clojure, 支持 Java, Ruby, Python 等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容错性&lt;/strong&gt;：管理工作进程和节点故障。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;横向扩展&lt;/strong&gt;：计算在多线程、进程、服务器并行进行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可靠的消息处理&lt;/strong&gt;：保证消息至少被完整处理一次。失败时从源头重试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速&lt;/strong&gt;：使用 ZeroMQ 作为底层消息队列，保证消息快速处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Storm vs MapReduce/Spark (数据与计算流向)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MapReduce/Spark&lt;/strong&gt;: &lt;strong&gt;计算传递给数据&lt;/strong&gt;。节点存储 / 缓存数据集，任务提交给节点。批量处理持久化&lt;strong&gt;全量数据&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Storm&lt;/strong&gt;: &lt;strong&gt;数据传递给计算&lt;/strong&gt;。节点实现基本计算过程，数据项流经网络节点。动态处理大量生成&lt;strong&gt;小数据块&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;分布式资源管理系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分布式资源管理系统&#34;&gt;#&lt;/a&gt; 分布式资源管理系统&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;需求背景&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;多种计算框架 (MapReduce, Spark, Storm, MPI) 可能并存。&lt;/li&gt;
&lt;li&gt;希望部署到&lt;strong&gt;公共集群&lt;/strong&gt;，共享资源，统一管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;目标&lt;/strong&gt;：提高资源利用率、降低运维成本、方便数据共享。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;典型代表&lt;/strong&gt;: Mesos, YARN。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;统一管理调度平台特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#统一管理调度平台特点&#34;&gt;#&lt;/a&gt; 统一管理调度平台特点&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;支持多种计算框架&lt;/strong&gt;：平台本身不耦合特定框架。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展性&lt;/strong&gt;：平台自身不应成为框架水平扩展的瓶颈。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容错性&lt;/strong&gt;：在保持原有框架容错性基础上，平台自身也应具备良好容错性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高资源利用率&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态资源分配 (问题)&lt;/strong&gt;: 每个框架分配固定集群，利用率低 (e.g., 10-30%)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源统一管理 (解决)&lt;/strong&gt;: 统一管理调度各种框架，提升整体资源利用率 (e.g.,&amp;gt;70%)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;细粒度的资源分配&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;粗粒度共享 (Coarse-Grained)&lt;/strong&gt;: 整个节点分配给一个框架 / 任务。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;细粒度共享 (Fine-Grained)&lt;/strong&gt;: 直接按任务实际需求 (CPU, 内存) 分配资源。(Mesos 方式)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;apache-hadoop-yarn-yet-another-resource-negotiator&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apache-hadoop-yarn-yet-another-resource-negotiator&#34;&gt;#&lt;/a&gt; Apache Hadoop YARN (Yet Another Resource Negotiator)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;背景&lt;/strong&gt;：下一代 MapReduce (MRv2)，为解决 MRv1 扩展性差、不支持多计算框架问题。完全重写。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;架构&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ResourceManager (RM)&lt;/strong&gt;: 全局资源管理器 (Master)。负责资源分配与调度。功能简单，不易成瓶颈。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NodeManager (NM)&lt;/strong&gt;: 节点管理器 (Slave)。负责启动 / 监控 Container，上报资源使用情况给 RM。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ApplicationMaster (AM)&lt;/strong&gt;: 每个应用程序对应一个 AM。负责向 RM 申请资源，与 NM 交互启动 / 监控任务。&lt;strong&gt;(有具体应用的调度功能)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Container&lt;/strong&gt;: YARN 中资源分配的基本单位 (CPU, 内存等)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;apache-mesos&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#apache-mesos&#34;&gt;#&lt;/a&gt; Apache Mesos&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;架构&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mesos Master&lt;/strong&gt;: 保存 Framework 和 Slave 状态。使用 Zookeeper 解决单点故障。&lt;strong&gt;全局资源调度器&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mesos Slave (Agent)&lt;/strong&gt;: 运行任务，向 Master 汇报状态，运行 Executor。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Framework&lt;/strong&gt;: 计算框架，包含 Scheduler (向 Master 注册，接收资源 offer) 和 Executor (在 Slave 上运行具体任务，e.g., Hadoop TaskTracker)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源分配流程 (两层调度)&lt;/strong&gt;:
&lt;ol&gt;
&lt;li&gt;Agent 向 Master 汇报空闲资源。&lt;/li&gt;
&lt;li&gt;Master 根据策略将资源 Offer (e.g., &amp;lt;Agent1, 4 CPU, 4GB RAM&amp;gt;) 提供给某个 Framework (e.g., Framework 1)。&lt;/li&gt;
&lt;li&gt;Framework Scheduler 回复 Master 是否接受 Offer，并告知要在该资源上运行的任务列表及资源需求。&lt;/li&gt;
&lt;li&gt;Master 将任务信息发送给 Agent。&lt;/li&gt;
&lt;li&gt;Agent 分配资源给 Framework 的 Executor，Executor 启动任务。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;mesos与yarn比较&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mesos与yarn比较&#34;&gt;#&lt;/a&gt; Mesos 与 YARN 比较&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;框架担任的角色&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mesos&lt;/strong&gt;: 计算框架需&lt;strong&gt;完全融入&lt;/strong&gt; Mesos (部署 Scheduler 和 Executor)。添加新框架需部署。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;YARN&lt;/strong&gt;: 框架仅是&lt;strong&gt;应用程序库&lt;/strong&gt;。无需事先部署框架。YARN 运行和使用更方便。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调度机制 (均为双层调度)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mesos&lt;/strong&gt;: &lt;strong&gt;资源推送&lt;/strong&gt;。Master 将资源 Offer 推给 Framework，由 Framework 决定是否接受及如何使用。&lt;strong&gt;Mesos 本身不知应用资源需求&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;YARN&lt;/strong&gt;: &lt;strong&gt;资源请求&lt;/strong&gt;。ApplicationMaster 向 YARN (RM) 汇报任务资源需求。&lt;strong&gt;YARN 根据需求为应用分配资源&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;课后习题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课后习题&#34;&gt;#&lt;/a&gt; 课后习题&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;分布式计算的定义和特征是什么？&lt;/li&gt;
&lt;li&gt;什么是 ACID 原则？&lt;/li&gt;
&lt;li&gt;什么是 CAP 理论？&lt;/li&gt;
&lt;li&gt;什么是 BASE 理论？&lt;/li&gt;
&lt;li&gt;如何理解最终一致性？&lt;/li&gt;
&lt;li&gt;各类分布式存储、分布式计算的区别与联系是什么？&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;课外思考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#课外思考&#34;&gt;#&lt;/a&gt; 课外思考&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;为什么日常生活中接触到的分布式系统越来越多了？&lt;/li&gt;
&lt;li&gt;CAP 定理中几个关键因素为什么不能同时保证？不同组合有什么应用场景？&lt;/li&gt;
&lt;li&gt;了解区块链背景后，说说你理解的区块链作为一种分布式系统背后的全新理念。&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="computer science" />
        <category term="learning" />
        <category term="cloud computing" />
        <updated>2025-04-17T00:16:40.000Z</updated>
    </entry>
</feed>
