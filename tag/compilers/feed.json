{
    "version": "https://jsonfeed.org/version/1",
    "title": "Snow's Blog • All posts by \"compilers\" tag",
    "description": "some notes about computer science",
    "home_page_url": "https://blog.ivansnow02.xyz",
    "items": [
        {
            "id": "https://blog.ivansnow02.xyz/Compilers/",
            "url": "https://blog.ivansnow02.xyz/Compilers/",
            "title": "编译技术笔记",
            "date_published": "2024-10-08T23:48:47.000Z",
            "content_html": "<h2 id=\"引论\"><a class=\"anchor\" href=\"#引论\">#</a> 引论</h2>\n<h3 id=\"什么是编译程序\"><a class=\"anchor\" href=\"#什么是编译程序\">#</a> 什么是编译程序</h3>\n<h4 id=\"编译程序\"><a class=\"anchor\" href=\"#编译程序\">#</a> 编译程序</h4>\n<p>编译程序是翻译程序的一种，它将高级语言程序翻译成等价的目标程序。编译程序的输入是高级语言程序，输出是目标程序。编译程序的主要任务是将源程序翻译成目标程序，使得目标程序能够在计算机上正确运行。</p>\n<h4 id=\"解释程序\"><a class=\"anchor\" href=\"#解释程序\">#</a> 解释程序</h4>\n<p>以源程序为输入，直接执行源程序，不生成目标程序。解释程序的主要任务是解释源程序，使得源程序能够在计算机上正确运行。</p>\n<h4 id=\"编译程序与解释程序的区别\"><a class=\"anchor\" href=\"#编译程序与解释程序的区别\">#</a> 编译程序与解释程序的区别</h4>\n<p>根本区别：是否生成目标程序。</p>\n<h4 id=\"编译系统的组成\"><a class=\"anchor\" href=\"#编译系统的组成\">#</a> 编译系统的组成</h4>\n<ul>\n<li>编译程序</li>\n<li>运行系统\n<ul>\n<li>支持环境</li>\n<li>运行库</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"编译过程与编译程序的组织结构\"><a class=\"anchor\" href=\"#编译过程与编译程序的组织结构\">#</a> 编译过程与编译程序的组织结构</h3>\n<h4 id=\"编译过程\"><a class=\"anchor\" href=\"#编译过程\">#</a> 编译过程</h4>\n<table>\n<thead>\n<tr>\n<th>自然语言的翻译</th>\n<th>编译</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>识别出句子中的单词</td>\n<td>词法分析</td>\n</tr>\n<tr>\n<td>确定单词之间的语法关系</td>\n<td>语法分析</td>\n</tr>\n<tr>\n<td>根据句子含义初步翻译</td>\n<td>语义分析</td>\n</tr>\n<tr>\n<td>对译文进行修饰</td>\n<td>中间代码生成</td>\n</tr>\n<tr>\n<td>将译文翻译成目标语言</td>\n<td>目标代码生成</td>\n</tr>\n</tbody>\n</table>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/Compilers/5a555ecad6d683cdc29056f04947d36c3af7940222ef45510286ed591a1bc3f4.png\" alt=\"图 0\" /></p>\n<h4 id=\"词法分析\"><a class=\"anchor\" href=\"#词法分析\">#</a> 词法分析</h4>\n<p>输入源程序；扫描、分解字符串，识别出单词；输出单词流。</p>\n<p>词法分析由词法分析器完成，词法分析器又叫扫描器。</p>\n<p>词法分析器从左到右扫描源程序，并将其转换成单词（Token）串；并检查词法错误，进行标识符的登记 —— 符号表管理。</p>\n<p>输入：字符串<br />\n输出：（种别码，属性值）</p>\n<h4 id=\"语法分析\"><a class=\"anchor\" href=\"#语法分析\">#</a> 语法分析</h4>\n<p>语法分析由语法分析器完成，语法分析器又叫解析器。</p>\n<p>功能：</p>\n<ul>\n<li>实现组词成句</li>\n<li>构造分析树</li>\n<li>检查语法错误</li>\n<li>指导翻译</li>\n</ul>\n<p>输入：Token 序列<br />\n输出：语法成分</p>\n<div class=\"note warning\">\n<p>语法分析树和抽象语法树的区别：</p>\n<ul>\n<li>语法分析树：包含了源程序中的所有细节、语法成分。</li>\n<li>抽象语法树：去掉了源程序中的细节，只保留了语法结构的关键信息。（中间代码的一种形式）</li>\n</ul>\n</div>\n<h4 id=\"语义分析\"><a class=\"anchor\" href=\"#语义分析\">#</a> 语义分析</h4>\n<p>语义分析一般和语法分析一起进行，称为语法制导翻译。</p>\n<p>功能：</p>\n<ul>\n<li>获取标识符的属性</li>\n<li>语义检查</li>\n<li>子程序静态绑定</li>\n<li>变量的静态绑定</li>\n</ul>\n<h4 id=\"中间代码生成\"><a class=\"anchor\" href=\"#中间代码生成\">#</a> 中间代码生成</h4>\n<p>生成四元式、三地址码、P - 代码等。</p>\n<h4 id=\"目标代码生成\"><a class=\"anchor\" href=\"#目标代码生成\">#</a> 目标代码生成</h4>\n<p>任务：将中间代码变换成特定机器上的低级语言代码</p>\n<p>目标代码形式：绝对指令、可重定位指令、汇编指令</p>\n<h4 id=\"表格与表格管理\"><a class=\"anchor\" href=\"#表格与表格管理\">#</a> 表格与表格管理</h4>\n<ul>\n<li>符号名表</li>\n<li>常数表</li>\n<li>标号表</li>\n<li>入口名表</li>\n<li>过程引用表</li>\n<li>循环表</li>\n<li>等价名表</li>\n<li>公用链表</li>\n<li>格式表</li>\n<li>中间代码表</li>\n</ul>\n<h4 id=\"出错处理\"><a class=\"anchor\" href=\"#出错处理\">#</a> 出错处理</h4>\n<ul>\n<li>语法错误：不符合语法（或词法）规则</li>\n<li>语义错误：不符合语义规则</li>\n</ul>\n<h4 id=\"遍\"><a class=\"anchor\" href=\"#遍\">#</a> 遍</h4>\n<p>遍：编译程序对源程序的从头到尾扫描一次，并作有关的加工处理，生成新的中间结果或目标程序。</p>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/Compilers/4de5386ffaefa26f42a36bed0e57f5a4c6986a391884116cb9b08d71a68c11a9.png\" alt=\"图 1\" /></p>\n<h4 id=\"前端与后端\"><a class=\"anchor\" href=\"#前端与后端\">#</a> 前端与后端</h4>\n<ul>\n<li>前端：词法分析、语法分析、语义分析、中间代码生成，<strong>与源语言有关</strong></li>\n<li>后端：目标代码生成、优化，<strong>与目标机器有关</strong></li>\n</ul>\n<h4 id=\"自举技术\"><a class=\"anchor\" href=\"#自举技术\">#</a> 自举技术</h4>\n<p>编译程序的编译程序完全是由这个语言本身编写的，而且能够编译这门语言的任何代码。</p>\n<h4 id=\"自展技术\"><a class=\"anchor\" href=\"#自展技术\">#</a> 自展技术</h4>\n<p>先对语言的核心部分构造一个小小的编译程序，然后用这个编译程序编译语言的其他部分。</p>\n<h4 id=\"移植技术\"><a class=\"anchor\" href=\"#移植技术\">#</a> 移植技术</h4>\n<p>编译程序的移植性是指编译程序能够在不同的计算机上运行。</p>\n<h2 id=\"形式语言与自动机\"><a class=\"anchor\" href=\"#形式语言与自动机\">#</a> 形式语言与自动机</h2>\n<h3 id=\"形式语言\"><a class=\"anchor\" href=\"#形式语言\">#</a> 形式语言</h3>\n<h4 id=\"语言\"><a class=\"anchor\" href=\"#语言\">#</a> 语言</h4>\n<ul>\n<li>语言（Language）：满足一定条件的句子的集合</li>\n<li>句子（Sentence）：满足一定规则的单词的序列</li>\n<li>单词（Token）：满足一定规则的字符串</li>\n</ul>\n<p>语言就是字和组合字的规则所产生的字的序列。</p>\n<h4 id=\"文法-语言-自动机\"><a class=\"anchor\" href=\"#文法-语言-自动机\">#</a> 文法、语言、自动机</h4>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/Compilers/53fdc7aa42f0327c73b7d98e66fbc638a2cff7c3724a6e5144cece7f4b354b30.png\" alt=\"图 2\" /></p>\n<h4 id=\"程序语言\"><a class=\"anchor\" href=\"#程序语言\">#</a> 程序语言</h4>\n<p>程序语言是一个记号系统</p>\n<h5 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h5>\n<ul>\n<li>任何程序语言都可以看成一定<strong>字符集</strong>上的字符串</li>\n<li>语法保障了这串字符的合法性</li>\n<li>语法 = 词法规则 + 语法规则</li>\n</ul>\n<h5 id=\"词法\"><a class=\"anchor\" href=\"#词法\">#</a> 词法</h5>\n<ul>\n<li>单词符号：语言中具有意义的最基本结构</li>\n<li>词法规则\n<ul>\n<li>规定了字母表中的字符如何组成单词符号</li>\n<li>程序语言的单词符号包括：常数、标识符、关键字、运算符、分节符等</li>\n<li>使用正规式和有限自动机理论描述词法结构和词法分析</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"语法规则\"><a class=\"anchor\" href=\"#语法规则\">#</a> 语法规则</h5>\n<ul>\n<li>语法单位：表达式、子句、语句、函数、过程、程序</li>\n<li>语法规则\n<ul>\n<li>规定了如何从单词符号构成语法单位</li>\n<li>使用上下文无关文法描述语法结构和语法分析</li>\n<li>语言的词法规则和语法规则共同定义了程序的形式结构，是判断输入字符串是否都成一个形式上正确的程序的依据</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"语义\"><a class=\"anchor\" href=\"#语义\">#</a> 语义</h5>\n<ul>\n<li>程序中单词符号和语法单位的含义</li>\n<li>不同语言形式上语法单位相似，但含义可能不同</li>\n<li>对于某种语言，可以定义一个程序的意义的一组规则，称为语义规则</li>\n<li>目前大多数编译程序使用基于属性文法的语法制导翻译来分析语义</li>\n</ul>\n<h5 id=\"字母表\"><a class=\"anchor\" href=\"#字母表\">#</a> 字母表</h5>\n<p>字母表是符号的非空有限集合，通常用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi></mrow><annotation encoding=\"application/x-tex\">\\Sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\">Σ</span></span></span></span> 表示。</p>\n<h5 id=\"字母表的运算\"><a class=\"anchor\" href=\"#字母表的运算\">#</a> 字母表的运算</h5>\n<p>字母表<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Σ</mi><mo separator=\"true\">,</mo><msub><mi mathvariant=\"normal\">Σ</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi mathvariant=\"normal\">Σ</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\Sigma, \\Sigma_1, \\Sigma_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\">Σ</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 的运算：</p>\n<ul>\n<li>连接 / 乘积：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Σ</mi><mn>1</mn></msub><msub><mi mathvariant=\"normal\">Σ</mi><mn>2</mn></msub><mo>=</mo><mo stretchy=\"false\">{</mo><mi>x</mi><mi>y</mi><mi mathvariant=\"normal\">∣</mi><mi>x</mi><mo>∈</mo><msub><mi mathvariant=\"normal\">Σ</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi>y</mi><mo>∈</mo><msub><mi mathvariant=\"normal\">Σ</mi><mn>2</mn></msub><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma_1\\Sigma_2 = \\{xy | x \\in \\Sigma_1, y \\in \\Sigma_2\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span></li>\n<li>幂：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Σ</mi><mi>n</mi></msup><mo>=</mo><mo stretchy=\"false\">{</mo><msub><mi>x</mi><mn>1</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>⋯</mo><msub><mi>x</mi><mi>n</mi></msub><mi mathvariant=\"normal\">∣</mi><msub><mi>x</mi><mi>i</mi></msub><mo>∈</mo><mi mathvariant=\"normal\">Σ</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma^n = \\{x_1x_2\\cdots x_n | x_i \\in \\Sigma\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">∣</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Σ</span><span class=\"mclose\">}</span></span></span></span>，其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> 时，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Σ</mi><mn>0</mn></msup><mo>=</mo><mo stretchy=\"false\">{</mo><mi>ε</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma^0 = \\{\\varepsilon\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\">ε</span><span class=\"mclose\">}</span></span></span></span></li>\n<li>正闭包，记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Σ</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\Sigma^+</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Σ</mi><mo>+</mo></msup><mo>=</mo><msup><mi mathvariant=\"normal\">Σ</mi><mn>1</mn></msup><mo>∪</mo><msup><mi mathvariant=\"normal\">Σ</mi><mn>2</mn></msup><mo>∪</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma^+ = \\Sigma^1\\cup\\Sigma^2\\cup\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.313em;\"></span><span class=\"minner\">⋯</span></span></span></span></li>\n<li>Kleene 闭包，记作<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Σ</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\Sigma^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span>：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"normal\">Σ</mi><mo>∗</mo></msup><mo>=</mo><msup><mi mathvariant=\"normal\">Σ</mi><mn>0</mn></msup><mo>∪</mo><msup><mi mathvariant=\"normal\">Σ</mi><mo>+</mo></msup><mo>=</mo><msup><mi mathvariant=\"normal\">Σ</mi><mn>0</mn></msup><mo>∪</mo><msup><mi mathvariant=\"normal\">Σ</mi><mn>1</mn></msup><mo>∪</mo><msup><mi mathvariant=\"normal\">Σ</mi><mn>2</mn></msup><mo>∪</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">\\Sigma^* = \\Sigma^0\\cup\\Sigma^+=\\Sigma^0\\cup\\Sigma^1\\cup\\Sigma^2\\cup\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6887em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord\">Σ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.313em;\"></span><span class=\"minner\">⋯</span></span></span></span></li>\n</ul>\n",
            "tags": [
                "computer science",
                "learning",
                "Compilers"
            ]
        },
        {
            "id": "https://blog.ivansnow02.xyz/nju-compiler-lab-01-lexer/",
            "url": "https://blog.ivansnow02.xyz/nju-compiler-lab-01-lexer/",
            "title": "NJU编译原理Lab01-Lexer",
            "date_published": "2024-10-03T06:44:42.000Z",
            "content_html": "<div class=\"note info\">\n<p>本实验为<a href=\"http://docs.compilers.cpl.icu/#/2024/lab1-lexer/lab1-lexer\"> NJU 编译原理实验 1</a></p>\n</div>\n<h2 id=\"实验要求\"><a class=\"anchor\" href=\"#实验要求\">#</a> 实验要求</h2>\n<ul>\n<li>通过标准错误输出（ <code>stderr</code> , 如 <code>System.err</code>  等）， 打印程序的所有运行结果。</li>\n<li>对于包含词法错误的文件，需要打印所有错误信息，格式为： <code>Error type A at Line [lineNo]:[errorMessage]</code></li>\n<li>对于没有任何词法错误的文件，打印所有识别到的 <code>Tokens</code>  信息</li>\n</ul>\n<h2 id=\"g4文件编写\"><a class=\"anchor\" href=\"#g4文件编写\">#</a> .g4 文件编写</h2>\n<p>按照<a href=\"http://docs.compilers.cpl.icu/#/../../2024/docs/lexer\"> SysY 词法规则</a>来编写即可，这里不再赘述。</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<p>在 <code>Main.java</code>  中，我们需要实现 <code>main</code>  函数，读取文件，进行词法分析，并输出结果。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过标准错误输出（stderr, 如 System.err 等）， 打印程序的 所有 运行结果。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input path is required\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">String</span> source <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">CharStream</span> input <span class=\"token operator\">=</span> <span class=\"token class-name\">CharStreams</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromFileName</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">SysYLexer</span> sysYLexer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SysYLexer</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接下来实现打印错误信息，需要重写 <code>org.antlr.v4.runtime.BaseErrorListener</code>  中的 <code>syntaxError</code>  函数，并实现 <code>printLexerErrorInformation</code>  函数。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyErrorListener</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseErrorListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> errorInformation <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> hasError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">syntaxError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Recognizer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> recognizer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> offendingSymbol<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> line<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> charPositionInLine<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RecognitionException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        hasError <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        errorInformation<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error type A at Line \"</span> <span class=\"token operator\">+</span> line <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> hasError<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printLexerErrorInformation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 你需要打印所有错误信息，</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 格式为：Error type A at Line [lineNo]:[errorMessage]，</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 其中 lineNo 为出错的 token 首个字符所在行的行号，errorMessage 可自行定义，</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 本实验不做要求，只要冒号前的信息正确即可。;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> errorInformation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接下来，我们需要实现 <code>printSysYTokenInformation</code>  函数，用于打印所有识别到的 <code>Tokens</code>  信息。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printSysYTokenInformation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Token</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> tokenName <span class=\"token operator\">=</span> <span class=\"token class-name\">SysYLexer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">VOCABULARY</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSymbolicName</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">String</span> tokenText <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> line <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">getLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 特别要求：输出时忽略所有注释，对十六进制和八进制数字常量输出 token 文本时需输出其十进制的值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tokenName<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INTEGER_CONST\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tokenText<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            tokenText <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>tokenText<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tokenText<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            tokenText <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>tokenText<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>tokenName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> tokenText <span class=\"token operator\">+</span> <span class=\"token string\">\" at Line \"</span> <span class=\"token operator\">+</span> line <span class=\"token operator\">+</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后，我们需要实现 <code>main</code>  函数的剩余部分。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">MyErrorListener</span> myErrorListener <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyErrorListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sysYLexer<span class=\"token punctuation\">.</span><span class=\"token function\">removeErrorListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sysYLexer<span class=\"token punctuation\">.</span><span class=\"token function\">addErrorListener</span><span class=\"token punctuation\">(</span>myErrorListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> myTokens <span class=\"token operator\">=</span> sysYLexer<span class=\"token punctuation\">.</span><span class=\"token function\">getAllTokens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myErrorListener<span class=\"token punctuation\">.</span><span class=\"token function\">hasError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    myErrorListener<span class=\"token punctuation\">.</span><span class=\"token function\">printLexerErrorInformation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> t <span class=\"token operator\">:</span> myTokens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">printSysYTokenInformation</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "computer science",
                "learning",
                "Compilers"
            ]
        }
    ]
}