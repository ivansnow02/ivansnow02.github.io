{
    "version": "https://jsonfeed.org/version/1",
    "title": "Snow's Blog • All posts by \"java\" tag",
    "description": "some notes about computer science",
    "home_page_url": "https://blog.ivansnow02.xyz",
    "items": [
        {
            "id": "https://blog.ivansnow02.xyz/java-learning/",
            "url": "https://blog.ivansnow02.xyz/java-learning/",
            "title": "Java学习",
            "date_published": "2024-11-03T02:59:18.000Z",
            "content_html": "<h2 id=\"java概述\"><a class=\"anchor\" href=\"#java概述\">#</a> Java 概述</h2>\n<h3 id=\"java语言的主要特点\"><a class=\"anchor\" href=\"#java语言的主要特点\">#</a> Java 语言的主要特点</h3>\n<ul>\n<li>简单性</li>\n<li>面向对象</li>\n<li>跨平台</li>\n<li>安全性</li>\n<li>多线程</li>\n<li>动态性</li>\n</ul>\n<h3 id=\"初始java程序\"><a class=\"anchor\" href=\"#初始java程序\">#</a> 初始 Java 程序</h3>\n<p>Java 源文件以 “java” 结尾，此文件中<strong>最多只能有一个类被声明为 public</strong>，保存时源文件名需与 public 类名相同，如果文件中不存在 public 类，源文件名无要求。</p>\n<p>一个源文件包含几个类就可以编译出几个.class 文件。</p>\n<h2 id=\"基本程序设计\"><a class=\"anchor\" href=\"#基本程序设计\">#</a> 基本程序设计</h2>\n<h3 id=\"常量\"><a class=\"anchor\" href=\"#常量\">#</a> 常量</h3>\n<p>符号常量： <code>final</code>  修饰的变量，一旦赋值后不可更改。</p>\n<h3 id=\"类型转换\"><a class=\"anchor\" href=\"#类型转换\">#</a> 类型转换</h3>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/java-learning/85bfcba51b1dccf3fe9bbad3b7a8e45a96c54baaf89d3ca283296a9c6fb98b96.png\" alt=\"picture 0\" /></p>\n<h3 id=\"位运算\"><a class=\"anchor\" href=\"#位运算\">#</a> 位运算</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>用法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>~</td>\n<td><code>~a</code></td>\n<td>按位取反</td>\n</tr>\n<tr>\n<td>&amp;</td>\n<td><code>a &amp; b</code></td>\n<td>按位与</td>\n</tr>\n<tr>\n<td>|</td>\n<td><code>a \\| b</code></td>\n<td>按位或</td>\n</tr>\n<tr>\n<td>^</td>\n<td><code>a ^ b</code></td>\n<td>按位异或</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td><code>a &lt;&lt; b</code></td>\n<td>左移</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td><code>a &gt;&gt; b</code></td>\n<td>右移</td>\n</tr>\n<tr>\n<td>&gt;&gt;&gt;</td>\n<td><code>a &gt;&gt;&gt; b</code></td>\n<td>无符号右移</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"流程控制\"><a class=\"anchor\" href=\"#流程控制\">#</a> 流程控制</h2>\n<h3 id=\"标准输入与scanner类\"><a class=\"anchor\" href=\"#标准输入与scanner类\">#</a> 标准输入与 Scanner 类</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\\\\ <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>返回值</th>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>boolean</td>\n<td><code>hasNext()</code></td>\n<td>判断是否还有输入</td>\n</tr>\n<tr>\n<td>String</td>\n<td><code>next()</code></td>\n<td>读取一个字符串</td>\n</tr>\n<tr>\n<td>T</td>\n<td><code>nextT()</code></td>\n<td>读取一个 T 类型的值</td>\n</tr>\n<tr>\n<td>String</td>\n<td><code>nextLine()</code></td>\n<td>读取一行字符串</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><code>hasNextT()</code></td>\n<td>判断下一个输入是否为 T 类型</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td><code>hasNextT(int radix)</code></td>\n<td>判断下一个输入是否为 T 类型，radix 为进制</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"标准输出\"><a class=\"anchor\" href=\"#标准输出\">#</a> 标准输出</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>printf</code>  方法</p>\n<table>\n<thead>\n<tr>\n<th>标志</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-</td>\n<td>左对齐</td>\n</tr>\n<tr>\n<td>+</td>\n<td>显示正负号</td>\n</tr>\n<tr>\n<td>0</td>\n<td>数字前补 0</td>\n</tr>\n<tr>\n<td>#</td>\n<td>显示八进制或十六进制前缀</td>\n</tr>\n<tr>\n<td>空格</td>\n<td>正数前加空格</td>\n</tr>\n<tr>\n<td>,</td>\n<td>数字以逗号分隔</td>\n</tr>\n<tr>\n<td>(</td>\n<td>负数用括号括起来</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>格式</td>\n<td>说明</td>\n</tr>\n<tr>\n<td>---</td>\n<td>---</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>整数</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>浮点数</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>科学计数法</td>\n</tr>\n<tr>\n<td>%g</td>\n<td>通用浮点数</td>\n</tr>\n<tr>\n<td>%h</td>\n<td>散列码</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>字符</td>\n</tr>\n<tr>\n<td>%b</td>\n<td>布尔值</td>\n</tr>\n<tr>\n<td>%t</td>\n<td>日期时间</td>\n</tr>\n<tr>\n<td>%n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>十六进制整数</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>八进制整数</td>\n</tr>\n<tr>\n<td>%a</td>\n<td>十六进制浮点数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"面向对象\"><a class=\"anchor\" href=\"#面向对象\">#</a> 面向对象</h2>\n<h3 id=\"面向对象编程的特性\"><a class=\"anchor\" href=\"#面向对象编程的特性\">#</a> 面向对象编程的特性</h3>\n<h4 id=\"封装\"><a class=\"anchor\" href=\"#封装\">#</a> 封装</h4>\n<p>将对象的属性和行封装起来构成新的类型，并隐藏内部实现细节，只向用户提供对象的外部可调用操作</p>\n<p>封装最大的好处是降低了软件系统的耦合程度。实现了代码的可重用性和可维护性。</p>\n<h4 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h4>\n<p>继承性是类与类之间的一种关系，通过继承，可以在无需重新编写原有类的情况下，实现代码的扩展和重用。</p>\n<ul>\n<li>具有父类的全部属性和行为</li>\n<li>能对继承的属性和行为进行修改和扩充。</li>\n<li>极大提升了可重用性和可维护性</li>\n</ul>\n<h4 id=\"多态\"><a class=\"anchor\" href=\"#多态\">#</a> 多态</h4>\n<p>多态性是指在父类中定义的属性和行为被子类继承之后，可以具有不同的数据类型或表现形式。</p>\n<ul>\n<li>单个类：多态性在单个类中表现为方法重载：一个类可以有多个名字相同、形参列表不同的方法，在使用时由传递给它们的实参来决定使用哪个方法。</li>\n<li>在多个类中主要表现为继承结构中的方法覆盖：父类和子类中具有相同的方法头，不同的代码实现，运行时再决定调用哪个方法。</li>\n</ul>\n<h3 id=\"对象与构造方法\"><a class=\"anchor\" href=\"#对象与构造方法\">#</a> 对象与构造方法</h3>\n<p>要比较两个对象的内容是否相等，即对象实体值，必须在类里实现专门的方法，所有类的父类 <code>Object</code>  中有一个方法 <code>equals()</code> 。</p>\n<p>因对象数组中每个元素都是对象，所以每个元素都需单独实例化（还需用 <code>new</code>  实例化每个元素）</p>\n<h3 id=\"方法重载\"><a class=\"anchor\" href=\"#方法重载\">#</a> 方法重载</h3>\n<p>定义方法时使用相同的方法名，不同的形参列表，叫方法重载（overloading）方法重载是实现 “多态” 的一种方法。</p>\n<ul>\n<li>形参列表不同是指参数个数不同，或者对应位置上参数类型不同。</li>\n<li>重载方法<strong>返回类型、修饰符可以相同，也可不同</strong>，它不决定是否是重载方法</li>\n</ul>\n<h4 id=\"定位重载函数的顺序\"><a class=\"anchor\" href=\"#定位重载函数的顺序\">#</a> 定位重载函数的顺序</h4>\n<p>原则：</p>\n<ul>\n<li>查找同名方法，没有则报错</li>\n<li>比较形参和实参的数目是否相等，如果多个方法符合条件，这些方法进入候选集</li>\n<li>候选集中\n<ul>\n<li>如果对应位置上的每个参数类型完全匹配，为最佳方法，</li>\n<li>如果无匹配的可以通过扩展转换找出最佳匹配方法，选择原则为：<strong>源类型与目标类型的距离越近越好。</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"this关键字\"><a class=\"anchor\" href=\"#this关键字\">#</a>  <code>this</code>  关键字</h3>\n<p><code>this</code>  表示当前对象</p>\n<p>当通过一个对象引用调用它的成员方法时，系统会将当前对象的别名 <code>this</code>  传递到被调方法中，所以， <code>this</code>  只能<strong>在成员方法中可见</strong>。</p>\n<h4 id=\"使用this访问对象成员\"><a class=\"anchor\" href=\"#使用this访问对象成员\">#</a> 使用 <code>this</code>  访问对象成员</h4>\n<p>特别是局部变量和成员变量重名时，利用 <code>this</code>  可以限定某个变量是成员变量。</p>\n<h4 id=\"构造方法中用this调用本类的另一构造方法\"><a class=\"anchor\" href=\"#构造方法中用this调用本类的另一构造方法\">#</a> 构造方法中，用 <code>this</code>  调用本类的另一构造方法</h4>\n<p>在一个构造方法中，调用另一个重载的构造方法：形式为： <code>this([实参])</code>  这条语句必须是构造方法的第一条语句，且只能出现一次。</p>\n<h4 id=\"返回当前对象\"><a class=\"anchor\" href=\"#返回当前对象\">#</a> 返回当前对象</h4>\n<p>在方法中，利用 <code>return this</code>  可以返回当前对象，从而可以继续调用该类或其子类的成员。</p>\n<h3 id=\"参数传递\"><a class=\"anchor\" href=\"#参数传递\">#</a> 参数传递</h3>\n<p>调用方法时，先将实参赋给形参，然后再执行操作。JAVA 传参数总是采用<strong>按值传递</strong>的方式，所谓值传递就是将实参值的副本传递给被调方法的形参。</p>\n<h4 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h4>\n<p>基本数据类型的传递是将实参的值传递给形参，形参的改变不会影响实参。</p>\n<h4 id=\"引用数据类型\"><a class=\"anchor\" href=\"#引用数据类型\">#</a> 引用数据类型</h4>\n<ul>\n<li>如果形参一直指向同一个对象，那么通过形参改变对象的内容，会影响实参。</li>\n<li>如果形参指向了另一个对象，那么通过形参改变对象的内容，不会影响实参。</li>\n</ul>\n<h3 id=\"static修饰符\"><a class=\"anchor\" href=\"#static修饰符\">#</a>  <code>static</code>  修饰符</h3>\n<ul>\n<li>与类相关的静态成员称为类变量或类方法，</li>\n<li>与实例相关的普通成员称为实例变量或实例方法。</li>\n<li><code>static</code>  关键字可以修饰字段、方法、语句块和类（只能修饰内部类）</li>\n</ul>\n<h4 id=\"static修饰字段\"><a class=\"anchor\" href=\"#static修饰字段\">#</a>  <code>static</code>  修饰字段</h4>\n<p><code>static</code>  字段也称类 / 静态数据，被类的所有对象共享。</p>\n<p>当系统第一次准备使用该类时，系统会为该类的 <code>static</code>  字段分配内存空间，存储在<strong>方法区中</strong>。此时类变量开始生效，直到类被卸载。该类所占有的内存才垃圾回收机制回收。</p>\n<p><code>static</code>  变量被该类的所有对象所共享，只能是类一级的成员，不能声<br />\n明为方法的局部变量。而实例变量则是属于一个对象实例。</p>\n<p><code>static</code>  变量可以被同一类的其他方法直接访问。<br />\n其他类可以通过此 <code>static</code>  成员所属类的类名访问它，而无需先创建对象。</p>\n<h4 id=\"static修饰方法\"><a class=\"anchor\" href=\"#static修饰方法\">#</a>  <code>static</code>  修饰方法</h4>\n<p>静态方法是属于类的，而不是属于对象的。静态方法只能访问静态域和静态方法，不能访问实例域和实例方法。</p>\n<p>静态方法属于定义它的类，而且无需创建对象就</p>\n<ul>\n<li>可直接通过类名访问它。</li>\n<li>通过对象引用（无论是否为 <code>null</code> ）调用，但<strong>实例方法必须通过非 <code>null</code>  的对象引用调用</strong>。</li>\n</ul>\n<p>静态方法不能使用 <code>this</code>  和 <code>super</code>  关键字，因为静态方法在对象创建之前就已经存在。</p>\n<h4 id=\"static修饰代码块\"><a class=\"anchor\" href=\"#static修饰代码块\">#</a>  <code>static</code>  修饰代码块</h4>\n<p>静态语句块不属于任何一个方法，当类被加载时，虚拟机会执行静态块中的语句，且在类型的生命周期中只执行一次。<br />\n所以，可以利用静态块在类的加载阶段做一些初始化操作，如初始化静态数据。</p>\n<h3 id=\"访问控制\"><a class=\"anchor\" href=\"#访问控制\">#</a> 访问控制</h3>\n<table>\n<thead>\n<tr>\n<th rowspan=\"2\">修饰符</th>\n<th rowspan=\"2\">权限</th>\n<th colspan=\"3\">修饰对象</th>\n<th colspan=\"4\">可见性</th>\n</tr>\n<tr>\n<th>类</th>\n<th>字段</th>\n<th>方法</th>\n<th>同类</th>\n<th>同包</th>\n<th>不同包子类</th>\n<th>不同包非子类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>public</code></td>\n<td>公有</td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n<td>*</td>\n<td>*</td>\n<td>*</td>\n<td>*</td>\n</tr>\n<tr>\n<td><code>protected</code></td>\n<td>保护</td>\n<td></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>*</td>\n<td>*</td>\n<td>*</td>\n<td></td>\n</tr>\n<tr>\n<td>默认</td>\n<td>包访问</td>\n<td>✔️</td>\n<td>✔️</td>\n<td>✔️</td>\n<td>*</td>\n<td>*</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>private</code></td>\n<td>私有</td>\n<td></td>\n<td>✔️</td>\n<td>✔️</td>\n<td>*</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"继承-2\"><a class=\"anchor\" href=\"#继承-2\">#</a> 继承</h3>\n<ul>\n<li>Java 只支持单继承，默认父类是 <code>Object</code></li>\n<li>父类中声明为 <code>private</code>  的字段和方法，子类不可见。</li>\n<li>子类可以添加字段和方法，可以通过定义重名的属性隐藏父类属性（比较少用），也可以通过定义重名方法覆盖父类方法。</li>\n<li>子类不会自动获得父类的构造方法，子类在构造方法中如果要调用父类的构造方法，可以使用 <code>super</code>  调用，而且该调用必须是子类构造方法的<strong>第一条语句</strong>。</li>\n</ul>\n<h3 id=\"final修饰符\"><a class=\"anchor\" href=\"#final修饰符\">#</a>  <code>final</code>  修饰符</h3>\n<h4 id=\"final常量\"><a class=\"anchor\" href=\"#final常量\">#</a>  <code>final</code>  常量</h4>\n<p><code>final</code>  修饰的常量只能赋值一次，之后不能再修改。它可以是局部常量也可以是成员常量。</p>\n<ul>\n<li>局部常量必须<strong>在读取之前被赋值</strong>，</li>\n<li>成员常量必须<strong>在声明时或者在构造方法中被初始化</strong>。</li>\n</ul>\n<div class=\"note warning\">\n<ul>\n<li>基本数据类型的常量值不能改变</li>\n<li>引用类型不能指向其他对象，但可以改变对象的内容</li>\n</ul>\n</div>\n<div class=\"note info\">\n<p><code>final</code>  常量的几个常见用法</p>\n<ul>\n<li>blank  <code>final</code> s (空 <code>final</code> )<br />\n 当由同一个类生成的不同对象希望可以有不同的 <code>final</code>  字段值时，可以在定义该字段时只声明不赋值，通过构造方法对每个对象的 <code>final</code>  字段进行赋值。</li>\n<li><code>final</code>  参数<br />\n <code>final</code>  修饰形参，如果修饰的是基本数据类型，表示形参在传入后值不变，如果修饰的是引用类型，表示形参的引用值被赋值后，就不会指向新的对象。</li>\n<li><code>static final</code>  静态常量<br />\n是类一级的全局常量，只用于修饰字段而不能用于局部变量，它需要在类型被加载时就完成初始化操作。因此，一定要在<strong>定义时</strong>或者在 <code>static</code>  块中就给定初始值。</li>\n</ul>\n</div>\n<h4 id=\"final类\"><a class=\"anchor\" href=\"#final类\">#</a>  <code>final</code>  类</h4>\n<p><code>final</code>  修饰的类不能被继承</p>\n<h4 id=\"final方法\"><a class=\"anchor\" href=\"#final方法\">#</a>  <code>final</code>  方法</h4>\n<p><code>final</code>  修饰的方法不能被子类重写</p>\n<h2 id=\"类的进阶设计\"><a class=\"anchor\" href=\"#类的进阶设计\">#</a> 类的进阶设计</h2>\n<h3 id=\"对象类型转换\"><a class=\"anchor\" href=\"#对象类型转换\">#</a> 对象类型转换</h3>\n<h4 id=\"向上转型\"><a class=\"anchor\" href=\"#向上转型\">#</a> 向上转型</h4>\n<p>使用向上转型的对象引用可以调用父类中的方法，但不能调用子类中扩展的方法。</p>\n<div class=\"note primary no-icon\">\n<p>使用向上转型的对象引用可以调用父类类型中的成员，但不能调用子类类型中扩展的成员。这是因为 Java 对象有两种类型：</p>\n<ul>\n<li>编译时类型：<strong>是对象引用的类型</strong>，其能调用的<strong>方法集由引用类型决定</strong>。</li>\n<li>运行时类型：是<strong>对象本身</strong>的类型，由存放在对象结构中的<strong>类型指针所决定</strong>，它决定了运行时运行哪个类型的方法。</li>\n</ul>\n</div>\n<h4 id=\"向下转型\"><a class=\"anchor\" href=\"#向下转型\">#</a> 向下转型</h4>\n<p>向下转型是将父类对象转换为子类对象，需要强制类型转换，但是在转换之前需要使用 <code>instanceof</code>  判断是否可以转换。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Father</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token class-name\">Son</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Son</span><span class=\"token punctuation\">)</span> f<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// jdk 16</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Son</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  s<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"方法重写\"><a class=\"anchor\" href=\"#方法重写\">#</a> 方法重写</h3>\n<p>方法重写是指子类重新定义父类的方法，方法名、参数列表、返回类型必须与父类中被重写的方法一致。</p>\n<ul>\n<li>访问权限：子类方法的访问权限不能小于父类方法的访问权限。</li>\n<li>返回类型：子类方法的返回类型必顽与父类方法的返回类型一致，或者是父类方法返回类型的子类。</li>\n<li>异常：子类方法<strong>不能抛出比父类方法更多的异常</strong>，但可以抛出更少的异常，或者不抛出异常。</li>\n<li><code>final</code>  方法不能被重写；不能一个是 <code>static</code>  方法，一个是实例方法。</li>\n</ul>\n<h3 id=\"动态绑定\"><a class=\"anchor\" href=\"#动态绑定\">#</a> 动态绑定</h3>\n<p>Java 绑定规则如下：</p>\n<ul>\n<li>被 <code>final</code> 、 <code>static</code> 、 <code>private</code>  修饰的方法执行静态绑定，与编译时类型的方法体进行绑定。</li>\n<li>其余实例方法执行动态绑定，与对象的运行时类型的方法体进行绑定。</li>\n<li>成员变量（包括静态变量和实例变量）执行静态绑定，与引用类型的成员变量绑定。</li>\n</ul>\n<div class=\"note warning\">\n<ul>\n<li>静态绑定：是指在程序执行前由编译器或连接程序绑定</li>\n<li>动态绑定：是指在程序执行时由运行时 JVM 通过对象的类型指针找到对象的实际类型，然后调用相应的方法。</li>\n</ul>\n</div>\n<h3 id=\"抽象方法\"><a class=\"anchor\" href=\"#抽象方法\">#</a> 抽象方法</h3>\n<p>抽象方法是没有方法体的方法，只有声明，没有实现。</p>\n<ul>\n<li>访问权限：抽象方法不能是 <code>private</code> ，因为 <code>private</code>  方法不能被继承。</li>\n<li>不能被 <code>final</code>  和 <code>static</code>  修饰。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"抽象类\"><a class=\"anchor\" href=\"#抽象类\">#</a> 抽象类</h3>\n<p>抽象类是包含抽象方法的类，抽象类<strong>不能被实例化，只能被继承</strong>。</p>\n<ul>\n<li>抽象类可以包含<strong>零个到多个</strong>成员变量、普通方法，也可以含<strong>零个到多个</strong>抽象方法。</li>\n<li>抽象类不能被 <code>final</code>  修饰。</li>\n<li>一个类只要有一个方法是抽象方法，这个类就要定义成抽象类。</li>\n</ul>\n<h3 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h3>\n<p>接口是一种<strong>特殊的抽象类</strong>，接口中的方法<strong>都是抽象方法</strong>，接口中的成员变量都是 <code>public static final</code>  类型的常量。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InterfaceName</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 常量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MAX</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 抽象方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>所有的方法都是公开的抽象方法，所以，方法可以省略 <code>public</code>  和 <code>abstract</code>  关键字。</li>\n<li>所有的字段都是公开的静态常量，所以，字段可省略 <code>public static final</code> <br />\n 关键字。需要定义时赋初值。</li>\n<li>类似抽象类，接口不能被实例化，只能被实现。</li>\n<li>接口可以继承其他接口（不能是类），而且支持<strong>多继承</strong>，多个接口用 <code>,</code>  分割。这一点与类不同。</li>\n</ul>\n<p>重写接口方法时，访问权限只能是 <code>public</code> ，因为接口中的方法默认是 <code>public</code>  的。</p>\n<h3 id=\"接口与抽象类的区别\"><a class=\"anchor\" href=\"#接口与抽象类的区别\">#</a> 接口与抽象类的区别</h3>\n<p>抽象类与接口是进行抽象的两种机制，有相似性，也有区别。</p>\n<ul>\n<li>语法上：抽象类用关键字 <code>abstract class</code>  定义，可定义成员变量和非抽象方法；接口用 <code>interface</code>  定义，接口内只有公开的静态常量、成员方法都是公开的，且只能是抽象方法、默认方法或静态方法。</li>\n<li>使用上：抽象类是用来被单继承的，而一个类可以实现多个接口。</li>\n<li>设计上：抽象类作为父类，与子类之间存在 “is-a” 关系，即父子类本质上是一种类型。接口只能表示类支持接口的行，具有接口的功能。因此接口和实现类之间表示的是 “like-a” 关系。因此，在设计上，如果父子类型本质上是一种类型，那父类可设计成抽象类，如果子类型只是想额外具有一些特性，则可以将父类型设计成接口，而且这些接口不易过大，应该设计成多个专题的小接口。这也是面向对象设计的一个重要原则 — 接口隔离原则。</li>\n</ul>\n<h3 id=\"内部类\"><a class=\"anchor\" href=\"#内部类\">#</a> 内部类</h3>\n<ul>\n<li>内部类仍是一个独立的类，在编译外部类时，内部类也会被编译成独立的 <code>class</code>  文件，文件名前面冠以外部类的类型和 <code>$</code>  符号，如 <code>OuterClass$InnerClass</code> 。</li>\n<li>内部类是外部类的成员，因此，内部类可以访问外部类的成员，无论是否为 <code>private</code> 。如果内部类声明成 <code>static</code> ，相应的，只能访问外部类的静态成员。</li>\n<li>内部类可作为外部类的成员，也可作为方法的成员（局部内部类）。如果作为外部类的成员，则可以使用 4 种访问权限修饰符，如果作为方法成员则没有访问权限修饰符。</li>\n</ul>\n<h4 id=\"实例内部类\"><a class=\"anchor\" href=\"#实例内部类\">#</a> 实例内部类</h4>\n<ul>\n<li>\n<p>实例内部类是最常见的内部类，它是外部类的一个成员，可以访问外部类的所有成员。</p>\n</li>\n<li>\n<p>在外部类的静态方法和外部类以外的地方创建内部类的实例，需要先创建外部类的实例，再通过外部类的实例创建内部类的实例。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">OuterClass</span> outer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OuterClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">OuterClass<span class=\"token punctuation\">.</span>InnerClass</span> inner <span class=\"token operator\">=</span> outer<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InnerClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>在外部类中不能直接访问内部类的实例成员，需要通过内部类的实例访问。</p>\n</li>\n<li>\n<p>在内部类中可以直接访问外部类的实例成员，如果内部类和外部类有同名成员，可以通过 <code>OuterClass.this.member</code>  访问外部类的成员。</p>\n</li>\n<li>\n<p>内部类不能与外部类重名</p>\n</li>\n</ul>\n<h4 id=\"静态内部类\"><a class=\"anchor\" href=\"#静态内部类\">#</a> 静态内部类</h4>\n<p>静态内部类是 <code>static</code>  修饰的内部类，它是外部类的一个静态成员，它与所属的外部类而不是外部对象相关联。</p>\n<ul>\n<li>\n<p>通过外部类名直接访问静态内部类的静态成员</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">OuterClass<span class=\"token punctuation\">.</span>InnerClass</span> inner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OuterClass<span class=\"token punctuation\">.</span>InnerClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>静态内部类中可定义<strong>静态成员和实例成员</strong>。外部类以外的其他类可通过类名访问静态内部类中的静态成员，如果要访问静态内部类中的实例成员，则必须通过静态内部类的实例。</p>\n</li>\n<li>\n<p>类似于类的静态方法，静态内部类可以直接访问外部类的静态成员，如果要访问外部类的实例成员，则需要通过外部类的实例去访问。</p>\n</li>\n<li>\n<p>接口中可以定义内部类，且默认是 <code>static</code>  内部类，这种类可以被某个接口的所有不同实现所共用。</p>\n</li>\n</ul>\n<h4 id=\"局部内部类\"><a class=\"anchor\" href=\"#局部内部类\">#</a> 局部内部类</h4>\n<ul>\n<li>局部内部类是指定义在方法内的内部类。其有效范围只在定义它的方法内。</li>\n<li>局部内部类遵循如下规则：\n<ul>\n<li>局部内部类与局部变量一样，不能使用访问修饰符和 <code>static</code>  修饰符。</li>\n<li>在局部内部类中可以访问外部类的所有成员。</li>\n<li>在局部内部类中<strong>只可以读取方法常量</strong>，或<strong>初始化后不再改变的变量</strong>。</li>\n<li>如果方法中的成员与外部类成员同名，则可用 <code>OuterClass.this</code>  访问外部类中的实例成员  <code>OuterClass.this.MemberName</code>  或用 <code>OuterClass.MemberName</code>  访问外部类的静态成员。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"匿名内部类\"><a class=\"anchor\" href=\"#匿名内部类\">#</a> 匿名内部类</h4>\n<ul>\n<li>匿名类是指没有类名只有类体的内部类，如果<strong>程序定义某个类却只需要创建一个对象</strong>，这时可以考虑使用匿名内部类。</li>\n<li>由于匿名类没有类名，所以创建匿名类的对象时需要用到该匿名类的父类或接口，而且匿名类的定义和对象创建是同时进行的，因此，在定义的同时，使用 <code>new</code>  语句来声明对象。</li>\n</ul>\n<div class=\"note warning\">\n<p>匿名内部类的特点：</p>\n<ul>\n<li>匿名类和局部内部类一样，可以访问外部类的所有成员。其他局部内部类的特性也适用于匿名内部类。</li>\n<li>匿名类没有名字，所以<strong>不能定义构造方法</strong>，但可定义<strong>非静态字段</strong>，<strong>重写父类型方法</strong>。</li>\n<li>匿名内部类编译后对应的字节码文件名为： <code>外部类$数字序号（序号从1开始）</code> 。</li>\n<li>匿名类常用方式是<strong>向方法传参</strong>，当匿名内部类重写的父类（接口）只有一个方法时，建议使用 <code>Lambda</code>  表达式。</li>\n</ul>\n</div>\n<h2 id=\"异常处理\"><a class=\"anchor\" href=\"#异常处理\">#</a> 异常处理</h2>\n<h3 id=\"异常类\"><a class=\"anchor\" href=\"#异常类\">#</a> 异常类</h3>\n<ul>\n<li>运行时异常（ <code>Runtime Exception</code> ）：是一种不检查异常，是程序员编程时的错误，如数组越界、空指针等。</li>\n<li>受检异常（ <code>Checked Exception</code> ）：是一种检查异常，是程序员无法控制的异常，如文件不存在、网络中断等。</li>\n</ul>\n<h4 id=\"常用异常类\"><a class=\"anchor\" href=\"#常用异常类\">#</a> 常用异常类</h4>\n<table>\n<thead>\n<tr>\n<th>异常类</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ArithmeticException</code></td>\n<td>算术异常</td>\n</tr>\n<tr>\n<td><code>ArrayIndexOutOfBoundsException</code></td>\n<td>数组下标越界异常</td>\n</tr>\n<tr>\n<td><code>NullPointerException</code></td>\n<td>空指针异常</td>\n</tr>\n<tr>\n<td><code>FileNotFoundException</code></td>\n<td>文件未找到异常</td>\n</tr>\n<tr>\n<td><code>IOException</code></td>\n<td>输入输出异常</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"异常处理机制\"><a class=\"anchor\" href=\"#异常处理机制\">#</a> 异常处理机制</h3>\n<ul>\n<li>声明异常<br />\n不捕获异常，而只是声明方法有可能抛出的异常，从而让该方法的上层调用方法捕获异常。</li>\n<li>捕获处理异常<br />\n Java 运行时系统捕获异常并找到相应异常的捕获处理代码并运行，这一过程称为捕获处理异常。如果系统找不到捕获异常代码，程序将终止。</li>\n</ul>\n<h3 id=\"捕获处理异常\"><a class=\"anchor\" href=\"#捕获处理异常\">#</a> 捕获处理异常</h3>\n<p>说明：</p>\n<ul>\n<li><code>try</code>  语句：发生异常时，将<strong>跳过</strong> <code>try</code>  块中异常点后面的语句，且异常处理需要更多的时间和资源。因此，应当仔细分析代码，尽量缩减 <code>try</code>  代码块。</li>\n<li><code>catch</code>  语句可以有<strong>零个或多个</strong>， <code>finally</code>  语句可以有<strong>零个或一个</strong>。</li>\n<li><code>catch</code>  语句：设计捕获异常代码要注意其顺序，按照从 “特殊到一般” 的顺序来设计。将子类的 <code>catch</code>  块放在前面，父类的 <code>catch</code>  块放在后面。</li>\n<li>从 java7 开始，多个异常可以写在一个 <code>catch</code>  中，它们之间用竖线隔开，但需要注意，用 <code>|</code>  操作符合并的异常不要出现互为父子的关系。</li>\n<li><code>finally</code>  语句是可选项。如果有该语句，无论是否捕获或处理异常，<strong>即使 <code>try</code>  或者 <code>catch</code>  块中包含 <code>break</code>  或 <code>return</code>  语句，</strong> <code>finally</code>  块里的语句也会被执行。 <code>finally</code>  语句一般用来在最后做一些资源回收工作，比如在 <code>try</code>  语句中打开了文件流，可以在 <code>finally</code>  中确保文件被有效关闭。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>getMessage()-&gt;String</code></td>\n<td>返回异常的详细信息字符串</td>\n</tr>\n<tr>\n<td><code>toString()-&gt;String</code></td>\n<td>返回异常类全名 + 异常信息</td>\n</tr>\n<tr>\n<td><code>printStackTrace()</code></td>\n<td>打印异常的堆栈信息</td>\n</tr>\n<tr>\n<td><code>getStackTrace()-&gt;StackTraceElement[]</code></td>\n<td>返回和异常对象相关的堆栈跟踪元素数组</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"带资源的try语句\"><a class=\"anchor\" href=\"#带资源的try语句\">#</a> 带资源的 <code>try</code>  语句</h3>\n<p>可以被自动关闭的资源有一个前提，这个资源的类已经实现了 <code>java.lang.AutoCloseable</code>  接口，这个接口有一个方法： <code>void close()</code> 。</p>\n<h3 id=\"throw抛出异常和throws声明异常\"><a class=\"anchor\" href=\"#throw抛出异常和throws声明异常\">#</a>  <code>throw</code>  抛出异常和 <code>throws</code>  声明异常</h3>\n<h4 id=\"抛出异常\"><a class=\"anchor\" href=\"#抛出异常\">#</a> 抛出异常</h4>\n<p>检测到错误的程序可以创建一个合适的异常对象并抛出它，这就称为抛出一个异常。<br />\nJava 中有两种方法抛出异常。</p>\n<ul>\n<li>Java 运行时环境自动抛出异常：系统定义的 <code>RuntimeException</code>  类及其子类和 <code>Error</code>  都可以由系统自动抛出。</li>\n<li>语句 <code>throw</code>  抛出异常：用户程序想在一定条件下显式抛出异常，这必须借助于 <code>throw</code>  语句抛出。Java 用 <code>throw</code>  语句抛出异常。</li>\n</ul>\n<h4 id=\"声明异常\"><a class=\"anchor\" href=\"#声明异常\">#</a> 声明异常</h4>\n<ul>\n<li>定义方法时，如果方法可能出现异常，但该方法不想或不能自己捕获处理这种异常，那就必须在声明方法时用 <code>throws</code>  声明可能发生的异常。</li>\n<li>对于不受查异常（ <code>Runtime Exception</code>  和 <code>Error</code> ），Java 不要求在方法头中显示声明，但是，其它异常就一定要在方法头中显示声明。</li>\n</ul>\n<h2 id=\"常用类\"><a class=\"anchor\" href=\"#常用类\">#</a> 常用类</h2>\n<h3 id=\"object类\"><a class=\"anchor\" href=\"#object类\">#</a>  <code>Object</code>  类</h3>\n<ul>\n<li><code>Object</code>  类是所有类的父类，所以所有类都可以调用 <code>Object</code>  类的方法。</li>\n<li><code>Object</code>  类中的 <code>clone()</code>  方法是浅拷贝，即只拷贝对象的引用，而不拷贝对象的内容。</li>\n<li><code>Object</code>  类中的 <code>equals()</code>  方法是比较两个对象的内容是否相等，如果没有重写 <code>equals()</code>  方法，那么比较的是两个对象的引用是否相等。</li>\n<li><code>Object</code>  类中的 <code>hashCode()</code>  方法是返回对象的哈希码，哈希码是对象的内存地址经过哈希算法得到的一个整数，用于快速查找对象。</li>\n<li><code>Object</code>  类中的 <code>toString()</code>  方法是返回对象的字符串表示，如果没有重写 <code>toString()</code>  方法，那么返回的是对象的哈希码。</li>\n</ul>\n<h3 id=\"string类\"><a class=\"anchor\" href=\"#string类\">#</a>  <code>String</code>  类</h3>\n<ul>\n<li><code>String</code>  类是不可变的，一旦创建，它的值就不能被改变。</li>\n</ul>\n<h4 id=\"创建字符串\"><a class=\"anchor\" href=\"#创建字符串\">#</a> 创建字符串</h4>\n<ul>\n<li>直接赋值： <code>String str = &quot;Hello, World!&quot;;</code></li>\n<li>通过构造方法： <code>String str = new String(&quot;Hello, World!&quot;);</code></li>\n<li>通过字符数组： <code>char[] ch = &#123;'H', 'e', 'l', 'l', 'o'&#125;; String str = new String(ch);</code></li>\n<li>通过字节数组： <code>byte[] b = &#123;72, 101, 108, 108, 111&#125;; String str = new String(b);</code></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">==</span> str1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">==</span> str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str2 <span class=\"token operator\">==</span> str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><h4 id=\"字符串常用方法\"><a class=\"anchor\" href=\"#字符串常用方法\">#</a> 字符串常用方法</h4>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>length()-&gt;int</code></td>\n<td>返回字符串的长度</td>\n</tr>\n<tr>\n<td><code>charAt(int index)-&gt;char</code></td>\n<td>返回指定索引处的字符</td>\n</tr>\n<tr>\n<td><code>indexOf(String str)-&gt;int</code></td>\n<td>返回指定子字符串在此字符串中第一次出现的索引</td>\n</tr>\n<tr>\n<td><code>lastIndexOf(String str)-&gt;int</code></td>\n<td>返回指定子字符串在此字符串中最右边出现的索引</td>\n</tr>\n<tr>\n<td><code>substring(int beginIndex, int endIndex)-&gt;String</code></td>\n<td>返回一个新的字符串，它是此字符串的一个子字符串</td>\n</tr>\n<tr>\n<td><code>concat(String str)-&gt;String</code></td>\n<td>将指定字符串连接到此字符串的结尾</td>\n</tr>\n<tr>\n<td><code>replace(char oldChar, char newChar)-&gt;String</code></td>\n<td>返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的</td>\n</tr>\n<tr>\n<td><code>split(String regex)-&gt;String[]</code></td>\n<td>根据给定正则表达式的匹配拆分此字符串</td>\n</tr>\n<tr>\n<td><code>trim()-&gt;String</code></td>\n<td>返回字符串的副本，忽略前导空白和尾部空白</td>\n</tr>\n<tr>\n<td><code>endsWith(String suffix)-&gt;boolean</code></td>\n<td>测试此字符串是否以指定的后缀结束</td>\n</tr>\n<tr>\n<td><code>startsWith(String prefix)-&gt;boolean</code></td>\n<td>测试此字符串是否以指定的前缀开始</td>\n</tr>\n<tr>\n<td><code>format(String format, Object... args)-&gt;String</code></td>\n<td>使用指定的格式字符串和参数返回格式化的字符串</td>\n</tr>\n<tr>\n<td><code>toLowerCase()-&gt;String</code></td>\n<td>使用默认语言环境的规则将此 <code>String</code>  中的所有字符都转换为小写</td>\n</tr>\n<tr>\n<td><code>toUpperCase()-&gt;String</code></td>\n<td>使用默认语言环境的规则将此 <code>String</code>  中的所有字符都转换为大写</td>\n</tr>\n<tr>\n<td><code>equals(Object obj)-&gt;boolean</code></td>\n<td>将此字符串与指定对象进行比较</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"正则表达式\"><a class=\"anchor\" href=\"#正则表达式\">#</a> 正则表达式</h4>\n<h5 id=\"字符类\"><a class=\"anchor\" href=\"#字符类\">#</a> 字符类</h5>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\d</code></td>\n<td>匹配一个数字字符</td>\n</tr>\n<tr>\n<td><code>\\D</code></td>\n<td>匹配一个非数字字符</td>\n</tr>\n<tr>\n<td><code>\\w</code></td>\n<td>匹配一个字母、数字或下划线字符，不包括 <code>$</code></td>\n</tr>\n<tr>\n<td><code>\\W</code></td>\n<td>匹配一个非字母、数字或下划线字符</td>\n</tr>\n<tr>\n<td><code>\\s</code></td>\n<td>匹配一个空白字符</td>\n</tr>\n<tr>\n<td><code>\\S</code></td>\n<td>匹配一个非空白字符</td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td>匹配除换行符 <code>\\n</code>  之外的任何字符</td>\n</tr>\n<tr>\n<td><code>\\p&#123;Lower&#125;</code></td>\n<td>匹配一个小写字母</td>\n</tr>\n<tr>\n<td><code>\\p&#123;Upper&#125;</code></td>\n<td>匹配一个大写字母</td>\n</tr>\n<tr>\n<td><code>\\p&#123;ASCII&#125;</code></td>\n<td>匹配一个 ASCII 字符</td>\n</tr>\n<tr>\n<td><code>\\p&#123;Alpha&#125;</code></td>\n<td>匹配一个字母字符</td>\n</tr>\n<tr>\n<td><code>\\p&#123;Digit&#125;</code></td>\n<td>匹配一个数字字符</td>\n</tr>\n<tr>\n<td><code>\\p&#123;Alnum&#125;</code></td>\n<td>匹配一个字母或数字字符</td>\n</tr>\n<tr>\n<td><code>\\p&#123;Punct&#125;</code></td>\n<td>匹配一个标点字符</td>\n</tr>\n<tr>\n<td><code>\\p&#123;Graph&#125;</code></td>\n<td>匹配一个可打印字符，不包括空格</td>\n</tr>\n<tr>\n<td><code>\\p&#123;Print&#125;</code></td>\n<td>匹配一个可打印字符，包括空格</td>\n</tr>\n<tr>\n<td><code>\\p&#123;Blank&#125;</code></td>\n<td>匹配一个空格或制表符</td>\n</tr>\n<tr>\n<td><code>\\p&#123;Cntrl&#125;</code></td>\n<td>匹配一个控制字符</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"量词\"><a class=\"anchor\" href=\"#量词\">#</a> 量词</h5>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>X?</code></td>\n<td>匹配 <code>X</code>  零次或一次</td>\n</tr>\n<tr>\n<td><code>X*</code></td>\n<td>匹配 <code>X</code>  零次或多次</td>\n</tr>\n<tr>\n<td><code>X+</code></td>\n<td>匹配 <code>X</code>  一次或多次</td>\n</tr>\n<tr>\n<td><code>X&#123;n&#125;</code></td>\n<td>匹配 <code>X</code>  恰好 <code>n</code>  次</td>\n</tr>\n<tr>\n<td><code>X&#123;n,&#125;</code></td>\n<td>匹配 <code>X</code>  至少 <code>n</code>  次</td>\n</tr>\n<tr>\n<td><code>X&#123;n,m&#125;</code></td>\n<td>匹配 <code>X</code>  至少 <code>n</code>  次，但不超过 <code>m</code>  次</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h5>\n<table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[]</code></td>\n<td>表示 <code>[]</code>  中的任意一个字符</td>\n</tr>\n<tr>\n<td><code>\\|</code></td>\n<td>表示 <code>\\|</code>  两边的任意一个字符</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>1. 表示输入字符串的开始位置 \\n 2. 在 <code>[]</code>  使用表示不接受 <code>[]</code>  中的字符</td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>表示输入字符串的结束位置</td>\n</tr>\n<tr>\n<td><code>()</code></td>\n<td>表示一个子表达式，可以获取供以后使用，用 <code>$1</code> 、 <code>$2</code>  等表示</td>\n</tr>\n<tr>\n<td><code>&amp;&amp;</code></td>\n<td>表示交集</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"泛型集合\"><a class=\"anchor\" href=\"#泛型集合\">#</a> 泛型集合</h3>\n<h4 id=\"泛式数据结构\"><a class=\"anchor\" href=\"#泛式数据结构\">#</a> 泛式数据结构</h4>\n<ul>\n<li><code>Collection</code>  接口\n<ul>\n<li><code>List</code>  接口\n<ul>\n<li><code>ArrayList</code>  类</li>\n<li><code>LinkedList</code>  类</li>\n</ul>\n</li>\n<li><code>Set</code>  接口\n<ul>\n<li><code>HashSet</code>  类</li>\n<li><code>TreeSet</code>  类</li>\n</ul>\n</li>\n<li><code>Queue</code>  接口\n<ul>\n<li><code>PriorityQueue</code>  类</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>Map</code>  接口\n<ul>\n<li><code>HashMap</code>  类</li>\n<li><code>TreeMap</code>  类</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"集合遍历\"><a class=\"anchor\" href=\"#集合遍历\">#</a> 集合遍历</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 1. 使用迭代器遍历</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 2. 使用增强 for 循环遍历</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 3. 使用 forEach 方法遍历</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 4. 使用 for 循环遍历</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 键值对遍历</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> entry <span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" : \"</span> <span class=\"token operator\">+</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 键遍历</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 值遍历</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> value <span class=\"token operator\">:</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"arrays类了解\"><a class=\"anchor\" href=\"#arrays类了解\">#</a>  <code>Arrays</code>  类（了解）</h3>\n<ul>\n<li><code>Arrays</code>  类是 <code>java.util</code>  包中的一个工具类，提供了一系列静态方法用于操作数组。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>asList(T... a)-&gt;List&lt;T&gt;</code></td>\n<td>将数组转换为 <code>List</code></td>\n</tr>\n<tr>\n<td><code>binarySearch(T[] a, T key)-&gt;int</code></td>\n<td>对数组进行二分查找，需要先排序</td>\n</tr>\n<tr>\n<td><code>copyOf(T[] original, int newLength)-&gt;T[]</code></td>\n<td>复制指定的数组，截取或用 <code>null</code>  填充（如果需要）</td>\n</tr>\n<tr>\n<td><code>sort(T[] a)-&gt;void</code></td>\n<td>对数组进行排序</td>\n</tr>\n<tr>\n<td><code>fill(T[] a, T val)-&gt;void</code></td>\n<td>用指定的值填充数组</td>\n</tr>\n<tr>\n<td><code>equals(T[] a, T[] a2)-&gt;boolean</code></td>\n<td>比较两个数组是否相等</td>\n</tr>\n<tr>\n<td><code>compare(T[] a, T[] a2)-&gt;int</code></td>\n<td>比较两个数组的大小</td>\n</tr>\n<tr>\n<td><code>stream(T[] array)-&gt;Stream&lt;T&gt;</code></td>\n<td>返回数组的流</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"collections类了解\"><a class=\"anchor\" href=\"#collections类了解\">#</a>  <code>Collections</code>  类（了解）</h3>\n<ul>\n<li><code>Collections</code>  类是 <code>java.util</code>  包中的一个工具类，提供了一系列静态方法用于操作集合。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>sort(List&lt;T&gt; list)-&gt;void</code></td>\n<td>对列表进行排序</td>\n</tr>\n<tr>\n<td><code>reverse(List&lt;T&gt; list)-&gt;void</code></td>\n<td>反转列表中的元素</td>\n</tr>\n<tr>\n<td><code>shuffle(List&lt;T&gt; list)-&gt;void</code></td>\n<td>随机排列列表中的元素</td>\n</tr>\n<tr>\n<td><code>swap(List&lt;T&gt; list, int i, int j)-&gt;void</code></td>\n<td>交换列表中指定位置的元素</td>\n</tr>\n<tr>\n<td><code>fill(List&lt;? super T&gt; list, T obj)-&gt;void</code></td>\n<td>用指定元素替换列表中的所有元素</td>\n</tr>\n<tr>\n<td><code>copy(List&lt;? super T&gt; dest, List&lt;? extends T&gt; src)-&gt;void</code></td>\n<td>将所有元素从一个列表复制到另一个列表</td>\n</tr>\n<tr>\n<td><code>max(Collection&lt;? extends T&gt; coll)-&gt;T</code></td>\n<td>返回集合中的最大元素</td>\n</tr>\n<tr>\n<td><code>min(Collection&lt;? extends T&gt; coll)-&gt;T</code></td>\n<td>返回集合中的最小元素</td>\n</tr>\n<tr>\n<td><code>binarySearch(List&lt;? extends T&gt; list, T key)-&gt;int</code></td>\n<td>对列表进行二分查找，需要先排序</td>\n</tr>\n<tr>\n<td><code>disjoint(Collection&lt;?&gt; c1, Collection&lt;?&gt; c2)-&gt;boolean</code></td>\n<td>如果两个指定的集合没有相同的元素，则返回 <code>true</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"io流\"><a class=\"anchor\" href=\"#io流\">#</a> IO 流</h2>\n<h3 id=\"file类\"><a class=\"anchor\" href=\"#file类\">#</a>  <code>File</code>  类</h3>\n<ul>\n<li><code>File</code>  类是 <code>java.io</code>  包中的一个类，用于表示文件或目录的路径名。</li>\n</ul>\n<h3 id=\"文件流\"><a class=\"anchor\" href=\"#文件流\">#</a> 文件流</h3>\n<p>创建 <code>FileInputStream</code>  的两种方式</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// ********** or **********</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">FileInputStream</span> fis2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><div class=\"note info\">\n<ul>\n<li>创建 FilelnputStream 实例对象时，指定的文件应当是存在和可读的。</li>\n<li>创建 FileOutputStream 实例对象时，如果指定的文件己经存在，这个文件中原来内容将被覆盖清除，可以指定还不存在的文件名</li>\n</ul>\n</div>\n<h4 id=\"文件拷贝\"><a class=\"anchor\" href=\"#文件拷贝\">#</a> 文件拷贝</h4>\n<h5 id=\"fileinputstream和fileoutputstream\"><a class=\"anchor\" href=\"#fileinputstream和fileoutputstream\">#</a>  <code>FileInputStream</code>  和 <code>FileOutputStream</code></h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> dest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>fis<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"filereader和filewriter\"><a class=\"anchor\" href=\"#filereader和filewriter\">#</a>  <code>FileReader</code>  和 <code>FileWriter</code></h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> dest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FileReader</span> fr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token class-name\">FileWriter</span> fw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> fr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      fw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"缓冲流\"><a class=\"anchor\" href=\"#缓冲流\">#</a> 缓冲流</h3>\n<ul>\n<li>缓冲流是对文件流的包装，提供了缓冲功能，可以提高读写文件的效率。</li>\n</ul>\n<h4 id=\"bufferedinputstream和bufferedoutputstream\"><a class=\"anchor\" href=\"#bufferedinputstream和bufferedoutputstream\">#</a>  <code>BufferedInputStream</code>  和 <code>BufferedOutputStream</code></h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">BufferedInputStream</span> bis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span>fis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">FileOutputStream</span> fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">BufferedOutputStream</span> bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedOutputStream</span><span class=\"token punctuation\">(</span>fos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"bufferedreader和bufferedwriter\"><a class=\"anchor\" href=\"#bufferedreader和bufferedwriter\">#</a>  <code>BufferedReader</code>  和 <code>BufferedWriter</code></h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> dest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BufferedReader</span> br <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token class-name\">BufferedWriter</span> bw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileWriter</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> br<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      bw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      bw<span class=\"token punctuation\">.</span><span class=\"token function\">newLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    bw<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"字节字符转换流\"><a class=\"anchor\" href=\"#字节字符转换流\">#</a> 字节字符转换流</h3>\n<ul>\n<li>字节流和字符流之间的转换，可以使用 <code>InputStreamReader</code>  和 <code>OutputStreamWriter</code> 。</li>\n</ul>\n<h4 id=\"inputstreamreader和outputstreamwriter\"><a class=\"anchor\" href=\"#inputstreamreader和outputstreamwriter\">#</a>  <code>InputStreamReader</code>  和 <code>OutputStreamWriter</code></h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStreamReader</span> isr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token class-name\">OutputStreamWriter</span> osw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test2.bak\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> isr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      osw<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"线程\"><a class=\"anchor\" href=\"#线程\">#</a> 线程</h2>\n<h3 id=\"线程概念\"><a class=\"anchor\" href=\"#线程概念\">#</a> 线程概念</h3>\n<h4 id=\"程序\"><a class=\"anchor\" href=\"#程序\">#</a> 程序</h4>\n<p>程序是一段静态代码，是指令与数据的集合。通常是外存上保存的可执行的二进制文件。</p>\n<h4 id=\"进程-process\"><a class=\"anchor\" href=\"#进程-process\">#</a> 进程 (Process)</h4>\n<p>进程是程序的一次运行活动。它对应从代码加载、执行到结束的一个过程，进程可以申请和拥有系统一整套资源，是系统进行资源分配和调度的基本单位。</p>\n<h4 id=\"线程-thread\"><a class=\"anchor\" href=\"#线程-thread\">#</a> 线程 (Thread)</h4>\n<p>线程是进程中能够独立执行的执行序列。一个进程可以产生多个线程，线程也有创建、存活到消亡的生命周期，每个线程都有独立的运行栈和程序计数器，是 CPU 调度的最小单位。</p>\n<h4 id=\"进程与线程关系\"><a class=\"anchor\" href=\"#进程与线程关系\">#</a> 进程与线程关系</h4>\n<p>一个进程中的所有线程共享相同的地址空间和这个进程所拥有的操作系统资源。</p>\n<h3 id=\"线程的创建\"><a class=\"anchor\" href=\"#线程的创建\">#</a> 线程的创建</h3>\n<h4 id=\"继承thread类\"><a class=\"anchor\" href=\"#继承thread类\">#</a> 继承 <code>Thread</code>  类</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyThread is running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">MyThread</span> myThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    myThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"实现runnable接口\"><a class=\"anchor\" href=\"#实现runnable接口\">#</a> 实现 <code>Runnable</code>  接口</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyRunnable is running...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">MyRunnable</span> myRunnable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>myRunnable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"实现callable接口和futuretask类\"><a class=\"anchor\" href=\"#实现callable接口和futuretask类\">#</a> 实现 <code>Callable</code>  接口和 <code>FutureTask</code>  类</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCallable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"MyCallable is running...\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">MyCallable</span> myCallable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyCallable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> futureTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>myCallable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> <span class=\"token operator\">|</span> <span class=\"token class-name\">ExecutionException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"图形用户界面\"><a class=\"anchor\" href=\"#图形用户界面\">#</a> 图形用户界面</h2>\n<h3 id=\"jframe类\"><a class=\"anchor\" href=\"#jframe类\">#</a>  <code>JFrame</code>  类</h3>\n<ul>\n<li><code>JFrame</code>  是 <code>Swing</code>  中的顶层容器，是一个窗口，可以包含其他 <code>GUI</code>  组件。</li>\n<li>每个 <code>GUI</code>  组件只能被添加到一个容器中。</li>\n<li>创建 <code>JFrame</code>  对象后，默认情况下布局管理器是 <code>BorderLayout</code></li>\n<li><code>Swing</code>  中事件处理和绘画代码都在一个单独的线程中执行。该线程确保了事件处理器都能串行的执行，并且绘画过程不会被事件打断。因此，在 <code>main</code>  方法或其他启动界面的线程，尽量使用 <code>SwingUtilities.invokeLater(Runnable doRun)</code>  启动线程来操作界面。</li>\n</ul>\n<h4 id=\"jframe的常用方法\"><a class=\"anchor\" href=\"#jframe的常用方法\">#</a>  <code>JFrame</code>  的常用方法</h4>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>getContentPanel()-&gt;Container</code></td>\n<td>返回 <code>JFrame</code>  的内容面板</td>\n</tr>\n<tr>\n<td><code>setVisible(boolean b)-&gt;void</code></td>\n<td>设置窗口是否可见</td>\n</tr>\n<tr>\n<td><code>setTitle(String title)-&gt;void</code></td>\n<td>设置窗口标题</td>\n</tr>\n<tr>\n<td><code>setBounds(int x, int y, int width, int height)-&gt;void</code></td>\n<td>设置窗口的位置和大小</td>\n</tr>\n<tr>\n<td><code>resize(int width, int height)-&gt;void</code></td>\n<td>设置窗口的大小</td>\n</tr>\n<tr>\n<td><code>setLocation(int x, int y)-&gt;void</code></td>\n<td>设置窗口的位置</td>\n</tr>\n<tr>\n<td><code>add(Component comp)-&gt;void</code></td>\n<td>添加组件到窗口中心</td>\n</tr>\n<tr>\n<td><code>add(Component comp, Object constraints)-&gt;void</code></td>\n<td>添加组件到窗口中心，并设置布局约束</td>\n</tr>\n<tr>\n<td><code>pack()-&gt;void</code></td>\n<td>调整窗口大小，以适应其子组件的首选大小</td>\n</tr>\n<tr>\n<td><code>hide()-&gt;void</code></td>\n<td>隐藏窗口</td>\n</tr>\n<tr>\n<td><code>setDefaultCloseOperation(int operation)-&gt;void</code></td>\n<td>设置窗口关闭操作</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"布局管理器\"><a class=\"anchor\" href=\"#布局管理器\">#</a> 布局管理器</h3>\n<ul>\n<li><code>java.awt</code>  包中的布局管理器</li>\n<li>容器中的组件在容器中的大小和位置是由容器的布局管理器（ <code>layoutmanager</code> ）来布置的，这样能根据不同的屏幕自动进行排版。</li>\n<li>每个容器中都有默认的布局管理器，缺省的布局管理器为：\n<ul>\n<li>所有窗口： <code>BorderLayout</code> （文件对话框除外）</li>\n<li>所有面板（包括 <code>Applet</code> ）： <code>FlowLayout</code> <br />\n 但容器组件可以通过 <code>setLayout</code>  方法设置或取消容器的布局管理器，其语法格式为：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">setLayout</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LayoutManager</span> mgr<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"flowlayout\"><a class=\"anchor\" href=\"#flowlayout\">#</a>  <code>FlowLayout</code></h4>\n<ul>\n<li><code>FlowLayout</code>  是 <code>java.awt</code>  包中的布局管理器，将容器中的组件按照添加的顺序从左到右排列，当一行排满时，自动换行。</li>\n<li>构造方法： <code>FlowLayout()</code> 、 <code>FlowLayout(int align)</code> 、 <code>FlowLayout(int align, int hgap, int vgap)</code></li>\n<li><code>align</code> ：对齐方式，有 <code>FlowLayout.LEFT</code> 、 <code>FlowLayout.CENTER</code> 、 <code>FlowLayout.RIGHT</code></li>\n<li><code>hgap</code> ：水平间距， <code>vgap</code> ：垂直间距</li>\n</ul>\n<h4 id=\"borderlayout\"><a class=\"anchor\" href=\"#borderlayout\">#</a>  <code>BorderLayout</code></h4>\n<ul>\n<li><code>BorderLayout</code>  是 <code>java.awt</code>  包中的布局管理器，是 <code>JFrame</code>  的默认布局管理器。</li>\n<li><code>BorderLayout</code>  将容器分为 5 个区域： <code>NORTH</code> 、 <code>SOUTH</code> 、 <code>WEST</code> 、 <code>EAST</code> 、 <code>CENTER</code> 。</li>\n<li><code>BorderLayout</code>  的构造方法： <code>BorderLayout(int hgap, int vgap)</code> ， <code>hgap</code>  和 <code>vgap</code>  分别是水平和垂直间距。</li>\n<li><code>add(Component comp, Object constraints)</code>  方法可以设置组件的位置， <code>constraints</code>  是一个字符串，可以是 <code>NORTH</code> 、 <code>SOUTH</code> 、 <code>WEST</code> 、 <code>EAST</code> 、 <code>CENTER</code></li>\n</ul>\n<h4 id=\"gridlayout\"><a class=\"anchor\" href=\"#gridlayout\">#</a>  <code>GridLayout</code></h4>\n<ul>\n<li><code>GridLayout</code>  是 <code>java.awt</code>  包中的布局管理器，将容器分为行和列，每个单元格中放置一个组件。</li>\n<li><code>GridLayout</code>  的构造方法： <code>GridLayout(int rows, int cols, int hgap, int vgap)</code> ， <code>rows</code>  和 <code>cols</code>  分别是行数和列数， <code>hgap</code>  和 <code>vgap</code>  分别是水平和垂直间距。</li>\n</ul>\n<h4 id=\"cardlayout\"><a class=\"anchor\" href=\"#cardlayout\">#</a>  <code>CardLayout</code></h4>\n<ul>\n<li><code>CardLayout</code>  是 <code>java.awt</code>  包中的布局管理器，可以在容器中放置多个组件，但只能显示一个组件。</li>\n<li><code>CardLayout</code>  的构造方法： <code>CardLayout(int hgap, int vgap)</code> ， <code>hgap</code>  和 <code>vgap</code>  分别是水平和垂直间距。</li>\n<li><code>CardLayout</code>  添加组件的方法： <code>addLayoutComponent(Component comp, Object constraints)</code> ， <code>constraints</code>  是一个字符串，用于标识组件。</li>\n<li><code>CardLayout</code>  显示组件的方法： <code>show(Container parent, String name)</code> ， <code>parent</code>  是容器， <code>name</code>  是组件的标识。</li>\n</ul>\n<h4 id=\"gridbaglayout\"><a class=\"anchor\" href=\"#gridbaglayout\">#</a>  <code>GridBagLayout</code></h4>\n<ul>\n<li><code>GridBagLayout</code>  是 <code>java.awt</code>  包中的布局管理器。</li>\n</ul>\n<h3 id=\"事件处理\"><a class=\"anchor\" href=\"#事件处理\">#</a> 事件处理</h3>\n<h4 id=\"事件处理机制\"><a class=\"anchor\" href=\"#事件处理机制\">#</a> 事件处理机制</h4>\n<p><img loading=\"lazy\" data-src=\"https://blog.ivansnow02.xyz/blog-img/images/java-learning/682f1687e969c08d804f8b65288b4d48f2f5263df4c9b82726d68296630f5f2f.png\" alt=\"picture 2\" /></p>\n<p>应用委托模型编写事件处理程序一般包含以下几个步骤：</p>\n<ul>\n<li>确定事件源应关注的事件。</li>\n<li>设计处理各事件的事件监听器类。</li>\n<li>创建事件监听器对象。</li>\n<li>调用事件源的 <code>addXxxListener</code>  方法事件源注册事件监听器</li>\n</ul>\n<h5 id=\"事件源\"><a class=\"anchor\" href=\"#事件源\">#</a> 事件源</h5>\n<p>能够产生事件的组件都可以成为事件源，例如按钮、菜单、文本框等。</p>\n<ul>\n<li>事件源通常提供注册和注销事件监听器（Event Listener）的方法，注册 / 注销监听器的方法：\n<ul>\n<li><code>事件源对象.addXXXListener(监听器对象)</code></li>\n<li><code>事件源对象.removeXXXListener(监听器对象)</code></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"事件对象\"><a class=\"anchor\" href=\"#事件对象\">#</a> 事件对象</h5>\n<p>事件对象通常由用户操作触发，由 Java 虚拟机产生并传播的对象。<br />\n例如：点击按钮产生的事件（ActionEvent），按下某个键产生的事件（KeyEvent），关闭窗口产生的事件（WindowEvent）</p>\n<h5 id=\"事件监听器\"><a class=\"anchor\" href=\"#事件监听器\">#</a> 事件监听器</h5>\n<p>事件监听器（Event Listener）用于接收和处理事件的对象。</p>\n<p>Java 中采用委托模型的方式处理事件。即事件产生以后，不是由事件源处理事件，而是将事件委托给第三方对象 —— 事件监听器来处理。</p>\n<p>事件监听器能够工作必须满足两个要求：</p>\n<ul>\n<li>事件监听器实现了处理某种事件的接口方法；</li>\n<li>需要将事件监听器注册到事件源中，从而与事件源建立关联。</li>\n</ul>\n<p>根据事件源产生事件的类型和需要，可以为事件源注册一个或多个监视器，又称为注册监视器。注册监视器的方法： <code>事件源对象.addXXXListener(监视器)</code> （XXX 为对应的事件类型）。</p>\n<h5 id=\"事件处理方法\"><a class=\"anchor\" href=\"#事件处理方法\">#</a> 事件处理方法</h5>\n<p>事件处理方法是事件监听器接口中的方法，用于处理事件。</p>\n<h4 id=\"事件和事件分类\"><a class=\"anchor\" href=\"#事件和事件分类\">#</a> 事件和事件分类</h4>\n<ul>\n<li>低级事件：低级事件是指<strong>基于组件和容器的事件</strong>，当一个组件上发生事件，如鼠标的进入、点击、拖放等，或组件的窗口开关等时，触发了组件事件。如 <code>ComponentEvent</code> （组件事件：组件尺寸的变化、移动）、 <code>ContainerEvent</code> （容器事件：组件增加、移动）、 <code>FocusEvent</code> （焦点事件：焦点的获得和丟失）、 <code>KeyEvent</code> （键盘事件：键按下、释放）、 <code>MouseEvent</code> （鼠标事件：鼠标单击、移动）、 <code>WindowEvent</code> （窗口事件：关闭窗口、窗口闭合、图标化）等。</li>\n<li>高级事件（也称语意事件）：高级事件是<strong>基于语义的事件</strong>，它可以不和特定的动作相关联。是用来描述用户操作所产生的结果，低级事件是高级事件的基础。如 <code>ActionEvent</code> （动作事件：按钮按下， <code>TextField</code>  中按 <code>Enter</code>  键）、 <code>AdjustmentEvent</code> （调节事件：在滚动条上移动滑块以调节数值）、 <code>ItemEvent</code> （项目事件：选择项目，不选择 “项目改变”）、 <code>TextEvent</code> （文本事件：文本对象改变）等。</li>\n</ul>\n<h4 id=\"事件监听器-2\"><a class=\"anchor\" href=\"#事件监听器-2\">#</a> 事件监听器</h4>\n<p>事件监听器的实现，有两种方法：</p>\n<ul>\n<li>实现监听器接口： <code>implements XXXListener</code>\n<ul>\n<li>在事件源和事件监听器对象中进行约定的接口。</li>\n<li>事件监听器接口的名称与事件类的名称是相对的，例如： <code>KeyEvent</code>  事件类的监听器接口名为 <code>KeyListener</code></li>\n</ul>\n</li>\n<li>扩展监听适配类： <code>extends XXXAdapter</code> ，JDK 中也提供了大多数事件监听器接口的最简单的实现类，称之为事件适配器（ <code>Adapter</code> ） 类.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>事件类型</th>\n<th>监听接口</th>\n<th>接口中的方法</th>\n<th>适配器类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ActionEvent</td>\n<td>ActionListener</td>\n<td>actionPerformed(ActionEvent)</td>\n<td>无</td>\n</tr>\n<tr>\n<td>AdjustmentEvent</td>\n<td>AdjustmentListener</td>\n<td>adjustmentValueChanged(AdjustmentEvent)</td>\n<td>无</td>\n</tr>\n<tr>\n<td>ItemEvent</td>\n<td>ItemListener</td>\n<td>itemStateChanged(ItemEvent)</td>\n<td>无</td>\n</tr>\n<tr>\n<td>TextEvent</td>\n<td>TextListener</td>\n<td>textValueChanged(TextEvent)</td>\n<td>无</td>\n</tr>\n<tr>\n<td rowspan=\"5\">MouseEvent</td>\n<td rowspan=\"5\">MouseListener</td>\n<td>mouseClicked(MouseEvent)</td>\n<td rowspan=\"5\">MouseAdapter</td>\n</tr>\n<tr>\n<td>mouseEntered(MouseEvent)</td>\n</tr>\n<tr>\n<td>mouseExited(MouseEvent)</td>\n</tr>\n<tr>\n<td>mousePressed(MouseEvent)</td>\n</tr>\n<tr>\n<td>mouseReleased(MouseEvent)</td>\n</tr>\n<tr>\n<td rowspan=\"2\">MouseEvent</td>\n<td rowspan=\"2\">MouseMotionListener</td>\n<td>mouseDragged(MouseEvent)</td>\n<td rowspan=\"2\">MouseMotionAdapter</td>\n</tr>\n<tr>\n<td>mouseMoved(MouseEvent)</td>\n</tr>\n<tr>\n<td rowspan=\"3\">KeyEvent</td>\n<td rowspan=\"3\">KeyListener</td>\n<td>keyPressed(KeyEvent)</td>\n<td rowspan=\"3\">KeyAdapter</td>\n</tr>\n<tr>\n<td>keyReleased(KeyEvent)</td>\n</tr>\n<tr>\n<td>keyTyped(KeyEvent)</td>\n</tr>\n<tr>\n<td rowspan=\"2\">FocusEvent</td>\n<td rowspan=\"2\">FocusListener</td>\n<td>focusGained(FocusEvent)</td>\n<td rowspan=\"2\">FocusAdapter</td>\n</tr>\n<tr>\n<td>focusLost(FocusEvent)</td>\n</tr>\n<tr>\n<td rowspan=\"7\">WindowEvent</td>\n<td rowspan=\"7\">WindowListener</td>\n<td>windowActivated(WindowEvent)</td>\n<td rowspan=\"7\">WindowAdapter</td>\n</tr>\n<tr>\n<td>windowClosed(WindowEvent)</td>\n</tr>\n<tr>\n<td>windowClosing(WindowEvent)</td>\n</tr>\n<tr>\n<td>windowDeactivated(WindowEvent)</td>\n</tr>\n<tr>\n<td>windowDeiconified(WindowEvent)</td>\n</tr>\n<tr>\n<td>windowIconified(WindowEvent)</td>\n</tr>\n<tr>\n<td>windowOpened(WindowEvent)</td>\n</tr>\n<tr>\n<td rowspan=\"3\">DocumentEvent</td>\n<td rowspan=\"3\">DocumentListener</td>\n<td>changedUpdate(DocumentEvent)</td>\n<td rowspan=\"3\">无</td>\n</tr>\n<tr>\n<td>removeUpdate(DocumentEvent)</td>\n</tr>\n<tr>\n<td>insertUpdate(DocumentEvent)</td>\n</tr>\n</tbody>\n</table>\n<div class=\"note warning\">\n<p>实现接口需要实现接口中的所有方法，而适配器类中的方法都是空方法，可以选择性的实现。</p>\n</div>\n<h4 id=\"回调与事件监听器的实现\"><a class=\"anchor\" href=\"#回调与事件监听器的实现\">#</a> 回调与事件监听器的实现</h4>\n<ul>\n<li>回调是一种编程模式，是指在一个函数中调用另一个函数。</li>\n<li>在委托事件处理模型中，类 A 相当于事件源，类 B 相当于事件监视器，实现上述目的的设计方式有下面两类。\n<ul>\n<li>用<strong>闭包</strong>（closure）类实现事件监视器。可以用事件源的内部类的方式创建事件监视器；也可以把事件源和事件监视器类合而为一；如果监视器只有一个函数，还可以用 Lambda 表达式简写监视器。</li>\n<li>用<strong>外部类</strong>实现事件监视器。这时监视器 B 为了调用事件源 A 的回调方法，需要给监视器 B 传入事件源 A 的引用。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"事件源和事件监听器合二为一\"><a class=\"anchor\" href=\"#事件源和事件监听器合二为一\">#</a> 事件源和事件监听器合二为一</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr class=\"marked\"><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFrame</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JFrame</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ActionListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">JButton</span> button<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    button <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JButton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Click me\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    button<span class=\"token punctuation\">.</span><span class=\"token function\">addActionListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr class=\"marked\"><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">actionPerformed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Button clicked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"匿名内部类实现事件监听器\"><a class=\"anchor\" href=\"#匿名内部类实现事件监听器\">#</a> 匿名内部类实现事件监听器</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFrame</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JFrame</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">JButton</span> button<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    button <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JButton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Click me\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre>    button<span class=\"token punctuation\">.</span><span class=\"token function\">addActionListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ActionListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"7\"></td><td><pre>      <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr class=\"marked\"><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">actionPerformed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Button clicked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"lambda表达式实现事件监听器\"><a class=\"anchor\" href=\"#lambda表达式实现事件监听器\">#</a> Lambda 表达式实现事件监听器</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFrame</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JFrame</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">JButton</span> button<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    button <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JButton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Click me\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre>    button<span class=\"token punctuation\">.</span><span class=\"token function\">addActionListener</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Button clicked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"外部类实现事件监听器\"><a class=\"anchor\" href=\"#外部类实现事件监听器\">#</a> 外部类实现事件监听器</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFrame</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JFrame</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">JButton</span> button<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    button <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JButton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Click me\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr class=\"marked\"><td data-num=\"6\"></td><td><pre>    button<span class=\"token punctuation\">.</span><span class=\"token function\">addActionListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyActionListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyActionListener</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ActionListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr class=\"marked\"><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">actionPerformed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ActionEvent</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Button clicked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"网络编程\"><a class=\"anchor\" href=\"#网络编程\">#</a> 网络编程</h2>\n<h3 id=\"tcpip通信\"><a class=\"anchor\" href=\"#tcpip通信\">#</a> TCP/IP 通信</h3>\n<h4 id=\"创建socket对象\"><a class=\"anchor\" href=\"#创建socket对象\">#</a> 创建 <code>Socket</code>  对象</h4>\n<table>\n<thead>\n<tr>\n<th>构造方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Socket(String host, int port)</code></td>\n<td>创建一个流套接字并将其连接到指定主机上的指定端口号</td>\n</tr>\n<tr>\n<td><code>Socket(InetAddress address, int port)</code></td>\n<td>创建一个流套接字并将其连接到指定 IP 地址的指定端口号</td>\n</tr>\n<tr>\n<td><code>Socket()</code></td>\n<td>创建一个未连接的套接字</td>\n</tr>\n</tbody>\n</table>\n<p><code>Socket</code>  类的方法</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>getInputStream()-&gt;InputStream</code></td>\n<td>返回此套接字的输入流</td>\n</tr>\n<tr>\n<td><code>getOutputStream()-&gt;OutputStream</code></td>\n<td>返回此套接字的输出流</td>\n</tr>\n<tr>\n<td><code>close()-&gt;void</code></td>\n<td>关闭此套接字</td>\n</tr>\n<tr>\n<td><code>connect(SocketAddress endpoint)-&gt;void</code></td>\n<td>连接到服务器</td>\n</tr>\n<tr>\n<td><code>getInetAddress()-&gt;InetAddress</code></td>\n<td>返回此套接字连接的远程主机的地址</td>\n</tr>\n<tr>\n<td><code>getPort()-&gt;int</code></td>\n<td>返回此套接字连接的远程端口号</td>\n</tr>\n<tr>\n<td><code>getLocalAddress()-&gt;InetAddress</code></td>\n<td>返回此套接字绑定到的本地地址</td>\n</tr>\n<tr>\n<td><code>getLocalPort()-&gt;int</code></td>\n<td>返回此套接字绑定到的本地端口号</td>\n</tr>\n<tr>\n<td><code>getRemoteSocketAddress()-&gt;SocketAddress</code></td>\n<td>返回此套接字连接的远程地址</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"打开io流\"><a class=\"anchor\" href=\"#打开io流\">#</a> 打开 <code>IO</code>  流</h4>\n<p><code>ServerSocket</code>  类的构造方法和方法</p>\n<table>\n<thead>\n<tr>\n<th>构造方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ServerSocket(int port)</code></td>\n<td>创建绑定到指定端口的服务器套接字</td>\n</tr>\n<tr>\n<td><code>ServerSocket(int port, int backlog)</code></td>\n<td>创建绑定到指定端口的服务器套接字，并指定最大连接数</td>\n</tr>\n<tr>\n<td><code>ServerSocket(int port, int backlog, InetAddress bindAddr)</code></td>\n<td>创建绑定到指定端口的服务器套接字，并指定最大连接数和本地地址</td>\n</tr>\n<tr>\n<td><code>accept()-&gt;Socket</code></td>\n<td>侦听并接受到此套接字的连接</td>\n</tr>\n<tr>\n<td><code>close()-&gt;void</code></td>\n<td>关闭此套接字</td>\n</tr>\n<tr>\n<td><code>bind(SocketAddress endpoint)-&gt;void</code></td>\n<td>将服务器套接字绑定到指定的端口</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ServerSocket</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">//accept () 方法会阻塞，直到有客户端连接，</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 返回一个 Socket 对象同客户端进行交互</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  socket <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"cs模式一对一tcp通信\"><a class=\"anchor\" href=\"#cs模式一对一tcp通信\">#</a> C/S 模式一对一 TCP 通信</h4>\n<ul>\n<li>服务器端</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Server</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ServerSocket</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">BufferedReader</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">PrintWritter</span> os <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Scanner</span> sin <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      socket <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      os <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintWritter</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      sin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Client:\"</span> <span class=\"token operator\">+</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      line <span class=\"token operator\">=</span> sin<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bye\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        os<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server:\"</span> <span class=\"token operator\">+</span> line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        os<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Client:\"</span> <span class=\"token operator\">+</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        line <span class=\"token operator\">=</span> sin<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>server <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          server<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>socket <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          socket<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          is<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>os <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          os<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sin <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>          sin<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>客户端</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Scanner</span> sin <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">PrintWritter</span> os <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">BufferedReader</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      sin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      os <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintWritter</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      line <span class=\"token operator\">=</span> sin<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bye\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        os<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        os<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server:\"</span> <span class=\"token operator\">+</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        line <span class=\"token operator\">=</span> sin<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>socket <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          socket<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sin <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          sin<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>os <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          os<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          is<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"cs模式多对一tcp通信\"><a class=\"anchor\" href=\"#cs模式多对一tcp通信\">#</a> C/S 模式多对一 TCP 通信</h4>\n<ul>\n<li>服务器端</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Server</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> clientNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Socket</span><span class=\"token punctuation\">></span></span> clients <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">ServerSocket</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">boolean</span> listening <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Could not listen on port: 8888.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>listening<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      clients<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerThread</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">,</span> clientNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      clientNum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    server<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>服务器线程</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ServerThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> clientNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ServerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Socket</span> socket<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> clientNum<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ServerThread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>socket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clientNum <span class=\"token operator\">=</span> clientNum <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">BufferedReader</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">PrintWritter</span> os <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">Scanner</span> sin <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      os <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintWritter</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      sin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token class-name\">String</span> outStr <span class=\"token operator\">=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Client \"</span> <span class=\"token operator\">+</span> clientNum <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> outStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      line <span class=\"token operator\">=</span> sin<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>outStr <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        os<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        os<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        outStr</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Client \"</span> <span class=\"token operator\">+</span> clientNum <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> outStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        line <span class=\"token operator\">=</span> sin<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>socket <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          socket<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>is <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>          is<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>os <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>          os<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sin <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          sin<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "coding",
                "Java"
            ]
        },
        {
            "id": "https://blog.ivansnow02.xyz/heimadianping/",
            "url": "https://blog.ivansnow02.xyz/heimadianping/",
            "title": "Redis实战——黑马点评",
            "date_published": "2023-05-12T09:47:54.000Z",
            "content_html": "<p>就是黑马程序员的 Redis 教程里的黑马点评的项目，前面就不讲了，直接开始正题。</p>\n<h1 id=\"基于session实现登录流程\"><a class=\"anchor\" href=\"#基于session实现登录流程\">#</a> 基于 Session 实现登录流程</h1>\n<p>分为三个步骤：</p>\n<ul>\n<li>发送验证码</li>\n<li>短信验证码登录、注册</li>\n<li>校验登录状态</li>\n</ul>\n<h2 id=\"发送验证码\"><a class=\"anchor\" href=\"#发送验证码\">#</a> 发送验证码</h2>\n<h3 id=\"逻辑\"><a class=\"anchor\" href=\"#逻辑\">#</a> 逻辑：</h3>\n<p>用户在提交手机号后，会校验手机号是否合法，如果不合法，则要求用户重新输入手机号</p>\n<p>如果手机号合法，后台此时生成对应的验证码，同时将验证码进行保存，然后再通过短信的方式将验证码发送给用户</p>\n<img loading=\"lazy\" data-src=\"/heimadianping/1.png\" class=\"\" title=\"发送验证码\">\n<h3 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">sendCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> phone<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 校验手机号，不符合就返回错误，符合就生成验证码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RegexUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPhoneInvalid</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手机号格式错误！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">String</span> code <span class=\"token operator\">=</span> <span class=\"token class-name\">RandomUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 保存验证码到 session</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    session<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">,</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 发送验证码</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送短信验证码成功，验证码：\"</span> <span class=\"token operator\">+</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"短信验证码登录-注册\"><a class=\"anchor\" href=\"#短信验证码登录-注册\">#</a> 短信验证码登录、注册</h2>\n<h3 id=\"逻辑-2\"><a class=\"anchor\" href=\"#逻辑-2\">#</a> 逻辑：</h3>\n<p>用户将验证码和手机号进行输入，后台从 session 中拿到当前验证码，然后和用户输入的验证码进行校验，如果不一致，则无法通过校验，如果一致，则后台根据手机号查询用户，如果用户不存在，则为用户创建账号信息，保存到数据库，无论是否存在，都会将用户信息保存到 session 中，方便后续获得当前登录信息</p>\n<img loading=\"lazy\" data-src=\"/heimadianping/2.png\" class=\"\" title=\"短信验证码登录、注册\">\n<h3 id=\"代码-2\"><a class=\"anchor\" href=\"#代码-2\">#</a> 代码</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginFormDTO</span> loginForm<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 校验手机号和验证码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> phone <span class=\"token operator\">=</span> loginForm<span class=\"token punctuation\">.</span><span class=\"token function\">getPhone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RegexUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPhoneInvalid</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手机号格式错误！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Object</span> cacheCode <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">String</span> code <span class=\"token operator\">=</span> loginForm<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 不一致，报错</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cacheCode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>cacheCode<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"验证码错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 一致，根据手机号查用户</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">,</span> phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 判断是否存在</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 不存在，创建用户</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        user <span class=\"token operator\">=</span> <span class=\"token function\">createUserWithPhone</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    session<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyProperties</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UserDTO</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"校验登录状态\"><a class=\"anchor\" href=\"#校验登录状态\">#</a> 校验登录状态</h2>\n<p>校验登录状态需要配置拦截器来实现登录拦截功能</p>\n<h3 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h3>\n<p>当用户发起请求时，会访问我们像 tomcat 注册的端口，任何程序想要运行，都需要有一个线程对当前端口号进行监听，tomcat 也不例外，当监听线程知道用户想要和 tomcat 连接连接时，那会由监听线程创建 socket 连接，socket 都是成对出现的，用户通过 socket 像互相传递数据，当 tomcat 端的 socket 接受到数据后，此时监听线程会从 tomcat 的线程池中取出一个线程执行用户请求，在我们的服务部署到 tomcat 后，线程会找到用户想要访问的工程，然后用这个线程转发到工程中的 controller，service，dao 中，并且访问对应的 DB，在用户执行完请求后，再统一返回，再找到 tomcat 端的 socket，再将数据写回到用户端的 socket，完成请求和响应。</p>\n<p>每个用户其实对应都是去找 tomcat 线程池中的一个线程来完成工作的， 使用完成后再进行回收，既然每个请求都是独立的，所以在每个用户去访问我们的工程时，我们可以使用 threadlocal 来做到线程隔离，每个线程操作自己的一份数据</p>\n<h3 id=\"逻辑-3\"><a class=\"anchor\" href=\"#逻辑-3\">#</a> 逻辑</h3>\n<p>用户在请求时候，会从 cookie 中携带者 JsessionId 到后台，后台通过 JsessionId 从 session 中拿到用户信息，如果没有 session 信息，则进行拦截，如果有 session 信息，则将用户信息保存到 threadLocal 中，并且放行</p>\n<img loading=\"lazy\" data-src=\"/heimadianping/3.png\" class=\"\" title=\"校验登录状态\">\n<h3 id=\"代码-3\"><a class=\"anchor\" href=\"#代码-3\">#</a> 代码</h3>\n<ul>\n<li>首先实现 HandlerInterceptor 接口</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerInterceptor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//Get session</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">HttpSession</span> session <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//Get user from session</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Object</span> user <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//if user exists</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">//not exists, reject, return 401</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//save user in ThreadLocal</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">UserHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserDTO</span><span class=\"token punctuation\">)</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">UserHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>然后是 MvcConfig</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MvcConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptorRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LoginInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">excludePathPatterns</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token string\">\"/user/code\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token string\">\"/user/login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token string\">\"/blog/hot\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token string\">\"/shop/**\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token string\">\"/shop-type/**\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token string\">\"/voucher/**\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"session共享问题\"><a class=\"anchor\" href=\"#session共享问题\">#</a> session 共享问题</h2>\n<p>每个 Tomcat 中都有一份属于自己的 <code>session</code> , 假设用户第一次访问第一台 Tomcat，并且把自己的信息存放到第一台服务器的 <code>session</code>  中，但是第二次这个用户访问到了第二台 Tomcat，那么在第二台服务器上，肯定没有第一台服务器存放的 <code>session</code> ，所以此时 整个登录拦截功能就会出现问题，我们能如何解决这个问题呢？早期的方案是 <code>session</code>  拷贝，就是说虽然每个 Tomcat 上都有不同的 <code>session</code> ，但是每当任意一台服务器的 <code>session</code>  修改时，都会同步给其他的 Tomcat 服务器的 <code>session</code> ，这样的话，就可以实现 <code>session</code>  的共享了</p>\n<p>但是这种方案有两个<strong>大</strong>问题</p>\n<ol>\n<li>\n<p>每台服务器中都有完整的一份 <code>session</code>  数据，服务器压力过大。</p>\n</li>\n<li>\n<p><code>session</code>  拷贝数据时，可能会出现延迟</p>\n</li>\n</ol>\n<p>所以咱们要基于 Redis 来完成，我们把 <code>session</code>  换成 Redis，Redis 数据本身就是共享的，就可以避免 <code>session</code>  共享的问题了</p>\n<img loading=\"lazy\" data-src=\"/heimadianping/4.png\" class=\"\" title=\"session共享问题\">\n<h1 id=\"redis代替session的业务流程\"><a class=\"anchor\" href=\"#redis代替session的业务流程\">#</a> Redis 代替 <code>session</code>  的业务流程</h1>\n<h2 id=\"设计key\"><a class=\"anchor\" href=\"#设计key\">#</a> 设计 <code>key</code></h2>\n<p>我们可以生成一个随机字符串 <code>token</code> ，来存储。这样既可以满足唯一性也可以满足脱敏性。</p>\n<h2 id=\"整体流程\"><a class=\"anchor\" href=\"#整体流程\">#</a> 整体流程</h2>\n<p>当注册完成后，用户去登录会去校验用户提交的手机号和验证码，是否一致，如果一致，则根据手机号查询用户信息，不存在则新建，最后将用户数据保存到 Redis，并且生成 <code>token</code>  作为 Redis 的 <code>key</code> ，当我们校验用户是否登录时，会去携带着 <code>token</code>  进行访问，从 Redis 中取出 <code>token</code>  对应的 <code>value</code> ，判断是否存在这个数据，如果没有则拦截，如果存在则将其保存到 <code>threadLocal</code>  中，并且放行。</p>\n<img loading=\"lazy\" data-src=\"/heimadianping/5.png\" class=\"\" title=\"整体流程\">\n<h2 id=\"代码-4\"><a class=\"anchor\" href=\"#代码-4\">#</a> 代码</h2>\n<p>直接上代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ServiceImpl</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">UserMapper</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IUserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">sendCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> phone<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 校验手机号，不符合就返回错误，符合就生成验证码</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RegexUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPhoneInvalid</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手机号格式错误！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">String</span> code <span class=\"token operator\">=</span> <span class=\"token class-name\">RandomUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomNumbers</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 保存验证码到 Redis</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LOGIN_CODE_KEY</span> <span class=\"token operator\">+</span> phone<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">,</span> <span class=\"token constant\">LOGIN_CODE_TTL</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 发送验证码</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发送短信验证码成功，验证码：\"</span> <span class=\"token operator\">+</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Result</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoginFormDTO</span> loginForm<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpSession</span> session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 校验手机号和验证码</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">String</span> phone <span class=\"token operator\">=</span> loginForm<span class=\"token punctuation\">.</span><span class=\"token function\">getPhone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RegexUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPhoneInvalid</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"手机号格式错误！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 从 redis 获取验证码并校验</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">String</span> cacheCode <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LOGIN_CODE_KEY</span> <span class=\"token operator\">+</span> phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">String</span> code <span class=\"token operator\">=</span> loginForm<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 不一致，报错</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>cacheCode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>cacheCode<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"验证码错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 一致，根据手机号查用户</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">,</span> phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 判断是否存在</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// 不存在，创建用户</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            user <span class=\"token operator\">=</span> <span class=\"token function\">createUserWithPhone</span><span class=\"token punctuation\">(</span>phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 保存用户信息到 redis 中</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">// 随机生成 token，作为登录令牌</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 将 User 对象转为 HashMap 存储</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">UserDTO</span> userDTO <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyProperties</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UserDTO</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> userMap <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span>beanToMap</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token punctuation\">(</span>userDTO<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token class-name\">CopyOptions</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                        <span class=\"token punctuation\">.</span><span class=\"token function\">setIgnoreNullValue</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                        <span class=\"token punctuation\">.</span><span class=\"token function\">setFieldValueEditor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fieldName<span class=\"token punctuation\">,</span> fieldValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> fieldValue<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">// 存储</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token class-name\">String</span> tokenKey <span class=\"token operator\">=</span> <span class=\"token constant\">LOGIN_USER_KEY</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putAll</span><span class=\"token punctuation\">(</span>tokenKey<span class=\"token punctuation\">,</span> userMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">// 设置 token 有效期</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>tokenKey<span class=\"token punctuation\">,</span> <span class=\"token constant\">LOGIN_USER_TTL</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Result</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MvcConfig</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebMvcConfigurer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addInterceptors</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterceptorRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        registry<span class=\"token punctuation\">.</span><span class=\"token function\">addInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LoginInterceptor</span><span class=\"token punctuation\">(</span>stringRedisTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">excludePathPatterns</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token string\">\"/user/code\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token string\">\"/user/login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token string\">\"/blog/hot\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token string\">\"/shop/**\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token string\">\"/shop-type/**\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token string\">\"/voucher/**\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerInterceptor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LoginInterceptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stringRedisTemplate <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">//Get token in Header</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"authorization\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StrUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">//not exists, reject, return 401</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> <span class=\"token class-name\">RedisConstants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOGIN_USER_KEY</span> <span class=\"token operator\">+</span> token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">//Get user from Redis</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> userMap <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//if user exists</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userMap<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">//not exists, reject, return 401</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">401</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">//turn Hash to UserDTO</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">UserDTO</span> userDTO <span class=\"token operator\">=</span> <span class=\"token class-name\">BeanUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">fillBeanWithMap</span><span class=\"token punctuation\">(</span>userMap<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserDTO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">//save user in ThreadLocal</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">UserHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">saveUser</span><span class=\"token punctuation\">(</span>userDTO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// refresh token TTL</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">expire</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RedisConstants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOGIN_USER_TTL</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MINUTES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">UserHolder</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "coding",
                "Redis",
                "Java",
                "Spring"
            ]
        },
        {
            "id": "https://blog.ivansnow02.xyz/Redis-Learning-03-SpringDataRedis/",
            "url": "https://blog.ivansnow02.xyz/Redis-Learning-03-SpringDataRedis/",
            "title": "SpringDataRedis",
            "date_published": "2023-05-10T13:05:27.000Z",
            "content_html": "<h1 id=\"redis的java客户端\"><a class=\"anchor\" href=\"#redis的java客户端\">#</a> Redis 的 Java 客户端</h1>\n<p>Redis 的客户端可以在<a href=\"https://redis.io/docs/clients/\"> Redis 官网</a>找到，推荐的客户端包括：</p>\n<ul>\n<li>Jedis：以 Redis 命令作为方法名称，学习成本低，简单实用。但是 Jedis 实例是<strong>线程不安全</strong>的，<strong>多线程环境下需要基于连接池来使用</strong></li>\n<li>Lettuce：Lettuce 是基于 Netty 实现的，支持同步、异步和响应式编程方式，并且是线程安全的。支持 Redis 的哨兵模式、集群模式和管道模式</li>\n<li>Redisson：是在 Redis 基础上实现了分布式的可伸缩的 java 数据结构，例如 Map、Queue 等，而且支持跨进程的同步机制：Lock、Semaphore 等待，比较适合用来实现特殊的功能需求</li>\n</ul>\n<h2 id=\"jedis\"><a class=\"anchor\" href=\"#jedis\">#</a> Jedis</h2>\n<blockquote>\n<p><a href=\"https://github.com/redis/jedis\">Jedis 官网</a></p>\n</blockquote>\n<h3 id=\"jedis快速入门\"><a class=\"anchor\" href=\"#jedis快速入门\">#</a> Jedis 快速入门</h3>\n<h4 id=\"导入依赖\"><a class=\"anchor\" href=\"#导入依赖\">#</a> 导入依赖</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--jedis--></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>redis.clients<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jedis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.junit.jupiter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>junit-jupiter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>5.9.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"建立连接\"><a class=\"anchor\" href=\"#建立连接\">#</a> 建立连接</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Jedis</span> jedis<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@BeforeEach</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">setUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 1. 建立连接</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    jedis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 2. 设置密码</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//jedis.auth(\"\");</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 3. 选择库</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 存入</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Snow San\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result = \"</span> <span class=\"token operator\">+</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 获取</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testHash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 插入</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Snow San\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hset</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"18\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 获取</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">hgetAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"释放资源\"><a class=\"anchor\" href=\"#释放资源\">#</a> 释放资源</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@AfterEach</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jedis <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"jedis连接池\"><a class=\"anchor\" href=\"#jedis连接池\">#</a> Jedis 连接池</h3>\n<p>Jedis 本身是<strong>线程不安全</strong>的，并且频繁的创建和销毁连接会有性能损耗，因此推荐使用 Jedis 连接池～</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JedisConnectionFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">JedisPool</span> jedisPool<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 配置连接池</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">JedisPoolConfig</span> poolConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPoolConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        poolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        poolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        poolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMinIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        poolConfig<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxWaitMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 创建连接池对象，参数：连接池配置、服务端 ip、服务端端口、超时时间、密码</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        jedisPool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPool</span><span class=\"token punctuation\">(</span>poolConfig<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                  <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                                  <span class=\"token number\">6379</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                                  <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                                  <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 密码在此（</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Jedis</span> <span class=\"token function\">getJedis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> jedisPool<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"springdataredis客户端\"><a class=\"anchor\" href=\"#springdataredis客户端\">#</a> SpringDataRedis 客户端</h2>\n<p><s>接下来就是本次的主角啦！</s></p>\n<p>SpringData 是 Spring 中数据操作的模块，包含对各种数据库的集成，其中对 Redis 的集成模块就叫做 SpringDataRedis，<a href=\"https://spring.io/projects/spring-data-redis\">SpringDataRedis 官网</a></p>\n<p>ta 的特点如下：</p>\n<ul>\n<li>提供了对不同 Redis 客户端的整合（Lettuce 和 Jedis）</li>\n<li>提供了 RedisTemplate 统一 API 来操作 Redis</li>\n<li>支持 Redis 的发布订阅模型</li>\n<li>支持 Redis 哨兵和 Redis 集群</li>\n<li>支持基于 Lettuce 的响应式编程</li>\n<li>支持基于 JDK、JSON、字符串、Spring 对象的数据序列化及反序列化</li>\n<li>支持基于 Redis 的 JDKCollection 实现</li>\n</ul>\n<p>SpringDataRedis 中提供了 RedisTemplate 工具类，其中封装了各种对 Redis 的操作。并且将不同数据类型的操作 API 封装到了不同的类型中</p>\n<h3 id=\"springdataredis快速入门\"><a class=\"anchor\" href=\"#springdataredis快速入门\">#</a> SpringDataRedis 快速入门</h3>\n<h4 id=\"新建一个boot项目\"><a class=\"anchor\" href=\"#新建一个boot项目\">#</a> 新建一个 boot 项目</h4>\n<p><s>别说你连 boot 项目都不会建</s></p>\n<h4 id=\"引入依赖\"><a class=\"anchor\" href=\"#引入依赖\">#</a> 引入依赖</h4>\n<p>要引入 <code>spring-boot-starter-data-redis</code> , <code>commons-pool2</code>  和 <code>jackson-databind</code> ，不过貌似 MVC 已经整合了 <code>jackson</code> ？</p>\n<p><s>懒的话整个 <code>lombok</code> </s></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--redis 依赖 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-data-redis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">&lt;!--common-pool--></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.commons<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>commons-pool2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">&lt;!--Jackson 依赖 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"配置redis\"><a class=\"anchor\" href=\"#配置redis\">#</a> 配置 Redis</h4>\n<p>说到 boot 果然就是 yaml 呢～～（笑）~~</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> 0.0.0.0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6379</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token key atrule\">lettuce</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token key atrule\">pool</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token key atrule\">max-active</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token key atrule\">max-idle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token key atrule\">min-idle</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token key atrule\">max-wait</span><span class=\"token punctuation\">:</span> 1000ms</pre></td></tr></table></figure><h4 id=\"注入redistemplate\"><a class=\"anchor\" href=\"#注入redistemplate\">#</a> 注入 RedisTemplate</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">RedisTemplate</span> redisTemplate<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"测试-2\"><a class=\"anchor\" href=\"#测试-2\">#</a> 测试！</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">testString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 写入</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Snow San\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 获取</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Object</span> name <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"自定义序列化~~白雪~~\"><a class=\"anchor\" href=\"#自定义序列化~~白雪~~\">#</a> 自定义序列化～～（白雪）~~</h3>\n<p>RedisTemplate 可以接收任意 <code>Object</code>  作为值写入 Redis, 但在写入前会把 <code>Object</code>  序列化为字节形式，默认是采用 JDK 序列化，缺点是：</p>\n<ul>\n<li>可读性差</li>\n<li>内存占用较大</li>\n</ul>\n<p>因此可以自定义 RedisTemplate 的序列化方式，采用 JSON 序列化来代替默认的 JDK 序列化方式</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> template <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 创建 JSON 序列化工具</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">GenericJackson2JsonRedisSerializer</span> jsonRedisSerializer <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericJackson2JsonRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 设置 Key 的序列化</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisSerializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisSerializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 设置 Value 的序列化</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setValueSerializer</span><span class=\"token punctuation\">(</span>jsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        template<span class=\"token punctuation\">.</span><span class=\"token function\">setHashValueSerializer</span><span class=\"token punctuation\">(</span>jsonRedisSerializer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 返回</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> template<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>JSON 序列化在查询时还能自动把 JSON 反序列化为 Java 对象，注意 <code>@class</code>  字段，ta 会带来额外的内存开销</p>\n<h3 id=\"stringredistemplate\"><a class=\"anchor\" href=\"#stringredistemplate\">#</a> StringRedisTemplate</h3>\n<p>为了节省内存空间，我们可以不使用 JSON 序列化器来处理 value，而是统一使用 String 序列化器，要求只能存储 String 类型的 key 和 value。</p>\n<p>不过当需要存储 Java 对象时，必须手动完成对象的序列化和反序列化</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StringRedisTemplate</span> stringRedisTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 写入</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"verify:phone:11111111\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 获取</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Object</span> name <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = \"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObjectMapper</span> mapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">testSaveUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">JsonProcessingException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 创建对象</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Snow\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 手动序列化</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 写入</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:1\"</span><span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 获取</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">String</span> jsonUser <span class=\"token operator\">=</span> stringRedisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user:1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 手动反序列化</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">User</span> user1 <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>jsonUser<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user1 = \"</span> <span class=\"token operator\">+</span> user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "coding",
                "Redis",
                "Java"
            ]
        }
    ]
}